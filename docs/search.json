[
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "BST 260 Introduction to Data Science\nKresge 202A and 202B (HSPH)\nMonday 09:45 AM - 11:15 AM; Wednesday 09:45 AM - 11:15 AM\nLecture notes: https://datasciencelabs.github.io/2024/\nSlack workspace: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#general-information",
    "href": "syllabus.html#general-information",
    "title": "Syllabus",
    "section": "",
    "text": "BST 260 Introduction to Data Science\nKresge 202A and 202B (HSPH)\nMonday 09:45 AM - 11:15 AM; Wednesday 09:45 AM - 11:15 AM\nLecture notes: https://datasciencelabs.github.io/2024/\nSlack workspace: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\nWe assume students have taken or are taking a probability and statistics course and have basic programming skills.\nStudents not matriculated in an HSPH Biostatistics graduate program (HDS SM60, BIO SM80 / SM60 / SM1, and CBQG SM80) will be required to score at least 90% on a basic math and programming diagnostic test to enroll in the course. If you are in a HSPH Biostatistics graduate program and you score less than 90% we will contact you to offer supplementary resource to help you be prepared for the course.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#textbooks",
    "href": "syllabus.html#textbooks",
    "title": "Syllabus",
    "section": "Textbooks",
    "text": "Textbooks\n\nIntroduction to Data Science: Data Wrangling and Visualization with R\nIntroduction to Data Science: Statistics and Prediction Algorithms Through Case Studies",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-description",
    "href": "syllabus.html#course-description",
    "title": "Syllabus",
    "section": "Course Description",
    "text": "Course Description\nThis course introduces the following:\n\nUNIX/Linux shell\nReproducible document preparation with RStudio, knitr, and markdown\nVersion control with git and GitHub\nR programming\nData wrangling with dplyr and data.table\nData visualization with ggplot2\n\nWe also demonstrate how the following concepts are applied in data analysis:\n\nProbability theory\nStatistical inference and modeling\nHigh-dimensional data techniques\nMachine learning\n\nWe do not cover the theory and details of these methods as they are covered in other courses.\nThroughout the course, we use motivating case studies and data analysis problem sets based on challenges similar to those you encounter in scientific research.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#weekly-course-structure",
    "href": "syllabus.html#weekly-course-structure",
    "title": "Syllabus",
    "section": "Weekly Course Structure",
    "text": "Weekly Course Structure\n\nMonday lectures: We describe the concerts, methods, and skills needed for problem sets.\nWednesday labs: We work together on problem sets.\nFriday: Problem sets due (see Key Dates and Problem Sets).\n\nPlease ensure that you read the chapters listed in the syllabus before each Monday. The lectures are designed with the assumption that you have completed the readings, enabling us to dive deeper into the nuances of data analysis and coding.\nLectures will not be recorded.\nWe will have a Slack workspace for you to ask questions during and after class.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#grade-distribution",
    "href": "syllabus.html#grade-distribution",
    "title": "Syllabus",
    "section": "Grade Distribution",
    "text": "Grade Distribution\n\n\n\nComponent\nWeight\n\n\n\n\n10 problem sets\n50%\n\n\nMidterm 1\n10%\n\n\nMidterm 2\n20%\n\n\nFinal project\n20%",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#problem-sets",
    "href": "syllabus.html#problem-sets",
    "title": "Syllabus",
    "section": "Problem Sets",
    "text": "Problem Sets\nProblem sets will be due every week or every other week, depending on difficulty. They will be due at 11:59 PM on the day denoted on the Problem Sets page.\nSome problem sets include open ended questions that will be difficult to answer on your own. We will be working on these together during Wednesday labs. We also offer office hours where you can get help with unanswered questions.\nProblem sets must be submitted via GitHub. Students are required to have a GitHub account and create a repository for the course. We will be providing further instructions during the first lab.\n10% of the total points for the problem sets will be deducted for every late day. Students can have a total of 4 late days without penalty during the entire semester. No need to provide a written excuse. Providing an excuse does not give you more days unless an accommodation is requested and approved by the Office of Student Affairs (this includes COVID).\nProblem set submissions need to be completely reproducible Quarto documents. If your Quarto file does not compile it will be considered a late day, and you will be notified and will need to resubmit a Quarto file that does compile. You will be deducted further late days for every day it takes for you to turn in a Quarto file that does knit. You are required to check emails that come through the Canvas system, as this the only way we will communicate problems with your problem sets.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#midterm-policy",
    "href": "syllabus.html#midterm-policy",
    "title": "Syllabus",
    "section": "Midterm Policy",
    "text": "Midterm Policy\nBoth midterms are closed book, no internet, and in-class. You are expected to complete them in 1 hour.\nQuestions will be drawn mostly or entirely from the problem sets.\nPlease make sure you can come to class on the midterm dates provided in the Key Dates table below. If you miss the exam, you will need approval from the Office of Student Affairs to receive a makeup. All make-up exams will be completely different from the in-class ones.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#final-project",
    "href": "syllabus.html#final-project",
    "title": "Syllabus",
    "section": "Final Project",
    "text": "Final Project\nFor your final project we ask that you turn in a 4-6 page report using data to answer a public health related question. You can chose from one of the following:\n\nBased on state-level data, how effective where vaccines against SARS-CoV-2 reported cases and COVID-19 hospitalizations and deaths, and vaccination rates.\nWhat was the excess mortality after Hurricane María in Puerto Rico? Where different age groups affected differently?\n\nOptionally, you can select a question that align with your ongoing research. This way, it can be directly beneficial to your work. This will require prior approval from the instructor by October 25.\nYet another option is to build a interactive webpage with poll-driven predictions for the 2024 US elections. Note this will be more challenging as we will not cover tools for interactive webpages until the last week of class (time permitting).\nNote: You should start working on your project after the first midterm. Do not wait until the last week. Teaching staff will be available during office hours.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#chatgpt-policy",
    "href": "syllabus.html#chatgpt-policy",
    "title": "Syllabus",
    "section": "ChatGPT Policy",
    "text": "ChatGPT Policy\nYou can use ChatGPT however you want. Do remember you won’t be able to use it during the midterms.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#key-dates",
    "href": "syllabus.html#key-dates",
    "title": "Syllabus",
    "section": "Key Dates",
    "text": "Key Dates\n\n\n\n\n\n\n\nDate\nEvent\n\n\n\n\nSep 10\nPset 1 due\n\n\nSep 13\nPset 2 due\n\n\nOct 14\nNo class: Indigenous Peoples’ Day\n\n\nOct 16\nMidterm 1: covers material from Sep 04-Oct 11\n\n\nOct 23\nStart final project. Obtain approval if you want to do a personal project instead.\n\n\nNov 11\nNo class: Veterans’ Day\n\n\nNov 25\nMidterm 2: cover material from Sep 04-Nov 22\n\n\nNov 27\nNo class: Thanksgiving Recess Begins\n\n\nDec 20\nFinal Project due",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "slides/productivity/04-git.html#goal-for-the-day",
    "href": "slides/productivity/04-git.html#goal-for-the-day",
    "title": "Git and GitHub",
    "section": "Goal for the day",
    "text": "Goal for the day\n\nCreate a repository\npush something to the repository\nconnect RStudio to GitHub"
  },
  {
    "objectID": "slides/productivity/04-git.html#do-you-have-git",
    "href": "slides/productivity/04-git.html#do-you-have-git",
    "title": "Git and GitHub",
    "section": "Do you have git?",
    "text": "Do you have git?\nBefore we start:\n\nMake sure you have Git installed.\nOpen a terminal and type:\n\n\ngit --version\n\nIf not installed\n\non a Mac, follow the instructions after typing the above.\non Windows follow these instructions"
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation",
    "href": "slides/productivity/04-git.html#motivation",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\nWe want to avoid this:\n\nPosted by rjkb041 on r/ProgrammerHumor"
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation-1",
    "href": "slides/productivity/04-git.html#motivation-1",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\n\nThis is particularly true when more than one person is collaborating and editing the file.\nEven more important when there are multiple files, as there is in software development, and to some extend data analysis."
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation-2",
    "href": "slides/productivity/04-git.html#motivation-2",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\n\nGit is a version control system that provides a systematic approach to keeping versions of files.\n\n\nPosted on devrant.com/ by bhimanshukalra"
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation-3",
    "href": "slides/productivity/04-git.html#motivation-3",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\nBut we have to learn some things.\n\nFrom Meme Git Compilation by Lulu Ilmaknun Qurotaini"
  },
  {
    "objectID": "slides/productivity/04-git.html#why-use-git-and-github",
    "href": "slides/productivity/04-git.html#why-use-git-and-github",
    "title": "Git and GitHub",
    "section": "Why use Git and GitHub?",
    "text": "Why use Git and GitHub?\n\nSharing.\nCollaborating.\nVersion control.\n\nWe focus on the sharing aspects of Git and GitHub, but introduce some of the basics that permit you to collaborate and use version control."
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-git",
    "href": "slides/productivity/04-git.html#what-is-git",
    "title": "Git and GitHub",
    "section": "What is Git?",
    "text": "What is Git?"
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-github",
    "href": "slides/productivity/04-git.html#what-is-github",
    "title": "Git and GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\n\nDescribed a social network for software developers.\nBasically, it’s a service that hosts the remote repository (repo) on the web.\nThis facilitates collaboration and sharing greatly."
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-github-1",
    "href": "slides/productivity/04-git.html#what-is-github-1",
    "title": "Git and GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\nThere many other features such as\n\nRecognition system: reward, badges and stars.\nYou can host web pages, like the class notes for example.\nPermits contributions via forks and pull requests.\nIssue tracking\nAutomation tools."
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-github-2",
    "href": "slides/productivity/04-git.html#what-is-github-2",
    "title": "Git and GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\n\nThe main tool behind GitHub is Git.\nSimilar to how the main tool behind RStudio is R."
  },
  {
    "objectID": "slides/productivity/04-git.html#github-accounts",
    "href": "slides/productivity/04-git.html#github-accounts",
    "title": "Git and GitHub",
    "section": "GitHub accounts",
    "text": "GitHub accounts\n\nPick a professional sounding name.\nConsider adding a profile README.md.\nInstructions are here.\nExample here."
  },
  {
    "objectID": "slides/productivity/04-git.html#repositories",
    "href": "slides/productivity/04-git.html#repositories",
    "title": "Git and GitHub",
    "section": "Repositories",
    "text": "Repositories\n\nWe are ready to create a GitHub repository (repo).\nYou will have at least two copies of your code: one on your computer and one on GitHub.\nIf you add collaborators to this repo, then each will have a copy on their computer.\nThe GitHub copy is considered the main (previously called master) copy that everybody syncs to.\nGit will help you keep all the different copies synced."
  },
  {
    "objectID": "slides/productivity/04-git.html#repositories-1",
    "href": "slides/productivity/04-git.html#repositories-1",
    "title": "Git and GitHub",
    "section": "Repositories",
    "text": "Repositories\n\nLet’s go make one on GitHub…\nThen create a directory on your computer, this will be the local repo, and connect it to the Github repository.\nFirst copy and paste the location of your git repository. It should look something like this:\n\nhttps://github.com/your-username/your-repo-name.git"
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github",
    "href": "slides/productivity/04-git.html#connect-git-and-github",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nWhen accessing GitHub you need credentials to verify your identity.\nThere are two ways to connect: HTTPS or SSH, each requiring different credentials.\nWe recommend using HTTPS, which uses a Personal Access Token (PAT).\nNote that your GitHub website password isn’t your access token."
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-1",
    "href": "slides/productivity/04-git.html#connect-git-and-github-1",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nDetailed instructions are here.\nCarefully follow the instructions provided by GitHub.\nWhen setting permissions for the token, choose non-expiring and select the repo option in the scopes section.\nOnce you complete these steps, GitHub will display your token—a lengthy string of characters.\nImmediately copy this token to your clipboard. This is the only time GitHub will show it to you."
  },
  {
    "objectID": "slides/productivity/04-git.html#generate-a-token",
    "href": "slides/productivity/04-git.html#generate-a-token",
    "title": "Git and GitHub",
    "section": "Generate a token:",
    "text": "Generate a token:\n\nFor security, save this token in a password manager. This ensures you can access it if needed later on.\nWhen git prompts you to enter your password, paste the token you’ve copied. After this, password prompts should no longer appear.\nIf you ever need the token again, retrieve it from your password manager.\n\nMore details available from Happy Git and GitHub for the use."
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-2",
    "href": "slides/productivity/04-git.html#connect-git-and-github-2",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nThe next step is to let Git know who we are on Github.\nTo to this type the following two commands in our terminal window:\n\n\ngit config --global user.name \"Your Name\"\ngit config --global user.mail \"your@email.com\""
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-3",
    "href": "slides/productivity/04-git.html#connect-git-and-github-3",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nThis will change the Git configuration in way that anytime you use Git, it will know this information.\nNote that you need to use the email account that you used to open your GitHub account."
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-4",
    "href": "slides/productivity/04-git.html#connect-git-and-github-4",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\nTo connect working directory to the GitHub repo\n\ninitialize the directory:\n\n\ngit init\n\n\nLet Git know what is the remote repository.\n\n\ngit remote add origin &lt;remote-url&gt;\n\nNow the two are connected.\n\n\n\n\n\n\nNote\n\n\norigin is a nickname we will use for the remote. We can call it something else, but everybody calls it origin so best to stick with that."
  },
  {
    "objectID": "slides/productivity/04-git.html#overview-of-git",
    "href": "slides/productivity/04-git.html#overview-of-git",
    "title": "Git and GitHub",
    "section": "Overview of Git",
    "text": "Overview of Git\nThe main actions in Git are to:\n\npull changes from the remote repo.\nadd files, or as we say in the Git lingo stage files.\ncommit changes to the local repo.\npush changes to the remote repo."
  },
  {
    "objectID": "slides/productivity/04-git.html#the-four-areas-of-git",
    "href": "slides/productivity/04-git.html#the-four-areas-of-git",
    "title": "Git and GitHub",
    "section": "The four areas of Git",
    "text": "The four areas of Git"
  },
  {
    "objectID": "slides/productivity/04-git.html#status",
    "href": "slides/productivity/04-git.html#status",
    "title": "Git and GitHub",
    "section": "Status",
    "text": "Status\n\n\ngit status filename"
  },
  {
    "objectID": "slides/productivity/04-git.html#add",
    "href": "slides/productivity/04-git.html#add",
    "title": "Git and GitHub",
    "section": "Add",
    "text": "Add\nUse git add to put file to staging area.\n\n\ngit add &lt;filename&gt;\n\nWe say that this file has been staged. Check to see what happened:\n\ngit status &lt;filename&gt;"
  },
  {
    "objectID": "slides/productivity/04-git.html#commit",
    "href": "slides/productivity/04-git.html#commit",
    "title": "Git and GitHub",
    "section": "Commit",
    "text": "Commit\n\nTo move all the staged files to the local repository we use git commit.\n\n\n\ngit commit -m \"must add comment\"\n\n\nOnce committed the files are tracked and a copy of this version is kept going forward.\nThis is like adding V1 to your filename."
  },
  {
    "objectID": "slides/productivity/04-git.html#commit-1",
    "href": "slides/productivity/04-git.html#commit-1",
    "title": "Git and GitHub",
    "section": "Commit",
    "text": "Commit\n\n\n\n\n\n\nNote\n\n\nYou can commit files directly without using add by explicitely writing the files at the end of the commit:\n\n\n\n\ngit commit -m \"must add comment\" &lt;filename&gt;"
  },
  {
    "objectID": "slides/productivity/04-git.html#push",
    "href": "slides/productivity/04-git.html#push",
    "title": "Git and GitHub",
    "section": "Push",
    "text": "Push\n\nTo move to upstream repo we use git push\n\n\n\ngit push -u origin main\n\n\nThe -u flag sets the upstream repo.\nBy using this flag, going forward you can simply use git push to push changes.\nSo going forward we can just type:\n\n\ngit push"
  },
  {
    "objectID": "slides/productivity/04-git.html#push-1",
    "href": "slides/productivity/04-git.html#push-1",
    "title": "Git and GitHub",
    "section": "Push",
    "text": "Push\n\nWhen using git push we need to be careful as if collaborating this will affect the work of others.\nIt might also create a conflict.\n\n\nPosted by andortang on Nothing is Impossible!"
  },
  {
    "objectID": "slides/productivity/04-git.html#fetch",
    "href": "slides/productivity/04-git.html#fetch",
    "title": "Git and GitHub",
    "section": "Fetch",
    "text": "Fetch\n\nTo update our local repository to the remote one we use\n\n\ngit fetch"
  },
  {
    "objectID": "slides/productivity/04-git.html#merge",
    "href": "slides/productivity/04-git.html#merge",
    "title": "Git and GitHub",
    "section": "Merge",
    "text": "Merge\n\nOnce we are sure this is good, we can merge with our local files:\n\n\ngit merge"
  },
  {
    "objectID": "slides/productivity/04-git.html#pull",
    "href": "slides/productivity/04-git.html#pull",
    "title": "Git and GitHub",
    "section": "Pull",
    "text": "Pull\n\nI rarely use fetch and merge and instead use pull which does both of these in one step\n\n\ngit pull"
  },
  {
    "objectID": "slides/productivity/04-git.html#checkout",
    "href": "slides/productivity/04-git.html#checkout",
    "title": "Git and GitHub",
    "section": "Checkout",
    "text": "Checkout\n\nIf you want to pull down a specific file you from the remote repo you can use:\n\n\ngit checkout filename\n\n\nI use this when I make changes but decide I want to go back to original version on remote repo.\n\n\n\n\n\n\n\nWarning\n\n\nIf you have a newer version in your local repository this will create a conflict. It won’t let you do it. If you are sure you want to get rid of your local copy you can remove it and then use checkout."
  },
  {
    "objectID": "slides/productivity/04-git.html#checkout-1",
    "href": "slides/productivity/04-git.html#checkout-1",
    "title": "Git and GitHub",
    "section": "Checkout",
    "text": "Checkout\n\nYou can also use checkout to obtain older version:\n\n\ngit checkout &lt;commit-id&gt; &lt;filename&gt;\n\n\nYou can get the commit-id either on the GitHub webpage or using\n\n\ngit log filename"
  },
  {
    "objectID": "slides/productivity/04-git.html#reset",
    "href": "slides/productivity/04-git.html#reset",
    "title": "Git and GitHub",
    "section": "Reset",
    "text": "Reset\n\nWhat if I commit and realize it was a mistake?\n\n\ngit reset HEAD~1\n\nundos the commit and unstages the files, but keeps your local copies. I use this on very often.\n\nThere are many wasy of using get reset and it covers most scenarios.\nChatGPT and stackoverflow are great resources to learn more."
  },
  {
    "objectID": "slides/productivity/04-git.html#branches",
    "href": "slides/productivity/04-git.html#branches",
    "title": "Git and GitHub",
    "section": "Branches",
    "text": "Branches\n\nWe are just sratching the surface of Git.\nOne advanced feature to be aware of is that you can have several branches, useful for working in parallel or testing stuff out that might not make the main repo.\n\n\nArt by: Allison Horst"
  },
  {
    "objectID": "slides/productivity/04-git.html#branches-1",
    "href": "slides/productivity/04-git.html#branches-1",
    "title": "Git and GitHub",
    "section": "Branches",
    "text": "Branches\n\nWe wont go over this, but we might need to use these two related commands:\n\n\ngit remote -v\ngit brach"
  },
  {
    "objectID": "slides/productivity/04-git.html#clone",
    "href": "slides/productivity/04-git.html#clone",
    "title": "Git and GitHub",
    "section": "Clone",
    "text": "Clone\n\nAnother common command is git clone.\nIt let’s download an entire repo, including version history.\n\n\ngit clone &lt;repo-url&gt;"
  },
  {
    "objectID": "slides/productivity/04-git.html#using-git-in-rstudio",
    "href": "slides/productivity/04-git.html#using-git-in-rstudio",
    "title": "Git and GitHub",
    "section": "Using Git in RStudio",
    "text": "Using Git in RStudio\n\nGo to file, new project, version control, and follow the instructions.\nThen notice the Git tab in the preferences."
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#the-panes",
    "href": "slides/productivity/02-rstudio.html#the-panes",
    "title": "RStudio",
    "section": "The panes",
    "text": "The panes"
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#the-basics",
    "href": "slides/productivity/02-rstudio.html#the-basics",
    "title": "RStudio",
    "section": "The Basics",
    "text": "The Basics\nLet’s try a few things together:\n\nOpen a new R script file.\nLearn tab complete.\nRun commands while editing scripts.\nRun the entire script.\nMake a plot.\nChange options to never save workspace.\nChange IDE appearance."
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#projects",
    "href": "slides/productivity/02-rstudio.html#projects",
    "title": "RStudio",
    "section": "Projects",
    "text": "Projects\nLet’s try this together:\n\nStart new project in new directory.\nStart new project in existing directory.\nChange projects."
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#type-of-editor",
    "href": "slides/productivity/02-rstudio.html#type-of-editor",
    "title": "RStudio",
    "section": "Type of editor",
    "text": "Type of editor\nLet’s examine the two types of editors available:\n\nSource - See the actual code (WYSIWYG)\nVisual - Partial preview of final document.\n\nNote: You can state your preference in a the header:\neditor: source\n\nWe learn about headers in the Quarto lecture."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#ggplot2",
    "href": "slides/R/08-ggplot2.html#ggplot2",
    "title": "ggplot2",
    "section": "ggplot2",
    "text": "ggplot2\nThe code in this lecture assumes these three libraries are loaded:\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(dslabs)"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#the-components-of-a-graph",
    "href": "slides/R/08-ggplot2.html#the-components-of-a-graph",
    "title": "ggplot2",
    "section": "The components of a graph",
    "text": "The components of a graph\nIn today’s lecture we recreate this:"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#the-components-of-a-graph-1",
    "href": "slides/R/08-ggplot2.html#the-components-of-a-graph-1",
    "title": "ggplot2",
    "section": "The components of a graph",
    "text": "The components of a graph\n\ngg stands for grammar of graphics.\nAnalogy: we learn verbs and nouns to construct sentences.\nThe first step in learning ggplot2 is breaking a graph apart into components.\nLet’s break down the plot we want to recreate while introducing some ggplot2 terminology."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#the-components-of-a-graph-2",
    "href": "slides/R/08-ggplot2.html#the-components-of-a-graph-2",
    "title": "ggplot2",
    "section": "The components of a graph",
    "text": "The components of a graph\n\nThe main three components to note are:\n\nData: The US murders data table is being summarized. We refer to this as the data component.\n\nGeometry: The plot above is a scatterplot. This is referred to as the geometry component.\nAesthetic mapping: How we map visual cues to information provided by the dataset."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#aesthetic-mapping",
    "href": "slides/R/08-ggplot2.html#aesthetic-mapping",
    "title": "ggplot2",
    "section": "Aesthetic mapping",
    "text": "Aesthetic mapping\n\nThe two most important cues in the plot we are recreating are the point positions on the x-axis and y-axis.\nEach point represents a different observation, and we map data about these observations to visual cues like x- and y-scale.\nColor is another visual cue that we map to region.\nHow we define the mapping depends on what geometry we are using."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#the-components-of-a-graph-3",
    "href": "slides/R/08-ggplot2.html#the-components-of-a-graph-3",
    "title": "ggplot2",
    "section": "The components of a graph",
    "text": "The components of a graph\n\nWe also note that:\n\nThe points are labeled with the state abbreviations.\nThe range of the x-axis and y-axis appears to be defined by the range of the data.\nAxes are in the log-scales.\nThere are labels, a title, a legend, and we use the style of The Economist magazine.\n\nWe will now construct the plot, piece by piece."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#ggplot-objects",
    "href": "slides/R/08-ggplot2.html#ggplot-objects",
    "title": "ggplot2",
    "section": "ggplot objects",
    "text": "ggplot objects\n\nStart by defining the dataset:\n\n\nggplot(data = murders)\n\n\nWe can also use the pipe:\n\n\nmurders |&gt; ggplot()\n\n\nWe call also assign the output to a variable\n\n\np &lt;- ggplot(data = murders)\nclass(p)\n\n[1] \"gg\"     \"ggplot\""
  },
  {
    "objectID": "slides/R/08-ggplot2.html#ggplot-objects-1",
    "href": "slides/R/08-ggplot2.html#ggplot-objects-1",
    "title": "ggplot2",
    "section": "ggplot objects",
    "text": "ggplot objects\nTo see the plot we can print it:\n\nprint(p)"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#geometries",
    "href": "slides/R/08-ggplot2.html#geometries",
    "title": "ggplot2",
    "section": "Geometries",
    "text": "Geometries\n\nWe create graphs by adding layers.\nLayers define geometries, compute summary statistics, define what scales to use, or even change styles.\nTo add layers, we use the symbol +.\nIn general, a line of code will look like this:\n\n\nDATA |&gt; ggplot() + LAYER 1 + LAYER 2 + ... + LAYER N\n\n\nUsually, the first added layer defines the geometry."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#geometries-1",
    "href": "slides/R/08-ggplot2.html#geometries-1",
    "title": "ggplot2",
    "section": "Geometries",
    "text": "Geometries\n\nSo if we want to make a scatterplot, what geometry do we use?\nLet’s look at the cheat sheet: https://rstudio.github.io/cheatsheets/data-visualization.pdf"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#aesthetic-mappings",
    "href": "slides/R/08-ggplot2.html#aesthetic-mappings",
    "title": "ggplot2",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\n\nTo make a scatter plot we use geom_points.\nThe help file tells us this is how we use it:\n\n\nmurders |&gt; ggplot() + geom_point(aes(x = population/10^6, y = total))"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#aesthetic-mappings-1",
    "href": "slides/R/08-ggplot2.html#aesthetic-mappings-1",
    "title": "ggplot2",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\n\nSince we defined p earlier, we can add a layer like this:\n\n\np + geom_point(aes(population/10^6, total))\n\n\n\nNote we are no longer using x= and y =."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#layers",
    "href": "slides/R/08-ggplot2.html#layers",
    "title": "ggplot2",
    "section": "Layers",
    "text": "Layers\n\nTo add text we use geom_text:\n\n\np + geom_point(aes(population/10^6, total)) +\n  geom_text(aes(population/10^6, total, label = abb))"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#layers-1",
    "href": "slides/R/08-ggplot2.html#layers-1",
    "title": "ggplot2",
    "section": "Layers",
    "text": "Layers\n\nAs an example of the unique behavior of aes note that this call:\n\n\np_test &lt;- p + geom_text(aes(population/10^6, total, label = abb))\n\nis fine, whereas this call:\n\np_test &lt;- p + geom_text(aes(population/10^6, total), label = abb) \n\nwill give you an error since abb is not found because it is outside of the aes function.\n\nThe layer geom_text does not know where to find abb: it’s a column name and not a global variable."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#tinkering-with-arguments",
    "href": "slides/R/08-ggplot2.html#tinkering-with-arguments",
    "title": "ggplot2",
    "section": "Tinkering with arguments",
    "text": "Tinkering with arguments\n\np + geom_point(aes(population/10^6, total), size = 3) +\n  geom_text(aes(population/10^6, total, label = abb))\n\n\n\nsize can be an aesthetic mapping, but here it is not, so all points get bigger."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#tinkering-with-arguments-1",
    "href": "slides/R/08-ggplot2.html#tinkering-with-arguments-1",
    "title": "ggplot2",
    "section": "Tinkering with arguments",
    "text": "Tinkering with arguments\n\np + geom_point(aes(population/10^6, total), size = 3) +\n  geom_text(aes(population/10^6, total, label = abb), nudge_x = 1.5)\n\n\n\nnudge_x is not an aesthetic mapping."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#global-versus-local-mappings",
    "href": "slides/R/08-ggplot2.html#global-versus-local-mappings",
    "title": "ggplot2",
    "section": "Global versus local mappings",
    "text": "Global versus local mappings\n\nNote that in we can define a global aes in the ggplot function:\n\n\nargs(ggplot)\n\nfunction (data = NULL, mapping = aes(), ..., environment = parent.frame()) \nNULL\n\n\n\nWe refer to this as the global mapping."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#global-versus-local-mappings-1",
    "href": "slides/R/08-ggplot2.html#global-versus-local-mappings-1",
    "title": "ggplot2",
    "section": "Global versus local mappings",
    "text": "Global versus local mappings\n\nAll the layers will assume the global mapping unless we explicitly define another one.\n\n\np &lt;- murders |&gt; ggplot(aes(population/10^6, total, label = abb))\np + geom_point(size = 3) + geom_text(nudge_x = 1.5)\n\n\n\nThe two layers use the global mapping."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#global-versus-local-mappings-2",
    "href": "slides/R/08-ggplot2.html#global-versus-local-mappings-2",
    "title": "ggplot2",
    "section": "Global versus local mappings",
    "text": "Global versus local mappings\n\nWe can override the global aes by defining one in the geometry functions:\n\n\np + geom_point(size = 3) +  \n  geom_text(aes(x = 10, y = 800, label = \"Hello there!\"))"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#scales",
    "href": "slides/R/08-ggplot2.html#scales",
    "title": "ggplot2",
    "section": "Scales",
    "text": "Scales\n\nLayers can define transformations:\n\n\np + geom_point(size = 3) +  \n  geom_text(nudge_x = 0.05) + \n  scale_x_continuous(trans = \"log10\") +\n  scale_y_continuous(trans = \"log10\")"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#scales-1",
    "href": "slides/R/08-ggplot2.html#scales-1",
    "title": "ggplot2",
    "section": "Scales",
    "text": "Scales\n\nThis particular transformation is so common that ggplot2 provides the specialized functions:\n\n\np + geom_point(size = 3) +  \n  geom_text(nudge_x = 0.05) + \n  scale_x_log10() +\n  scale_y_log10()"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#labels-and-titles",
    "href": "slides/R/08-ggplot2.html#labels-and-titles",
    "title": "ggplot2",
    "section": "Labels and titles",
    "text": "Labels and titles\n\nThere are layers for adding labels and titles:\n\n\np + geom_point(size = 3) +  \n  geom_text(nudge_x = 0.05) + \n  scale_x_log10() +\n  scale_y_log10() +\n  xlab(\"Populations in millions (log scale)\") + \n  ylab(\"Total number of murders (log scale)\") +\n  ggtitle(\"US Gun Murders in 2010\")"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#labels-and-titles-1",
    "href": "slides/R/08-ggplot2.html#labels-and-titles-1",
    "title": "ggplot2",
    "section": "Labels and titles",
    "text": "Labels and titles\n\nWe can also use the labs function:\n\n\np + geom_point(size = 3) +  \n  geom_text(nudge_x = 0.05) + \n  scale_x_log10() +\n  scale_y_log10() +\n  labs(x = \"Populations in millions (log scale)\", \n       y = \"Total number of murders (log scale)\", \n       title = \"US Gun Murders in 2010\")\n\n\nThis produces the same graph as in the previous slide."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#almost-there",
    "href": "slides/R/08-ggplot2.html#almost-there",
    "title": "ggplot2",
    "section": "Almost there",
    "text": "Almost there\n\nTargetCurrent draftCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np + geom_point(size = 3) +  \n  geom_text(nudge_x = 0.05) + \n  scale_x_log10() +\n  scale_y_log10() +\n  labs(x = \"Populations in millions (log scale)\", \n       y = \"Total number of murders (log scale)\", \n       title = \"US Gun Murders in 2010\")"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#adding-color",
    "href": "slides/R/08-ggplot2.html#adding-color",
    "title": "ggplot2",
    "section": "Adding color",
    "text": "Adding color\n\nmurders |&gt; ggplot(aes(population/10^6, total, label = abb)) +   \n  geom_text(nudge_x = 0.05) + \n  scale_x_log10() +\n  scale_y_log10() +\n  labs(x = \"Populations in millions (log scale)\", \n       y = \"Total number of murders (log scale)\", \n       title = \"US Gun Murders in 2010\") +\n  geom_point(size = 3, color = \"blue\")"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#a-mapped-color",
    "href": "slides/R/08-ggplot2.html#a-mapped-color",
    "title": "ggplot2",
    "section": "A mapped color",
    "text": "A mapped color\n\nmurders |&gt; ggplot(aes(population/10^6, total, label = abb)) +   \n  geom_text(nudge_x = 0.05) + \n  scale_x_log10() +\n  scale_y_log10() +\n  labs(x = \"Populations in millions (log scale)\", \n       y = \"Total number of murders (log scale)\", \n       title = \"US Gun Murders in 2010\") +\n  geom_point(aes(col = region), size = 3)\n\n\nA legend is added automatically!"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#change-legend-name",
    "href": "slides/R/08-ggplot2.html#change-legend-name",
    "title": "ggplot2",
    "section": "Change legend name",
    "text": "Change legend name\n\nmurders |&gt; ggplot(aes(population/10^6, total, label = abb)) +   \n  geom_text(nudge_x = 0.05) + \n  scale_x_log10() +\n  scale_y_log10() +\n  labs(x = \"Populations in millions (log scale)\", \n       y = \"Total number of murders (log scale)\", \n       title = \"US Gun Murders in 2010\",\n       color = \"Region\") +\n  geom_point(aes(col = region), size = 3)"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#other-adjustments",
    "href": "slides/R/08-ggplot2.html#other-adjustments",
    "title": "ggplot2",
    "section": "Other adjustments",
    "text": "Other adjustments\n\nWe want to add a line with intercept the US rate.\nLets compute that\n\n\nr &lt;- murders |&gt; \n  summarize(rate = sum(total) /  sum(population) * 10^6) |&gt; \n  pull(rate)"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#add-a-line",
    "href": "slides/R/08-ggplot2.html#add-a-line",
    "title": "ggplot2",
    "section": "Add a line",
    "text": "Add a line\n\nmurders |&gt; ggplot(aes(population/10^6, total, label = abb)) +   \n  geom_text(nudge_x = 0.05) + \n  scale_x_log10() +\n  scale_y_log10() +\n  labs(x = \"Populations in millions (log scale)\", \n       y = \"Total number of murders (log scale)\", \n       title = \"US Gun Murders in 2010\",\n       color = \"Region\") +\n  geom_point(aes(col = region), size = 3) +\n  geom_abline(intercept = log10(r), lty = 2, color = \"darkgrey\")"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#we-are-close",
    "href": "slides/R/08-ggplot2.html#we-are-close",
    "title": "ggplot2",
    "section": "We are close!",
    "text": "We are close!"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#other-adjustments-1",
    "href": "slides/R/08-ggplot2.html#other-adjustments-1",
    "title": "ggplot2",
    "section": "Other adjustments",
    "text": "Other adjustments\n\nTo make the final adjustments we will save our current draft in p and add layers.\n\n\np &lt;- murders |&gt; ggplot(aes(population/10^6, total, label = abb)) +   \n  geom_text(nudge_x = 0.05) + \n  scale_x_log10() +\n  scale_y_log10() +\n  labs(x = \"Populations in millions (log scale)\", \n       y = \"Total number of murders (log scale)\", \n       title = \"US Gun Murders in 2010\",\n       color = \"Region\") +\n  geom_point(aes(col = region), size = 3) +\n  geom_abline(intercept = log10(r), lty = 2, color = \"darkgrey\")"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#add-on-packages",
    "href": "slides/R/08-ggplot2.html#add-on-packages",
    "title": "ggplot2",
    "section": "Add-on packages",
    "text": "Add-on packages\n\nThe dslabs package can define the look used in the textbook:\n\n\nds_theme_set()\n\n\nMany other themes are added by the package ggthemes."
  },
  {
    "objectID": "slides/R/08-ggplot2.html#add-on-packages-1",
    "href": "slides/R/08-ggplot2.html#add-on-packages-1",
    "title": "ggplot2",
    "section": "Add-on packages",
    "text": "Add-on packages\nggthemes provides pre-designed themes.\n\nlibrary(ggthemes)\np + theme_economist()"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#add-on-packages-2",
    "href": "slides/R/08-ggplot2.html#add-on-packages-2",
    "title": "ggplot2",
    "section": "Add-on packages",
    "text": "Add-on packages\nHere is the FiveThirtyEight theme:\n\np + theme_fivethirtyeight()"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#add-on-packages-3",
    "href": "slides/R/08-ggplot2.html#add-on-packages-3",
    "title": "ggplot2",
    "section": "Add-on packages",
    "text": "Add-on packages\nIf you want to ruin the plot use the excel theme:\n\np + theme_excel()"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#add-on-packages-4",
    "href": "slides/R/08-ggplot2.html#add-on-packages-4",
    "title": "ggplot2",
    "section": "Add-on packages",
    "text": "Add-on packages\nThemePark provides fun themes:\n\nlibrary(ThemePark)\np + theme_starwars()"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#add-on-packages-5",
    "href": "slides/R/08-ggplot2.html#add-on-packages-5",
    "title": "ggplot2",
    "section": "Add-on packages",
    "text": "Add-on packages\nThis is a fan favorite:\n\np + theme_barbie()"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#add-on-packages-6",
    "href": "slides/R/08-ggplot2.html#add-on-packages-6",
    "title": "ggplot2",
    "section": "Add-on packages",
    "text": "Add-on packages\n\nTo avoid the state abbreviations being on top of each other we can use the ggrepel package.\nWe change the layer geom_text(nudge_x = 0.05) to geom_text_repel()"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#putting-it-all-together",
    "href": "slides/R/08-ggplot2.html#putting-it-all-together",
    "title": "ggplot2",
    "section": "Putting it all together",
    "text": "Putting it all together\n\nCodePlot\n\n\n\nlibrary(ggthemes)\nlibrary(ggrepel)\n\nr &lt;- murders |&gt; \n  summarize(rate = sum(total) /  sum(population) * 10^6) |&gt;\n  pull(rate)\n\nmurders |&gt; ggplot(aes(population/10^6, total, label = abb)) +   \n  geom_abline(intercept = log10(r), lty = 2, color = \"darkgrey\") +\n  geom_point(aes(col = region), size = 3) +\n  geom_text_repel() + \n  scale_x_log10() +\n  scale_y_log10() +\n  labs(x = \"Populations in millions (log scale)\", \n       y = \"Total number of murders (log scale)\", \n       title = \"US Gun Murders in 2010\",\n       color = \"Region\") +\n  theme_economist()"
  },
  {
    "objectID": "slides/R/08-ggplot2.html#grids-of-plots",
    "href": "slides/R/08-ggplot2.html#grids-of-plots",
    "title": "ggplot2",
    "section": "Grids of plots",
    "text": "Grids of plots\n\nWe often want to put plots next to each other.\nThe gridExtra package permits us to do that:\n\n\nCodePlot\n\n\n\nlibrary(gridExtra)\np1 &lt;- murders |&gt; \n  ggplot(aes(log10(population))) + \n  geom_histogram()\np2 &lt;- murders |&gt; \n  gplot(aes(log10(population), log10(total))) + \n  geom_point()\ngrid.arrange(p1, p2, ncol = 2)"
  },
  {
    "objectID": "slides/R/06-vectorization.html#vectorization",
    "href": "slides/R/06-vectorization.html#vectorization",
    "title": "Vectorization",
    "section": "Vectorization",
    "text": "Vectorization\n\nWe will be using the murders dataset in the dslabs package.\nIncludes data on 2010 gun murders for the US 50 states and DC.\nWe will use it to answer questions such as “What is the state with lowest crime rate in the Western part of the US?”"
  },
  {
    "objectID": "slides/R/06-vectorization.html#vectorization-1",
    "href": "slides/R/06-vectorization.html#vectorization-1",
    "title": "Vectorization",
    "section": "Vectorization",
    "text": "Vectorization\n\nFirst, some simple examples of vectorization.\nLet’s convert the following heights in inches to meters:\n\n\nheights &lt;- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)\n\n\nRather than loop we use vectorization:\n\n\nheights*2.54/100\n\n [1] 1.7526 1.5748 1.6764 1.7780 1.7780 1.8542 1.7018 1.8542 1.7018 1.7780"
  },
  {
    "objectID": "slides/R/06-vectorization.html#vectorization-2",
    "href": "slides/R/06-vectorization.html#vectorization-2",
    "title": "Vectorization",
    "section": "Vectorization",
    "text": "Vectorization\n\nWe can subtract a constant from each element of a vector.\nThis is convenient for computing residuals or deviations from an average:\n\n\navg &lt;- mean(heights)\nheights - avg \n\n [1]  0.3 -6.7 -2.7  1.3  1.3  4.3 -1.7  4.3 -1.7  1.3"
  },
  {
    "objectID": "slides/R/06-vectorization.html#vectorization-3",
    "href": "slides/R/06-vectorization.html#vectorization-3",
    "title": "Vectorization",
    "section": "Vectorization",
    "text": "Vectorization\n\nThis means we can compute standard units like this:\n\n\ns &lt;- sd(heights)\n(heights - avg)/s\n\n [1]  0.08995503 -2.00899575 -0.80959530  0.38980515  0.38980515  1.28935548\n [7] -0.50974519  1.28935548 -0.50974519  0.38980515\n\n\n\nThere is actually a function, scale, that does this. We describe it soon."
  },
  {
    "objectID": "slides/R/06-vectorization.html#vectorization-4",
    "href": "slides/R/06-vectorization.html#vectorization-4",
    "title": "Vectorization",
    "section": "Vectorization",
    "text": "Vectorization\n\nIf we operate on two vectors, vectorization is componentwise.\nHere is an example:\n\n\nheights &lt;- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)\nerror &lt;- rnorm(length(heights), 0, 0.1)\nheights + error\n\n [1] 69.02376 62.00053 65.80805 70.04393 69.93804 72.95957 67.05696 72.87048\n [9] 67.02175 69.96904"
  },
  {
    "objectID": "slides/R/06-vectorization.html#exercise",
    "href": "slides/R/06-vectorization.html#exercise",
    "title": "Vectorization",
    "section": "Exercise",
    "text": "Exercise\n\nAdd a column to the murders dataset with the murder rate.\nUse murders per 100,000 persons as the unit."
  },
  {
    "objectID": "slides/R/06-vectorization.html#functions-that-vectorize",
    "href": "slides/R/06-vectorization.html#functions-that-vectorize",
    "title": "Vectorization",
    "section": "Functions that vectorize",
    "text": "Functions that vectorize\n\nMost arithmetic functions work on vectors.\n\n\nx &lt;- 1:10\nsqrt(x)\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n\nlog(x)\n\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851\n\n2^x\n\n [1]    2    4    8   16   32   64  128  256  512 1024"
  },
  {
    "objectID": "slides/R/06-vectorization.html#functions-that-vectorize-1",
    "href": "slides/R/06-vectorization.html#functions-that-vectorize-1",
    "title": "Vectorization",
    "section": "Functions that vectorize",
    "text": "Functions that vectorize\n\nscale(heights)\n\n             [,1]\n [1,]  0.08995503\n [2,] -2.00899575\n [3,] -0.80959530\n [4,]  0.38980515\n [5,]  0.38980515\n [6,]  1.28935548\n [7,] -0.50974519\n [8,]  1.28935548\n [9,] -0.50974519\n[10,]  0.38980515\nattr(,\"scaled:center\")\n[1] 68.7\nattr(,\"scaled:scale\")\n[1] 3.335\n\n\nprovides the same results,\n\n(heights - mean(heights))/sd(heights)\n\n [1]  0.08995503 -2.00899575 -0.80959530  0.38980515  0.38980515  1.28935548\n [7] -0.50974519  1.28935548 -0.50974519  0.38980515"
  },
  {
    "objectID": "slides/R/06-vectorization.html#functions-that-vectorize-2",
    "href": "slides/R/06-vectorization.html#functions-that-vectorize-2",
    "title": "Vectorization",
    "section": "Functions that vectorize",
    "text": "Functions that vectorize\n\nBut scale coerces to a column matrix:\n\n\nclass(scale(heights))\n\n[1] \"matrix\" \"array\""
  },
  {
    "objectID": "slides/R/06-vectorization.html#functions-that-vectorize-3",
    "href": "slides/R/06-vectorization.html#functions-that-vectorize-3",
    "title": "Vectorization",
    "section": "Functions that vectorize",
    "text": "Functions that vectorize\n\nThe conditional function if-else does not vectorize.\nFunctions such as any and all, covert vectors to logicals of lenght one needed for if-else.\nA particularly useful function is a vectorized version ifelse.\nHere is an example:\n\n\na &lt;- c(0, 1, 2, -4, 5)\nifelse(a &gt; 0, 1/a, NA)\n\n[1]  NA 1.0 0.5  NA 0.2"
  },
  {
    "objectID": "slides/R/06-vectorization.html#indexing",
    "href": "slides/R/06-vectorization.html#indexing",
    "title": "Vectorization",
    "section": "Indexing",
    "text": "Indexing\n\nVectorization also works for logical relationships:\n\n\nlibrary(dslabs)\nind &lt;- murders$population &lt; 10^6\n\n\nA convenient aspect of this is that you can subset a vector using this logical vector for indexing:\n\n\nmurders$state[ind]\n\n[1] \"Alaska\"               \"Delaware\"             \"District of Columbia\"\n[4] \"Montana\"              \"North Dakota\"         \"South Dakota\"        \n[7] \"Vermont\"              \"Wyoming\""
  },
  {
    "objectID": "slides/R/06-vectorization.html#indexing-1",
    "href": "slides/R/06-vectorization.html#indexing-1",
    "title": "Vectorization",
    "section": "Indexing",
    "text": "Indexing\n\nYou can also use vectorization to apply logical operators:\n\n\nind &lt;- murders$population &lt; 10^6 & murders$region == \"West\"\nmurders$state[ind]\n\n[1] \"Alaska\"  \"Montana\" \"Wyoming\""
  },
  {
    "objectID": "slides/R/06-vectorization.html#split",
    "href": "slides/R/06-vectorization.html#split",
    "title": "Vectorization",
    "section": "split",
    "text": "split\n\nsplit is a useful function to get indexes using a factor:\n\n\ninds &lt;- with(murders, split(seq_along(region), region))\nmurders$state[inds$West]\n\n [1] \"Alaska\"     \"Arizona\"    \"California\" \"Colorado\"   \"Hawaii\"    \n [6] \"Idaho\"      \"Montana\"    \"Nevada\"     \"New Mexico\" \"Oregon\"    \n[11] \"Utah\"       \"Washington\" \"Wyoming\""
  },
  {
    "objectID": "slides/R/06-vectorization.html#functions-for-subsetting",
    "href": "slides/R/06-vectorization.html#functions-for-subsetting",
    "title": "Vectorization",
    "section": "Functions for subsetting",
    "text": "Functions for subsetting\n\nThe functions which, match and the operator %in% are useful for sub-setting\nTo understand how they work it’s best to use examples."
  },
  {
    "objectID": "slides/R/06-vectorization.html#which",
    "href": "slides/R/06-vectorization.html#which",
    "title": "Vectorization",
    "section": "which",
    "text": "which\n\nind &lt;- which(murders$state == \"California\")\nind\n\n[1] 5\n\nmurders[ind,]\n\n       state abb region population total\n5 California  CA   West   37253956  1257"
  },
  {
    "objectID": "slides/R/06-vectorization.html#match",
    "href": "slides/R/06-vectorization.html#match",
    "title": "Vectorization",
    "section": "match",
    "text": "match\n\nind &lt;- match(c(\"New York\", \"Florida\", \"Texas\"), murders$state)\nind\n\n[1] 33 10 44\n\nmurders[ind,]\n\n      state abb    region population total\n33 New York  NY Northeast   19378102   517\n10  Florida  FL     South   19687653   669\n44    Texas  TX     South   25145561   805"
  },
  {
    "objectID": "slides/R/06-vectorization.html#in",
    "href": "slides/R/06-vectorization.html#in",
    "title": "Vectorization",
    "section": "%in%",
    "text": "%in%\n\nind &lt;- which(murders$state %in% c(\"New York\", \"Florida\", \"Texas\"))\nind\n\n[1] 10 33 44\n\nmurders[ind,]\n\n      state abb    region population total\n10  Florida  FL     South   19687653   669\n33 New York  NY Northeast   19378102   517\n44    Texas  TX     South   25145561   805\n\n\n\nNote this is similar to using match.\nBut note the order is different."
  },
  {
    "objectID": "slides/R/06-vectorization.html#match-versus-in",
    "href": "slides/R/06-vectorization.html#match-versus-in",
    "title": "Vectorization",
    "section": "match versus %in%",
    "text": "match versus %in%\n\nc(\"Boston\", \"Dakota\", \"Washington\") %in% murders$state\n\n[1] FALSE FALSE  TRUE\n\n\n\nmatch(c(\"Boston\", \"Dakota\", \"Washington\"), murders$state)\n\n[1] NA NA 48\n\n\n\nmatch(murders$state, c(\"Boston\", \"Dakota\", \"Washington\"))\n\n [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA\n[26] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA  3 NA NA\n[51] NA"
  },
  {
    "objectID": "slides/R/06-vectorization.html#the-apply-functions",
    "href": "slides/R/06-vectorization.html#the-apply-functions",
    "title": "Vectorization",
    "section": "The apply functions",
    "text": "The apply functions\n\nThe apply functions let use the concept of vectorization with functions that don’t vectorize.\nHere is an example of a function that won’t vectorize in a convenient way:\n\n\ns &lt;- function(n){\n   return(sum(1:n))\n}\n\n\nTry it on a vector:\n\n\nns &lt;- c(25, 100, 1000)\ns(ns)\n\n[1] 325"
  },
  {
    "objectID": "slides/R/06-vectorization.html#the-apply-functions-1",
    "href": "slides/R/06-vectorization.html#the-apply-functions-1",
    "title": "Vectorization",
    "section": "The apply functions",
    "text": "The apply functions\n\nWe can use sapply, one of the apply functions:\n\n\nsapply(ns, s)\n\n[1]    325   5050 500500\n\n\n\nsapply will work on any vector, including lists."
  },
  {
    "objectID": "slides/R/06-vectorization.html#the-apply-functions-2",
    "href": "slides/R/06-vectorization.html#the-apply-functions-2",
    "title": "Vectorization",
    "section": "The apply functions",
    "text": "The apply functions\n\nThere are other apply functions:\n\nlapply - returns a list. Convenient when the function returns something other than a number.\ntapply - can apply to subsets defined by second variable.\nmapply - multivariate version of sapply.\napply - applies function to rows or columns o matrix.\n\nWe will learn some of these as we go."
  },
  {
    "objectID": "slides/00-intro.html#general-information",
    "href": "slides/00-intro.html#general-information",
    "title": "Introduction",
    "section": "General Information",
    "text": "General Information\n\nBST 260 Introduction to Data Science\nInstructor: Rafael A. Irizarry\nTFs: Corri Sept, Nikhil Vytla, Yuan Wang\nMondays we have lectures, Wednesday we have labs.\nWe work on problem sets together, in lab."
  },
  {
    "objectID": "slides/00-intro.html#course-description",
    "href": "slides/00-intro.html#course-description",
    "title": "Introduction",
    "section": "Course Description",
    "text": "Course Description\nLecture notes: https://datasciencelabs.github.io/2024/\n\nPlease read the syllabus!"
  },
  {
    "objectID": "slides/00-intro.html#important-details",
    "href": "slides/00-intro.html#important-details",
    "title": "Introduction",
    "section": "Important details",
    "text": "Important details\n\nComplete readings before class.\nMidterms are in person. There are no makeups.\nMake sure you read messages sent via Canvas\nYou can select your own final project, but need approval.\nYou should start final project by October 23.\nHelp us pick office hours: https://forms.gle/GiQXqDTaeYVxaXd78"
  },
  {
    "objectID": "slides/00-intro.html#whats-coming",
    "href": "slides/00-intro.html#whats-coming",
    "title": "Introduction",
    "section": "What’s coming",
    "text": "What’s coming\n\nUNIX/Linux shell.\nReproducible document preparation\nVersion control with git and GitHub\nR programming\nData wrangling with dplyr and data.table\nData visualization with ggplot2\nProbability theory, inference and modeling\nHigh-dimensional data techniques\nMachine learning"
  },
  {
    "objectID": "slides/00-intro.html#lets-get-started",
    "href": "slides/00-intro.html#lets-get-started",
    "title": "Introduction",
    "section": "Let’s get started",
    "text": "Let’s get started\n\nInstall R.\nInstall RStudio.\nMake sure you have access to a terminal."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BST 260 Introduction to Data Science",
    "section": "",
    "text": "Instructor: Rafael A.Irizarry\nTeaching fellows: Corri Sept, Nikhil Vytla, and Yuan Wang\nLocation: Kresge 202A and 202B, Harvard School of Public Health\nDate and time: Mon & Wed 9.45 - 11:15am\nTextbooks: https://github.com/rafalab/dsbook-part-1, https://github.com/rafalab/dsbook-part-2\nSlack: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922/pages/Course%20Information\nGitHub repo: https://github.com/datasciencelabs/2024\nRemember to read the syllabus, listen to SD.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#course-information",
    "href": "index.html#course-information",
    "title": "BST 260 Introduction to Data Science",
    "section": "",
    "text": "Instructor: Rafael A.Irizarry\nTeaching fellows: Corri Sept, Nikhil Vytla, and Yuan Wang\nLocation: Kresge 202A and 202B, Harvard School of Public Health\nDate and time: Mon & Wed 9.45 - 11:15am\nTextbooks: https://github.com/rafalab/dsbook-part-1, https://github.com/rafalab/dsbook-part-2\nSlack: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922/pages/Course%20Information\nGitHub repo: https://github.com/datasciencelabs/2024\nRemember to read the syllabus, listen to SD.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#lectures",
    "href": "index.html#lectures",
    "title": "BST 260 Introduction to Data Science",
    "section": "Lectures",
    "text": "Lectures\nLecture slides, class notes, and problem sets are linked below. New material is added approximately on a weekly basis.\n\n\n\nDates\nTopic\nSlides\nReading\n\n\n\n\nSep 04\nProductivity Tools\nIntro, Unix\nInstalling R and RStudio on Windows or Mac, Getting Started, Unix\n\n\nSep 09, Sep 11\nProductivity Tools\nRStudio, Quarto, Git and GitHub\nRStudio Projects, Quarto, Git\n\n\nSep 16, Sep 19\nR\nR basics, Vectorization\nR Basics, Vectorization\n\n\nSep 23\nR\nTidyverse, ggplot2\ndplyr, ggplot2\n\n\nSep 25\nWrangling\n\nImporting data, dates and times, Locales, Reshaping Data, Joining Tables, Extracting data from the web\n\n\nSep 30, Oct 02\nData visualization\n\nDistributions, Dataviz Principles\n\n\nOct 07, Oct 09\nProbability\n\nMonte Carlo, Random Variables & CLT\n\n\nOct 16\nMidterm 1\n\nCovers material from Sep 04-Oct 11\n\n\nOct 21, Oct 23\nInference\n\nParameters & Estimates, Confidence Intervals\n\n\nOct 28, Oct 30\nStatistical Models\n\nData-driven Models, Bayesian Statistics, Hierarchical Models\n\n\nNov 04, Nov 06\nLinear models\n\nRegression, Multivariate Regression\n\n\nNov 13\nLinear models\n\nMeasurement Error Models, Treatment Effect Models, Association Tests, Association Not Causation\n\n\nNov 18, Nov 20\nHigh dimensional data\n\nMatrices in R, Applied Linear Algebra, Dimension Reduction\n\n\nNov 25\nMidterm 2\n\nMidterm 2: cover material from Sep 04-Nov 22\n\n\nDec 02, Dec 04\nMachine Learning\n\nNotation and terminology, Evaluation Metrics, conditional probabilities, smoothing\n\n\nDec 09, Dec 11\nMachine Learning\n\nResampling methods, ML algorithms, ML in practice\n\n\nDec 16, Dec 18\nOther topics",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#problem-sets",
    "href": "index.html#problem-sets",
    "title": "BST 260 Introduction to Data Science",
    "section": "Problem sets",
    "text": "Problem sets\n\n\n\nProblem set\nTopic\nDue Date\nDifficulty\n\n\n\n\n01\nUnix, Quarto\nSep 11\neasy\n\n\n02\nR\nSep 19\neasy\n\n\n03\nTidyverse\nSep 27\nmedium\n\n\n04\nWrangling\nOct 4\nmedium\n\n\n05\nCovid 19 data visualization\nOct 11\nmedium\n\n\n06\nProbability\nOct 25\neasy\n\n\n07\nPredict the election\nNov 04\nhard\n\n\n08\nConfidence intervals for excess mortality\nNov 15\nhard\n\n\n09\nMatrices\nNov 22\neasy\n\n\n10\nDigit reading\nDec 13\nhard\n\n\nFinal Project\nYour choice\nDec 20\nhard",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#office-hour-times",
    "href": "index.html#office-hour-times",
    "title": "BST 260 Introduction to Data Science",
    "section": "Office hour times",
    "text": "Office hour times\n\n\n\nMeeting\nTime\nLocation\n\n\n\n\nRafael Irizarry\nMon 8:45-9:45AM\nKresge 203\n\n\nCorri Sept\nTue\n3:00-4:00PM\n\n\nNikhil Vytla\nWed\n2:00-3:00PM\n\n\nYuan Wang\nFri\n1:00-2:00PM",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "BST 260 Introduction to Data Science",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nWe thank Maria Tackett and Mine Çetinkaya-Rundel for sharing their web page template, which we used in creating this website.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "psets/pset-02-r-vectorization.html",
    "href": "psets/pset-02-r-vectorization.html",
    "title": "Problem set 2",
    "section": "",
    "text": "For these exercises, do not load any packages other than dslabs.\nMake sure to use vectorization whenever possible.\n\nWhat is the sum of the first 100 positive integers? Use the functions seq and sum to compute the sum with R for any n.\n\n\n# Your code here\n\n\nLoad the US murders dataset from the dslabs package. Use the function str to examine the structure of the murders object. What are the column names used by the data frame for these five variables? Show the subset of murders showing states with less than 1 per 100,000 deaths. Show all variables.\n\n\nlibrary(dslabs)\nstr(murders)\n\n'data.frame':   51 obs. of  5 variables:\n $ state     : chr  \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...\n $ abb       : chr  \"AL\" \"AK\" \"AZ\" \"AR\" ...\n $ region    : Factor w/ 4 levels \"Northeast\",\"South\",..: 2 4 4 2 4 4 1 2 2 2 ...\n $ population: num  4779736 710231 6392017 2915918 37253956 ...\n $ total     : num  135 19 232 93 1257 ...\n\n\n\n# Your code here\n\n\nShow the subset of murders showing states with less than 1 per 100,000 deaths and in the West of the US. Don’t show the region variable.\n\n\n# Your code here\n\n\nShow the largest state with a rate less than 1 per 100,000.\n\n\n# Your code here\n\n\nShow the state with a population of more than 10 million with the lowest rate.\n\n\n# Your code here\n\n\nCompute the rate for each region of the US.\n\n\n# Your code here\n\n\nCreate a vector of numbers that starts at 6, does not pass 55, and adds numbers in increments of 4/7: 6, 6 + 4/7, 6 + 8/7, and so on. How many numbers does the list have? Hint: use seq and length.\n\n\n# Your code here\n\n\nMake this data frame:\n\n\ntemp &lt;- c(35, 88, 42, 84, 81, 30)\ncity &lt;- c(\"Beijing\", \"Lagos\", \"Paris\", \"Rio de Janeiro\", \n          \"San Juan\", \"Toronto\")\ncity_temps &lt;- data.frame(name = city, temperature = temp)\n\nConvert the temperatures to Celsius.\n\n# Your code here\n\n\nWrite a function euler that compute the following sum for any \\(n\\):\n\n\\[\nS_n = 1+1/2^2 + 1/3^2 + \\dots 1/n^2\n\\]\n\n# Your code here\n\n\nShow that as \\(n\\) gets bigger we get closer \\(\\pi^2/6\\) by plotting \\(S_n\\) versus \\(n\\) with a horizontal dashed line at \\(\\pi^2/6\\).\n\n\n# Your code here\n\n\nUse the %in% operator and the predefined object state.abb to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU?\n\n\n# Your code here\n\n\nExtend the code you used in the previous exercise to report the one entry that is not an actual abbreviation. Hint: use the ! operator, which turns FALSE into TRUE and vice versa, then which to obtain an index.\n\n\n# Your code here\n\n\nIn the murders dataset, use %in% to show all variables for New York, California, and Texas, in that order.\n\n\n# Your code here\n\n\nWrite a function called vandermonde_helper that for any \\(x\\) and \\(n\\), returns the vector \\((1, x, x^2, x^3, \\dots, x^n)\\). Show the results for \\(x=3\\) and \\(n=5\\).\n\n\n# Your code here\n\n\nCreate a vector using:\n\n\nn &lt;- 10000\np &lt;- 0.5\nset.seed(2024-9-6)\nx &lt;- sample(c(0,1), n, prob = c(1 - p, p), replace = TRUE)\n\nCompute the length of each stretch of 1s and then plot the distribution of these values. Check to see if the distribution follows a geometric distribution as the theory predicts. Do not use a loop!\n\n# Your code here"
  },
  {
    "objectID": "psets/pset-01-unix-quarto.html",
    "href": "psets/pset-01-unix-quarto.html",
    "title": "Problem set 1",
    "section": "",
    "text": "After finishing the homework, you are to turn in all the code to GitHub using git.\n\nStart an RStudio project. Pick a good name following a naming convention. Start a Quarto document called beginning.qmd.\nCreate a directory called img and save a screen shot of your RStudio session for the project. Include your screenshot in the Quarto document.\nNext, in your Quarto document, define variables \\(a=1, b=-1, c=-2\\) and print out the solutions to \\(f(x) = ax^2+bx+c=0\\). Do not report complex solutions, only real numbers.\nInclude a graph of \\(f(x)\\) versus \\(x\\) for \\(x \\in (-5,5)\\).\n\n\nx &lt;- seq(-5, 5, length = 100)\n# Hint: Use the plot function\n\n\nCreate a directory called docs. Use the command quarto render to create a PDF and save it to the docs directory. Show us the command you typed:\n\n# Your code here\n\nUse Unix to create a directory called data in the project home directory. Include the Unix command you used to create the directory.\n\n# Your code here\n\nUse a terminal-based text editor to create a file coefs.txt in the data directory and save three coefficients, 1 -1 -2 for example. Show us the Unix commands you used to achieve this:\n\n# Your code here\n\nMake a directory called code. Use Unix to copy the file beginning.qmd to a file called quadratic.qmd in the code directory. Show us the Unix commands you used.\n\n# Your code here\n\nEdit the quadratic.qmd file to read in a, b, and c from the file coefs.txt. Make sure to use a relative path when reading the file. As before, print out the solutions to \\(f(x) = ax^2+bx+c=0\\). Do not report complex solutions, only real numbers.\nChange the path of the file you are reading to the full path you get when you type file.path(getwd(), \"data/coefs.txt\"). Confirm that the file still renders. Then move the entire pset-01-rmarkdown project to a directory called RtmpyDknq4. Does the file render? Change the path back to a relative path and see if it renders."
  },
  {
    "objectID": "psets/pset-03-tidyverse.html",
    "href": "psets/pset-03-tidyverse.html",
    "title": "Problem set 3",
    "section": "",
    "text": "In these exercises, we will explore a subset of the NHANES dataset to investigate potential differences in systolic blood pressure across groups defined by self reported race.\n\nInstructions\n\nFor each exercise, we want you to write a single line of code using the pipe (|&gt;) to chain together multiple operations. This doesn’t mean the code must fit within 80 characters or be written on a single physical line, but rather that the entire sequence of operations can be executed as one continuous line of code without needing to assign intermediate values or create new variables.\nFor example, these are three separate lines of code:\n\n\nx &lt;- 100; x &lt;- sqrt(x); log10(x)\n\nWhereas this is considered one line of code using the pipe:\n\n100 |&gt; \n  sqrt() |&gt; \n  log10()\n\n\nGenerate an html document that shows the code for each exercise.\nFor the exercises that ask to generate a graph, show the graph as well.\nFor exercises that require you to display tabular results, use the kable function to format the output as a clean, readable table. Do not display the raw dataframe directly—only show the nicely formatted table using kable.\nUse only two significant digits for the numbers displayed in the tables.\nSubmit both the html and the qmd files using Git.\nYou will need the following libraries:\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(forcats)\nlibrary(ggplot2)\nlibrary(knitr)\nlibrary(NHANES)\noptions(digits = 2)\n\n\nThe .qmd file must be able to render properly on the TFs’ computers. They will already have the necessary packages installed, so there is no need to include code for installing packages. Just focus on writing the code that uses these packages.\n\n\n\nExercises\n\nFilter the NHANES data to only include survey year 2011-2012. Save the resulting table in dat. This table should have 5,000 rows and 76 columns.\n\n\n## code here\n\n\nCompute the average and standard deviation (SD) for the combined systolic blood pressure (SBP) reading for males and females separately. Show us a data frame with two rows (female and male) and two columns (average and SD).\n\n\n## code here\n\n\nBecause of the large difference in the average between males and females, we will perform the rest of the analysis separately for males and females.\n\nCompute the average and SD for SBP for each race variable in column Race3 for females and males separately. The resulting table should have four columns for sex, race, average, and SD, respectively, and 12 rows (one for each strata). Arrange the result from highest to lowest average.\n\n## code here\n\n\nRepeat the previous exercise but add two columns to the final table to show a 95% confidence interval. Specifically, add columns with the lower and upper bounds of the interval with names lower and upper, respectively. The formula for these values is\n\n\\[\n\\bar{X} \\pm 1.96 \\, s / \\sqrt{n}\n\\] with \\(\\bar{X}\\) the sample average and \\(s\\) the sample standard deviation. This table will simply add two more columns to the table generated in the previous exercise: one column for the lower and upper bound, respectively.\n\n## code here\n\n\nMake a graph of showing the results from the previous exercise. Specifically, plot the averages for each group as points and confidence intervals as error bars (use the geometry geom_errorbar). Order the groups from lowest to highest average (the average of the males and females averages). Use facet_wrap to make a separate plot for females and males. Label your axes with Race and Average respectively, add the title Comparing systolic blood pressure across groups, and the caption Bars represent 95% confidence intervals.\n\n\n## code here\n\n\nIn the plot above we see that the confidence intervals don’t overlap when comparing the White and Mexican groups. We also see a substantial difference between Mexican and Hispnanic. Before concluding that there is a difference between groups, we will explore if differences in age, a very common confounder, explain the differences.\n\nCreate table like the one in the previous exercise but show the average SBP by sex and age group (AgeDecade). The the groups are order chronologically. As before make a separate plot for males and females. Make sure to filter our observations with no AgeDecade listed.\n\n## code here\n\n\nWe note that for both males and females the SBP increases with age. To explore if age is indeed a confounder we need to check if the groups have different age distributions.\n\nExplore the age distributions of each Race3 group to determine if the groups are comparable. Make a histogram of Age for each Race3 group and stack them vertically. Generate two columns of graphs for males and females, respectively. In the histograms, create bins increments of 5 years up to 80.\nBelow the graph, comment on what notice about the age distributions and how this can explain the difference between the White and Mexican groups.\n\n## code here\n\n\nSummarize the results shown in the graph by compute the median age for each Race3 group and the percent of individuals that are younger than 18. Order the rows by median age. The resulting data frame should have 6 rows (one for each group) and three columns to denote group, median age, and children respectively.\n\n\n## code here\n\nGiven these results provide an explanation for the difference in systolic pressure is lower when comparing the White and Mexican groups.\n\nWhen the age distribution between two populations we can’t conclude that there are differences in SBP based just on the population averages. The observed differences are likely due to age differences rather than genetic differences. We will therefore stratify by group and then compare SBP. But before we do this, we might need redefine dat to avoid small groups.\n\nWrite a function that computes the number of observations in each gender, age group and race combination. Show the groups with less than five observations. Make sure to remove the rows with no BPSysAve measurments before calculating the number of observations. Show a table with four columns representing gender, age strate, group, and the number of individuals in that group. Make sure to include combinations with 0 individuals (hint: use complete).\n\n## code here\n\n\nBased on the observations made in the previous exercise, we will redefine dat but with the following:\n\nAs before, include only survey year 2011-2012.\nRemove the observations with no age group reported.\nRemove the 0-9 age group.\nCombine the 60-69 and 70+ ageroups into a 60+ group.\nRemove observations reporting Other in Race3.\nRename the variable Race3 to Race.\n\nHints:\n\nNote that the levels in AgeDecade start with a space.\nYou can use the fct_collapse function in the forcats to combine factors.\n\n\n\n## code here\n\n\nCrete a plot that shows the averege BPS for each age decade. Show the different race groups with color and lines joining them. Generate a two plots, one for males and one for females.\n\n\n## code here\n\n\nBased on the plot above pick two groups that you think are consistently different and remake the plot from the previous exercise but just for these two groups, add confidence intervals, and remove the lines. Put the confidence intervals for each age strata next to each other and use color to represent the two groups. Comment on your finding.\n\n\n## code here\n\n\nFor the two groups that you selected above compute the difference in average BPS between the two groups for each age strata. Show a table with three columns representing age strata, difference for females, difference for males.\n\n\n## code here"
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "Topic\n\n\nTitle\n\n\nDate\n\n\n\n\n\n\nFirst day\n\n\nIntroduction\n\n\nWed, Sep 04\n\n\n\n\nProductivity Tools\n\n\nUnix\n\n\nWed, Sep 04\n\n\n\n\nProductivity Tools\n\n\nRStudio\n\n\nWed, Sep 04\n\n\n\n\nProductivity Tools\n\n\nQuarto\n\n\nMon, Sep 09\n\n\n\n\nProductivity Tools\n\n\nGit and GitHub\n\n\nMon, Sep 09\n\n\n\n\nR\n\n\nR Basics\n\n\nMon, Sep 16\n\n\n\n\nR\n\n\nVectorization\n\n\nWed, Sep 18\n\n\n\n\nR\n\n\nTidyverse\n\n\nMon, Sep 23\n\n\n\n\nR\n\n\nggplot2\n\n\nWed, Sep 25\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Slides"
    ]
  },
  {
    "objectID": "psets.html",
    "href": "psets.html",
    "title": "Problem Sets",
    "section": "",
    "text": "Topic\n\n\nDue date (at 11:59 PM)\n\n\n\n\n\n\nProblem set 1\n\n\nWed, Sep 11\n\n\n\n\nProblem set 2\n\n\nThu, Sep 19\n\n\n\n\nProblem set 3\n\n\nFri, Sep 27\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Problem Sets"
    ]
  },
  {
    "objectID": "slides/R/05-r-basics.html#packages",
    "href": "slides/R/05-r-basics.html#packages",
    "title": "R Basics",
    "section": "Packages",
    "text": "Packages\n\nUse install.packages to install the dslabs package.\nTryout the following functions: sessionInfo, installed.packages"
  },
  {
    "objectID": "slides/R/05-r-basics.html#prebuilt-functions",
    "href": "slides/R/05-r-basics.html#prebuilt-functions",
    "title": "R Basics",
    "section": "Prebuilt functions",
    "text": "Prebuilt functions\n\nMuch of what we do in R is based on prebuilt functions.\nMany are included in automatically loaded packages: stats, graphics, grDevices, utils, datasets, methods.\nThis subset of the R universe is refereed to as R base.\nVery popular packages not included in R base: ggplot2, dplyr, tidyr, and data.table."
  },
  {
    "objectID": "slides/R/05-r-basics.html#prebuilt-functions-1",
    "href": "slides/R/05-r-basics.html#prebuilt-functions-1",
    "title": "R Basics",
    "section": "Prebuilt functions",
    "text": "Prebuilt functions\n\nExample of prebuilt functions that we will use today: ls, rm, library, search, factor, list, exists, str, typeof, and class.\nYou can see the raw code for a function by typing it without the parenthesis: type ls on your console to see an example."
  },
  {
    "objectID": "slides/R/05-r-basics.html#help-system",
    "href": "slides/R/05-r-basics.html#help-system",
    "title": "R Basics",
    "section": "Help system",
    "text": "Help system\n\nIn R you can use ? or help to learn more about functions.\nYou can learn about function using\n\nhelp(\"ls\")\nor\n?ls"
  },
  {
    "objectID": "slides/R/05-r-basics.html#the-workspace",
    "href": "slides/R/05-r-basics.html#the-workspace",
    "title": "R Basics",
    "section": "The workspace",
    "text": "The workspace\n\nDefine a variable.\n\n\na &lt;- 2\n\n\nUse ls to see if it’s there. Also take a look at the Environment tab in RStudio.\n\n\nls()\n\n[1] \"a\"\n\n\n\nUse rm to remove the variable you defined.\n\n\nrm(a)"
  },
  {
    "objectID": "slides/R/05-r-basics.html#variable-name-convention",
    "href": "slides/R/05-r-basics.html#variable-name-convention",
    "title": "R Basics",
    "section": "Variable name convention",
    "text": "Variable name convention\n\nA nice convention to follow is to use meaningful words that describe what is stored, use only lower case, and use underscores as a substitute for spaces.\nFor more we recommend this guide."
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-types",
    "href": "slides/R/05-r-basics.html#data-types",
    "title": "R Basics",
    "section": "Data types",
    "text": "Data types\nThe main data types in R are:\n\nOne dimensional vectors: numeric, integer, logical, complex, characters.\nFactors\nLists: this includes data frames.\nArrays: Matrices are the most widely used.\nDate and time\ntibble\nS4 objects"
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-types-1",
    "href": "slides/R/05-r-basics.html#data-types-1",
    "title": "R Basics",
    "section": "Data types",
    "text": "Data types\n\nMany errors in R come from confusing data types.\nstr stands for structure, gives us information about an object.\ntypeof gives you the basic data type of the object. It reveals the lower-level, more fundamental type of an object in R’s memory.\nclass This function returns the class attribute of an object. The class of an object is essentially type_of at a higher, often user-facing level."
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-types-2",
    "href": "slides/R/05-r-basics.html#data-types-2",
    "title": "R Basics",
    "section": "Data types",
    "text": "Data types\nLet’s see some example:\n\nlibrary(dslabs)\ntypeof(murders)\n\n[1] \"list\"\n\nclass(murders)\n\n[1] \"data.frame\"\n\nstr(murders)\n\n'data.frame':   51 obs. of  5 variables:\n $ state     : chr  \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...\n $ abb       : chr  \"AL\" \"AK\" \"AZ\" \"AR\" ...\n $ region    : Factor w/ 4 levels \"Northeast\",\"South\",..: 2 4 4 2 4 4 1 2 2 2 ...\n $ population: num  4779736 710231 6392017 2915918 37253956 ...\n $ total     : num  135 19 232 93 1257 ..."
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-frames",
    "href": "slides/R/05-r-basics.html#data-frames",
    "title": "R Basics",
    "section": "Data frames",
    "text": "Data frames\n\nDate frames are the most common class used in data analysis. It is like a spreadsheet.\nUsually, rows represents observations and columns variables.\nEach variable can be a different data type.\nYou can see part of the content like this\n\n\nhead(murders)\n\n       state abb region population total\n1    Alabama  AL  South    4779736   135\n2     Alaska  AK   West     710231    19\n3    Arizona  AZ   West    6392017   232\n4   Arkansas  AR  South    2915918    93\n5 California  CA   West   37253956  1257\n6   Colorado  CO   West    5029196    65"
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-frames-1",
    "href": "slides/R/05-r-basics.html#data-frames-1",
    "title": "R Basics",
    "section": "Data frames",
    "text": "Data frames\n\nand all of the content like this:\n\n\nView(murders)\n\n\nType the above in RStudio."
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-frames-2",
    "href": "slides/R/05-r-basics.html#data-frames-2",
    "title": "R Basics",
    "section": "Data frames",
    "text": "Data frames\n\nA very common operation is adding columns like this:\n\n\nmurders$pop_rank &lt;- rank(murders$population)\nhead(murders)\n\n       state abb region population total pop_rank\n1    Alabama  AL  South    4779736   135       29\n2     Alaska  AK   West     710231    19        5\n3    Arizona  AZ   West    6392017   232       36\n4   Arkansas  AR  South    2915918    93       20\n5 California  CA   West   37253956  1257       51\n6   Colorado  CO   West    5029196    65       30"
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-frames-3",
    "href": "slides/R/05-r-basics.html#data-frames-3",
    "title": "R Basics",
    "section": "Data frames",
    "text": "Data frames\n\nNote that we used $.\nThis is called the accessor because it lets us access columns.\n\n\nmurders$population\n\n [1]  4779736   710231  6392017  2915918 37253956  5029196  3574097   897934\n [9]   601723 19687653  9920000  1360301  1567582 12830632  6483802  3046355\n[17]  2853118  4339367  4533372  1328361  5773552  6547629  9883640  5303925\n[25]  2967297  5988927   989415  1826341  2700551  1316470  8791894  2059179\n[33] 19378102  9535483   672591 11536504  3751351  3831074 12702379  1052567\n[41]  4625364   814180  6346105 25145561  2763885   625741  8001024  6724540\n[49]  1852994  5686986   563626\n\n\n\nMore generally: used to access components of a list."
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-frames-4",
    "href": "slides/R/05-r-basics.html#data-frames-4",
    "title": "R Basics",
    "section": "Data frames",
    "text": "Data frames\n\nOne way R confuses beginners is by having multiple ways of doing the same thing.\nFor example you can access the 4th column in the following five different ways:\n\n\nmurders$population\nmurders[, \"population\"]\nmurders[[\"population\"]]\nmurders[, 4]\nmurders[[4]]\n\n\nIn general, we recommend using the name rather than the number as it is less likely to change."
  },
  {
    "objectID": "slides/R/05-r-basics.html#with",
    "href": "slides/R/05-r-basics.html#with",
    "title": "R Basics",
    "section": "with",
    "text": "with\n\nwith let’s us use the column names as objects.\nThis is convenient to avoid typing the data frame name over and over:\n\n\nrate &lt;- with(murders, total/population)"
  },
  {
    "objectID": "slides/R/05-r-basics.html#with-1",
    "href": "slides/R/05-r-basics.html#with-1",
    "title": "R Basics",
    "section": "with",
    "text": "with\n\nNote you can write entire code chunks by enclosing it in curly brackets:\n\n\nwith(murders, {\n   rate &lt;- total/population\n   rate &lt;- round(rate*10^5)\n   print(rate[1:5])\n})\n\n[1] 3 3 4 3 3"
  },
  {
    "objectID": "slides/R/05-r-basics.html#vectors",
    "href": "slides/R/05-r-basics.html#vectors",
    "title": "R Basics",
    "section": "Vectors",
    "text": "Vectors\n\nThe columns of data frames are an example of one dimensional (atomic) vectors.\n\n\nlength(murders$population)\n\n[1] 51"
  },
  {
    "objectID": "slides/R/05-r-basics.html#vectors-1",
    "href": "slides/R/05-r-basics.html#vectors-1",
    "title": "R Basics",
    "section": "Vectors",
    "text": "Vectors\n\nOften we have to create vectors.\nThe concatenate function c is the most basic way used to create vectors:\n\n\nx &lt;- c(\"b\", \"s\", \"t\", \" \", \"2\", \"6\", \"0\")"
  },
  {
    "objectID": "slides/R/05-r-basics.html#sequences",
    "href": "slides/R/05-r-basics.html#sequences",
    "title": "R Basics",
    "section": "Sequences",
    "text": "Sequences\n\nSequences are a the common example of vectors we generate.\n\n\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(1, 9, 2)\n\n[1] 1 3 5 7 9\n\n\n\nWhen increasing by 1 you can use :\n\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "slides/R/05-r-basics.html#sequences-1",
    "href": "slides/R/05-r-basics.html#sequences-1",
    "title": "R Basics",
    "section": "Sequences",
    "text": "Sequences\n\nA useful function to quickly generate the sequence 1:length(x) is seq_along:\n\n\nx &lt;- c(\"b\", \"s\", \"t\", \" \", \"2\", \"6\", \"0\")\nseq_along(x)\n\n[1] 1 2 3 4 5 6 7\n\n\n\nA reason to use this is to loop through entries:\n\n\nfor (i in seq_along(x)) {\n  cat(toupper(x[i]))\n}\n\nBST 260"
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors",
    "href": "slides/R/05-r-basics.html#factors",
    "title": "R Basics",
    "section": "Factors",
    "text": "Factors\n\nOne key distinction between data types you need to understad is the difference between factors and characters.\nThe murder dataset has examples of both.\n\n\nclass(murders$state)\n\n[1] \"character\"\n\nclass(murders$region)\n\n[1] \"factor\"\n\n\n\nWhy do you think this is?"
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors-1",
    "href": "slides/R/05-r-basics.html#factors-1",
    "title": "R Basics",
    "section": "Factors",
    "text": "Factors\n\nFactors store levels and the label of each level.\nThis is useful for categorical data.\n\n\nx &lt;- murders$region\nlevels(x)\n\n[1] \"Northeast\"     \"South\"         \"North Central\" \"West\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#categories-based-on-strata",
    "href": "slides/R/05-r-basics.html#categories-based-on-strata",
    "title": "R Basics",
    "section": "Categories based on strata",
    "text": "Categories based on strata\n\nIn data analysis we often have to stratify continuous variables into categories.\nThe function cut helps us do this:\n\n\nage &lt;- c(5, 93, 18, 102, 14, 22, 45, 65, 67, 25, 30, 16, 21)\ncut(age, c(0, 11, 27, 43, 59, 78, 96, Inf))\n\n [1] (0,11]   (78,96]  (11,27]  (96,Inf] (11,27]  (11,27]  (43,59]  (59,78] \n [9] (59,78]  (11,27]  (27,43]  (11,27]  (11,27] \nLevels: (0,11] (11,27] (27,43] (43,59] (59,78] (78,96] (96,Inf]"
  },
  {
    "objectID": "slides/R/05-r-basics.html#categories-based-on-strata-1",
    "href": "slides/R/05-r-basics.html#categories-based-on-strata-1",
    "title": "R Basics",
    "section": "Categories based on strata",
    "text": "Categories based on strata\n\nWe can assign it more meaningful level names:\n\n\nage &lt;- c(5, 93, 18, 102, 14, 22, 45, 65, 67, 25, 30, 16, 21)\ncut(age, c(0, 11, 27, 43, 59, 78, 96, Inf), \n    labels = c(\"Alpha\", \"Zoomer\", \"Millennial\", \"X\", \"Boomer\", \"Silent\", \"Greatest\"))\n\n [1] Alpha      Silent     Zoomer     Greatest   Zoomer     Zoomer    \n [7] X          Boomer     Boomer     Zoomer     Millennial Zoomer    \n[13] Zoomer    \nLevels: Alpha Zoomer Millennial X Boomer Silent Greatest"
  },
  {
    "objectID": "slides/R/05-r-basics.html#changing-levels",
    "href": "slides/R/05-r-basics.html#changing-levels",
    "title": "R Basics",
    "section": "Changing levels",
    "text": "Changing levels\n\nThis is often needed for ordinal data because R defaults to alphabetical order:\n\n\ngen &lt;- factor(c(\"Alpha\", \"Zoomer\", \"Millennial\"))\nlevels(gen)\n\n[1] \"Alpha\"      \"Millennial\" \"Zoomer\"    \n\n\n\nYou can change this with the levels argument:\n\n\ngen &lt;- factor(gen, levels = c(\"Alpha\", \"Zoomer\", \"Millennial\", \"X\", \"Boomer\", \"Silent\", \"Greatest\"))\nlevels(gen)\n\n[1] \"Alpha\"      \"Zoomer\"     \"Millennial\" \"X\"          \"Boomer\"    \n[6] \"Silent\"     \"Greatest\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#changing-levels-1",
    "href": "slides/R/05-r-basics.html#changing-levels-1",
    "title": "R Basics",
    "section": "Changing levels",
    "text": "Changing levels\n\nA common reason we need to change levels is to assure R is aware which is the reference strata.\nThis is important for linear models because the first level is assumed to be the reference.\n\n\nx &lt;- factor(c(\"no drug\", \"drug 1\", \"drug 2\"))\nlevels(x)\n\n[1] \"drug 1\"  \"drug 2\"  \"no drug\"\n\nx &lt;- relevel(x, ref = \"no drug\")\nlevels(x)          \n\n[1] \"no drug\" \"drug 1\"  \"drug 2\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#changing-levels-2",
    "href": "slides/R/05-r-basics.html#changing-levels-2",
    "title": "R Basics",
    "section": "Changing levels",
    "text": "Changing levels\n\nWe often want to order strata based on a summary statistic.\nThis is common in data visualization.\nWe can use reorder for this:\n\n\nx &lt;- reorder(murders$region, murders$population, sum)"
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors-2",
    "href": "slides/R/05-r-basics.html#factors-2",
    "title": "R Basics",
    "section": "Factors",
    "text": "Factors\n\nAnother reason we used factors is because they more efficient:\n\n\nx &lt;- sample(murders$state[c(5,33,44)], 10^7, replace = TRUE)\ny &lt;- factor(x)\nobject.size(x)\n\n80000232 bytes\n\nobject.size(y)\n\n40000648 bytes\n\n\n\nAn integer is easier to store than a character string."
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors-3",
    "href": "slides/R/05-r-basics.html#factors-3",
    "title": "R Basics",
    "section": "Factors",
    "text": "Factors\nExercise: How can we make this go much faster?\n\nsystem.time({levels(y) &lt;- tolower(levels(y))})\n\n   user  system elapsed \n  0.018   0.000   0.019"
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors-can-be-confusing",
    "href": "slides/R/05-r-basics.html#factors-can-be-confusing",
    "title": "R Basics",
    "section": "Factors can be confusing",
    "text": "Factors can be confusing\n\nTry to make sense of this:\n\n\nx &lt;- factor(c(\"3\",\"2\",\"1\"), levels = c(\"3\",\"2\",\"1\"))\nas.numeric(x)\n\n[1] 1 2 3\n\nx[1]\n\n[1] 3\nLevels: 3 2 1\n\nlevels(x[1])\n\n[1] \"3\" \"2\" \"1\"\n\ntable(x[1])\n\n\n3 2 1 \n1 0 0"
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors-can-be-confusing-1",
    "href": "slides/R/05-r-basics.html#factors-can-be-confusing-1",
    "title": "R Basics",
    "section": "Factors can be confusing",
    "text": "Factors can be confusing\n\nAvoid keeping extra levels with droplevels:\n\n\nz &lt;- x[1]\nz &lt;- droplevels(z)\n\n\nBut note what happens if we change to another level:\n\n\nz[1] &lt;- \"1\"\nz\n\n[1] &lt;NA&gt;\nLevels: 3"
  },
  {
    "objectID": "slides/R/05-r-basics.html#nas",
    "href": "slides/R/05-r-basics.html#nas",
    "title": "R Basics",
    "section": "NAs",
    "text": "NAs\n\nNA stands for not available.\nData analysts have to deal with NAs often."
  },
  {
    "objectID": "slides/R/05-r-basics.html#nas-1",
    "href": "slides/R/05-r-basics.html#nas-1",
    "title": "R Basics",
    "section": "NAs",
    "text": "NAs\n\ndslabs includes an example dataset with NAs\n\n\nlibrary(dslabs)\nna_example[1:20]\n\n [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2\n\n\n\nThe is.na function is key for dealing with NAs\n\n\nis.na(na_example[1])\n\n[1] FALSE\n\nis.na(na_example[17])\n\n[1] TRUE\n\nis.na(NA)\n\n[1] TRUE\n\nis.na(\"NA\")\n\n[1] FALSE"
  },
  {
    "objectID": "slides/R/05-r-basics.html#nas-2",
    "href": "slides/R/05-r-basics.html#nas-2",
    "title": "R Basics",
    "section": "NAs",
    "text": "NAs\n\nTechnically NA is a logical\n\n\nclass(NA)\n\n[1] \"logical\"\n\n\n\nWhen used with ands and ors, NAs behaves like FALSE\n\n\nTRUE & NA\n\n[1] NA\n\nTRUE | NA\n\n[1] TRUE\n\n\n\nBut NA is not FALSE. Try this:\n\n\nif (NA) print(1) else print(0)"
  },
  {
    "objectID": "slides/R/05-r-basics.html#nans",
    "href": "slides/R/05-r-basics.html#nans",
    "title": "R Basics",
    "section": "NaNs",
    "text": "NaNs\n\nA related constant is NaN.\nUnlike NA, which is a logical, NaN is a number.\nIt is a numeric that is Not a Number.\nHere are some examples:\n\n\n0/0\n\n[1] NaN\n\nclass(0/0)\n\n[1] \"numeric\"\n\nsqrt(-1)\n\n[1] NaN\n\nlog(-1)\n\n[1] NaN"
  },
  {
    "objectID": "slides/R/05-r-basics.html#coercing",
    "href": "slides/R/05-r-basics.html#coercing",
    "title": "R Basics",
    "section": "Coercing",
    "text": "Coercing\n\nWhen you do something inconsistent with data types, R tries to figure out what you mean and change it accordingly.\nWe call this coercing.\nR does not return an error and in some cases does not return a warning either.\nThis can cause confusion and unnoticed errors.\nSo it’s important to understand how and when it happens."
  },
  {
    "objectID": "slides/R/05-r-basics.html#coercing-1",
    "href": "slides/R/05-r-basics.html#coercing-1",
    "title": "R Basics",
    "section": "Coercing",
    "text": "Coercing\n\nHere are some examples:\n\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(1)\n\n[1] \"double\"\n\ntypeof(1 + 1L)\n\n[1] \"double\"\n\nc(\"a\", 1, 2)\n\n[1] \"a\" \"1\" \"2\"\n\nTRUE + FALSE\n\n[1] 1\n\nfactor(\"a\") == \"a\"\n\n[1] TRUE\n\nidentical(factor(\"a\"), \"a\")\n\n[1] FALSE"
  },
  {
    "objectID": "slides/R/05-r-basics.html#coercing-2",
    "href": "slides/R/05-r-basics.html#coercing-2",
    "title": "R Basics",
    "section": "Coercing",
    "text": "Coercing\n\nWhen R can’t figure out how to coerce, rather an error it returns an NA:\n\n\nas.numeric(\"a\")\n\n[1] NA\n\n\n\nNote that including NAs in arithmetical operations usually returns an NA.\n\n\n1 + 2 + NA\n\n[1] NA"
  },
  {
    "objectID": "slides/R/05-r-basics.html#coercing-3",
    "href": "slides/R/05-r-basics.html#coercing-3",
    "title": "R Basics",
    "section": "Coercing",
    "text": "Coercing\n\nYou want to avoid automatic coercion and instead explicitly do it.\nMost coercion functions start with as.\nHere is an example.\n\n\nx &lt;- factor(c(\"a\",\"b\",\"b\",\"c\"))\nas.character(x)\n\n[1] \"a\" \"b\" \"b\" \"c\"\n\nas.numeric(x)\n\n[1] 1 2 2 3"
  },
  {
    "objectID": "slides/R/05-r-basics.html#coercing-4",
    "href": "slides/R/05-r-basics.html#coercing-4",
    "title": "R Basics",
    "section": "Coercing",
    "text": "Coercing\n\nMore examples:\n\n\nx &lt;- c(\"12323\", \"12,323\")\nas.numeric(x)\n\n[1] 12323    NA\n\nlibrary(readr)\nparse_guess(x)\n\n[1] 12323 12323"
  },
  {
    "objectID": "slides/R/05-r-basics.html#lists",
    "href": "slides/R/05-r-basics.html#lists",
    "title": "R Basics",
    "section": "Lists",
    "text": "Lists\n\nData frames are a type of list.\nLists permit components of different types and, unlike data frames, different lengths:\n\n\nx &lt;- list(name = \"John\", id = 112, grades = c(95, 87, 92))\n\n\nThe JSON format is best represented as list in R."
  },
  {
    "objectID": "slides/R/05-r-basics.html#lists-1",
    "href": "slides/R/05-r-basics.html#lists-1",
    "title": "R Basics",
    "section": "Lists",
    "text": "Lists\n\nYou can access components in different ways:\n\n\nx$name\n\n[1] \"John\"\n\nx[[1]]\n\n[1] \"John\"\n\nx[[\"name\"]]\n\n[1] \"John\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#matrics",
    "href": "slides/R/05-r-basics.html#matrics",
    "title": "R Basics",
    "section": "Matrics",
    "text": "Matrics\n\nMatrices are another widely used data type.\nThey are similar to data frames except all entries need to be of the same type.\nWe will learn more about matrices in the High Dimensional data Analysis part of the class."
  },
  {
    "objectID": "slides/R/05-r-basics.html#functions",
    "href": "slides/R/05-r-basics.html#functions",
    "title": "R Basics",
    "section": "Functions",
    "text": "Functions\n\nYou can define your own function. The form is like this:\n\n\nf &lt;- function(x, y, z = 0){\n  ### do calculations with x, y, z to compute object\n  ## return(object)\n}"
  },
  {
    "objectID": "slides/R/05-r-basics.html#functions-1",
    "href": "slides/R/05-r-basics.html#functions-1",
    "title": "R Basics",
    "section": "Functions",
    "text": "Functions\n\nHere is an example of a function that sums \\(1,2,\\dots,n\\)\n\n\ns &lt;- function(n){\n   return(sum(1:n))\n}"
  },
  {
    "objectID": "slides/R/05-r-basics.html#lexical-scope",
    "href": "slides/R/05-r-basics.html#lexical-scope",
    "title": "R Basics",
    "section": "Lexical scope",
    "text": "Lexical scope\n\nStudy what happens here:\n\n\nf &lt;- function(x){\n  cat(\"y is\", y,\"\\n\")\n  y &lt;- x\n  cat(\"y is\", y,\"\\n\")\n  return(y)\n}\ny &lt;- 2\nf(3)\n\ny is 2 \ny is 3 \n\n\n[1] 3\n\ny &lt;- f(3)\n\ny is 2 \ny is 3 \n\ny\n\n[1] 3"
  },
  {
    "objectID": "slides/R/05-r-basics.html#namespaces",
    "href": "slides/R/05-r-basics.html#namespaces",
    "title": "R Basics",
    "section": "Namespaces",
    "text": "Namespaces\n\nLook at how this function changes by typing the following:\n\n\nfilter\nlibrary(dplyr)\nfilter"
  },
  {
    "objectID": "slides/R/05-r-basics.html#namespaces-1",
    "href": "slides/R/05-r-basics.html#namespaces-1",
    "title": "R Basics",
    "section": "Namespaces",
    "text": "Namespaces\n\nNote what R searches the Global Environment first.\nUse search to see other environments R searches.\nNote many prebuilt functions are in stats."
  },
  {
    "objectID": "slides/R/05-r-basics.html#namespaces-2",
    "href": "slides/R/05-r-basics.html#namespaces-2",
    "title": "R Basics",
    "section": "Namespaces",
    "text": "Namespaces\n\nYou can explicitly say which filter you want using namespaces:\n\n\nstats::filter\ndplyr::filter"
  },
  {
    "objectID": "slides/R/05-r-basics.html#namespaces-3",
    "href": "slides/R/05-r-basics.html#namespaces-3",
    "title": "R Basics",
    "section": "Namespaces",
    "text": "Namespaces\n\nRestart yoru R Consuole and study this example:\n\n\nlibrary(dslabs)\nexists(\"murders\")\n\n[1] TRUE\n\nmurders &lt;- murders\nmurders2 &lt;- murders\nrm(murders)\nexists(\"murders\")\n\n[1] TRUE\n\ndetach(\"package:dslabs\")\nexists(\"murders\")\n\n[1] FALSE\n\nexists(\"murders2\")\n\n[1] TRUE"
  },
  {
    "objectID": "slides/R/05-r-basics.html#object-oriented-programming",
    "href": "slides/R/05-r-basics.html#object-oriented-programming",
    "title": "R Basics",
    "section": "Object Oriented Programming",
    "text": "Object Oriented Programming\n\nR uses object oriented programming (OOP).\nIt uses two approaches referred to as S3 and S4, respectively.\nS3, the original approach, is more common.\nThe S4 approach is more similar to the conventions used by modern OOP languages."
  },
  {
    "objectID": "slides/R/05-r-basics.html#object-oriented-programming-1",
    "href": "slides/R/05-r-basics.html#object-oriented-programming-1",
    "title": "R Basics",
    "section": "Object Oriented Programming",
    "text": "Object Oriented Programming\n\nTime seriesNumeric\n\n\n\nplot(co2)\n\n\n\n\n\n\n\n\n\n\n\nplot(as.numeric(co2))"
  },
  {
    "objectID": "slides/R/05-r-basics.html#object-oriented-programming-2",
    "href": "slides/R/05-r-basics.html#object-oriented-programming-2",
    "title": "R Basics",
    "section": "Object Oriented Programming",
    "text": "Object Oriented Programming\n\nNote co2 is not numeric:\n\n\nclass(co2)\n\n[1] \"ts\"\n\n\n\nThe plots are different because plot behaves different with different classes."
  },
  {
    "objectID": "slides/R/05-r-basics.html#object-oriented-programming-3",
    "href": "slides/R/05-r-basics.html#object-oriented-programming-3",
    "title": "R Basics",
    "section": "Object Oriented Programming",
    "text": "Object Oriented Programming\n\nThe first plot actually calls the function\n\n\nplot.ts\n\n\nNotice all the plot functions that start with plot by typing plot. and then tab.\nThe function plot will call different functions depending on the class of the arguments."
  },
  {
    "objectID": "slides/R/05-r-basics.html#plots",
    "href": "slides/R/05-r-basics.html#plots",
    "title": "R Basics",
    "section": "Plots",
    "text": "Plots\n\nSoon we will learn how to use the ggplot2 package to make plots.\nR base does have functions for plotting though\nSome you should know about are:\n\nplot - mainly for making scatterplots.\nlines - add lines/curves to an existing plot.\nhist - to make a histogram.\nboxplot - makes boxplots.\nimage - uses color to represent entries in a matrix."
  },
  {
    "objectID": "slides/R/05-r-basics.html#plots-1",
    "href": "slides/R/05-r-basics.html#plots-1",
    "title": "R Basics",
    "section": "Plots",
    "text": "Plots\n\nAlthough, in general, we recommend using ggplot2, R base plots are often better for quick exploratory plots.\nFor example, to make a histogram of values in x simply type:\n\n\nhist(x)\n\n\nTo make a scatter plot of y versus x and then interpolate we type:\n\n\nplot(x,y)\nlines(x,y)"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#tidyverse",
    "href": "slides/R/07-tidyverse.html#tidyverse",
    "title": "Tidyverse",
    "section": "Tidyverse",
    "text": "Tidyverse\n\nlibrary(tidyverse)\n\n\nThe tidyverse is not a package but a group of packages developed to work with each other.\nThe tidyverse makes data analysis simpler and code easier to read by sacrificing some flexibility.\nOne way code is simplified by ensuring all functions take and return tidy data."
  },
  {
    "objectID": "slides/R/07-tidyverse.html#tidy-data",
    "href": "slides/R/07-tidyverse.html#tidy-data",
    "title": "Tidyverse",
    "section": "Tidy data",
    "text": "Tidy data\n\nStored in a data frame.\nEach observation is exactly one row.\nVariables are stored in columns.\nNot all data can be represented this way, but a very large subset of data analysis challenges are based on tidy data.\nAssuming data is tidy simplifies coding and frees up our minds for statistical thinking."
  },
  {
    "objectID": "slides/R/07-tidyverse.html#tidy-data-1",
    "href": "slides/R/07-tidyverse.html#tidy-data-1",
    "title": "Tidyverse",
    "section": "Tidy data",
    "text": "Tidy data\n\nThis is an example of a tidy dataset:\n\n\n\n      country year fertility\n1     Germany 1960      2.41\n2 South Korea 1960      6.16\n3     Germany 1961      2.44\n4 South Korea 1961      5.99\n5     Germany 1962      2.47\n6 South Korea 1962      5.79"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#tidy-data-2",
    "href": "slides/R/07-tidyverse.html#tidy-data-2",
    "title": "Tidyverse",
    "section": "Tidy data",
    "text": "Tidy data\n\nOriginally, the data was in the following format:\n\n\n\n      country 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970\n1     Germany 2.41 2.44 2.47 2.49 2.49 2.48 2.44 2.37 2.28 2.17 2.04\n2 South Korea 6.16 5.99 5.79 5.57 5.36 5.16 4.99 4.85 4.73 4.62 4.53\n\n\n\nThis is not tidy."
  },
  {
    "objectID": "slides/R/07-tidyverse.html#tidyverse-packages",
    "href": "slides/R/07-tidyverse.html#tidyverse-packages",
    "title": "Tidyverse",
    "section": "Tidyverse packages",
    "text": "Tidyverse packages\n\ntibble - improves data frame class.\nreadr - import data.\ndplyr - used to modify data frames.\nggplot2 - simplifies plotting.\ntidyr - helps convert data into tidy format.\nstringr - string processing.\nforcats - utilities for categorical data.\npurrr - tidy version of apply functions."
  },
  {
    "objectID": "slides/R/07-tidyverse.html#dplyr",
    "href": "slides/R/07-tidyverse.html#dplyr",
    "title": "Tidyverse",
    "section": "dplyr",
    "text": "dplyr\n\nIn this lecture we focus on dplyr.\nIn particular the following functions:\n\nmutate\nselect\nacross\nfilter\ngroup_by\nsummarize"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#adding-a-column-with-mutate",
    "href": "slides/R/07-tidyverse.html#adding-a-column-with-mutate",
    "title": "Tidyverse",
    "section": "Adding a column with mutate",
    "text": "Adding a column with mutate\n\nmurders &lt;- mutate(murders, rate = total/population*100000)\n\n\nNotice that here we used total and population inside the function, which are objects that are not defined in our workspace.\nThis is known as non-standard evaluation where the context is used to know what variable names means.\nTidyverse extensively uses non-standard evaluation.\nThis can create confusion but it certainly simplifies code."
  },
  {
    "objectID": "slides/R/07-tidyverse.html#subsetting-with-filter",
    "href": "slides/R/07-tidyverse.html#subsetting-with-filter",
    "title": "Tidyverse",
    "section": "Subsetting with filter",
    "text": "Subsetting with filter\n\nfilter(murders, rate &lt;= 0.71)\n\n          state abb        region population total      rate\n1        Hawaii  HI          West    1360301     7 0.5145920\n2          Iowa  IA North Central    3046355    21 0.6893484\n3 New Hampshire  NH     Northeast    1316470     5 0.3798036\n4  North Dakota  ND North Central     672591     4 0.5947151\n5       Vermont  VT     Northeast     625741     2 0.3196211"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#selecting-columns-with-select",
    "href": "slides/R/07-tidyverse.html#selecting-columns-with-select",
    "title": "Tidyverse",
    "section": "Selecting columns with select",
    "text": "Selecting columns with select\n\nnew_table &lt;- select(murders, state, region, rate)\nfilter(new_table, rate &lt;= 0.71)\n\n          state        region      rate\n1        Hawaii          West 0.5145920\n2          Iowa North Central 0.6893484\n3 New Hampshire     Northeast 0.3798036\n4  North Dakota North Central 0.5947151\n5       Vermont     Northeast 0.3196211"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#transforming-variables",
    "href": "slides/R/07-tidyverse.html#transforming-variables",
    "title": "Tidyverse",
    "section": "Transforming variables",
    "text": "Transforming variables\n\nThe function mutate can also be used to transform variables.\nFor example, the following code takes the log transformation of the population variable:\n\n\nmutate(murders, population = log10(population))"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#transforming-variables-1",
    "href": "slides/R/07-tidyverse.html#transforming-variables-1",
    "title": "Tidyverse",
    "section": "Transforming variables",
    "text": "Transforming variables\n\nOften, we need to apply the same transformation to several variables.\nThe function across facilitates the operation.\nFor example if want to log transform both population and total murders we can use:\n\n\nmutate(murders, across(c(population, total), log10))"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#transforming-variables-2",
    "href": "slides/R/07-tidyverse.html#transforming-variables-2",
    "title": "Tidyverse",
    "section": "Transforming variables",
    "text": "Transforming variables\n\nThe helper functions come in handy when using across.\nAn example is if we want to apply the same transformation to all numeric variables:\n\n\nmutate(murders, across(where(is.numeric), log10))\n\n\nor all character variables:\n\n\nmutate(murders, across(where(is.character), tolower))\n\n\nThere are several other useful helper functions."
  },
  {
    "objectID": "slides/R/07-tidyverse.html#the-pipe-or",
    "href": "slides/R/07-tidyverse.html#the-pipe-or",
    "title": "Tidyverse",
    "section": "The pipe: |> or %>%",
    "text": "The pipe: |&gt; or %&gt;%\n\nWe use the pipe to chain a series of operations.\nFor example if we want to select columns and then filter rows we chain like this:\n\n\\[ \\mbox{original data }\n\\rightarrow \\mbox{ select }\n\\rightarrow \\mbox{ filter } \\]"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#the-pipe-or-1",
    "href": "slides/R/07-tidyverse.html#the-pipe-or-1",
    "title": "Tidyverse",
    "section": "The pipe: |> or %>%",
    "text": "The pipe: |&gt; or %&gt;%\n\nThe code looks like this:\n\n\nmurders |&gt; select(state, region, rate) |&gt; filter(rate &lt;= 0.71)\n\n          state        region      rate\n1        Hawaii          West 0.5145920\n2          Iowa North Central 0.6893484\n3 New Hampshire     Northeast 0.3798036\n4  North Dakota North Central 0.5947151\n5       Vermont     Northeast 0.3196211\n\n\n\nThe object on the left of the pipe is used as the first argument for the function on the right.\nThe second argument becomes the first, the third the second, and so on…"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#the-pipe-or-2",
    "href": "slides/R/07-tidyverse.html#the-pipe-or-2",
    "title": "Tidyverse",
    "section": "The pipe: |> or %>%",
    "text": "The pipe: |&gt; or %&gt;%\n\nHere is a simple example:\n\n\n16 |&gt; sqrt() |&gt; log(base = 2)\n\n[1] 2"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#summarizing-data",
    "href": "slides/R/07-tidyverse.html#summarizing-data",
    "title": "Tidyverse",
    "section": "Summarizing data",
    "text": "Summarizing data\n\nWe use the dplyr summarize function, not to be confused with summary from R base.\nHere is an example of how it works:\n\n\nmurders |&gt; summarize(avg = mean(rate))\n\n       avg\n1 2.779125\n\n\n\nLet’s compute murder rate for the US. Is the above it?"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#summarizing-data-1",
    "href": "slides/R/07-tidyverse.html#summarizing-data-1",
    "title": "Tidyverse",
    "section": "Summarizing data",
    "text": "Summarizing data\n\nNo, the rate is NOT the average of rates.\nIt is the total murders divided by total population:\n\n\nmurders |&gt; summarize(rate = sum(total)/sum(population)*100000)\n\n      rate\n1 3.034555"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#multiple-summaries",
    "href": "slides/R/07-tidyverse.html#multiple-summaries",
    "title": "Tidyverse",
    "section": "Multiple summaries",
    "text": "Multiple summaries\n\nSuppose we want the median, minimum and max population size:\n\n\nmurders |&gt; summarize(median = median(population), min = min(population), max = max(population))\n\n   median    min      max\n1 4339367 563626 37253956\n\n\n\nWhy don’t we use quantiles?\n\n\nmurders |&gt; summarize(quantiles = quantile(population, c(0.5, 0, 1)))\n\n  quantiles\n1   4339367\n2    563626\n3  37253956"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#multiple-summaries-1",
    "href": "slides/R/07-tidyverse.html#multiple-summaries-1",
    "title": "Tidyverse",
    "section": "Multiple summaries",
    "text": "Multiple summaries\n\n\n\n\n\n\nWarning\n\n\nUsing a function that returns more than one number within summairze will soon be deprecated.\n\n\n\n\nFor multiple summaries we use reframe:\n\n\nmurders |&gt; reframe(quantiles = quantile(population, c(0.5, 0, 1)))\n\n  quantiles\n1   4339367\n2    563626\n3  37253956"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#multiple-summaries-2",
    "href": "slides/R/07-tidyverse.html#multiple-summaries-2",
    "title": "Tidyverse",
    "section": "Multiple summaries",
    "text": "Multiple summaries\n\nHowever, if we want a column per summary, as when we called min, median, and max separately, we have to define a function that returns a data frame like this:\n\n\nmedian_min_max &lt;- function(x){\n  qs &lt;- quantile(x, c(0.5, 0, 1))\n  data.frame(median = qs[1], min = qs[2], max = qs[3])\n}\n\n\nThen we can call summarize:\n\n\nmurders |&gt; summarize(median_min_max(population))\n\n   median    min      max\n1 4339367 563626 37253956"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#group-then-summarize",
    "href": "slides/R/07-tidyverse.html#group-then-summarize",
    "title": "Tidyverse",
    "section": "Group then summarize",
    "text": "Group then summarize\n\nLet’s compute murder rate by region.\nTake a close look at this output?\n\n\nmurders |&gt; group_by(region) |&gt; head(4)\n\n# A tibble: 4 × 6\n# Groups:   region [2]\n  state    abb   region population total  rate\n  &lt;chr&gt;    &lt;chr&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Alabama  AL    South     4779736   135  2.82\n2 Alaska   AK    West       710231    19  2.68\n3 Arizona  AZ    West      6392017   232  3.63\n4 Arkansas AR    South     2915918    93  3.19\n\n\n\nNote the Groups: region [4] at the top.\nThis is a special data frame called a grouped data frame."
  },
  {
    "objectID": "slides/R/07-tidyverse.html#group-then-summarize-1",
    "href": "slides/R/07-tidyverse.html#group-then-summarize-1",
    "title": "Tidyverse",
    "section": "Group then summarize",
    "text": "Group then summarize\n\nIn particular summarize, will behave differently when acting on this object.\n\n\nmurders |&gt; \n  group_by(region) |&gt; \n  summarize(rate = sum(total) / sum(population) * 100000)\n\n# A tibble: 4 × 2\n  region         rate\n  &lt;fct&gt;         &lt;dbl&gt;\n1 Northeast      2.66\n2 South          3.63\n3 North Central  2.73\n4 West           2.66\n\n\n\nThe summarize function applies the summarization to each group separately."
  },
  {
    "objectID": "slides/R/07-tidyverse.html#group-then-summarize-2",
    "href": "slides/R/07-tidyverse.html#group-then-summarize-2",
    "title": "Tidyverse",
    "section": "Group then summarize",
    "text": "Group then summarize\n\nFor another example, let’s compute the median, minimum, and maximum population in the four regions of the country using the median_min_max previously defined:\n\n\nmurders |&gt; group_by(region) |&gt; summarize(median_min_max(population))\n\n# A tibble: 4 × 4\n  region          median    min      max\n  &lt;fct&gt;            &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n1 Northeast     3574097  625741 19378102\n2 South         4625364  601723 25145561\n3 North Central 5495456. 672591 12830632\n4 West          2700551  563626 37253956"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#group-then-summarize-3",
    "href": "slides/R/07-tidyverse.html#group-then-summarize-3",
    "title": "Tidyverse",
    "section": "Group then summarize",
    "text": "Group then summarize\n\nYou can also summarize a variable but not collapse the dataset.\nWe use mutate instead of summarize.\nHere is an example where we add a column with the population in each region and the number of states in the region, shown for each state.\n\n\nmurders |&gt; group_by(region) |&gt; \n  mutate(region_pop = sum(population), n = n())"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#ungroup",
    "href": "slides/R/07-tidyverse.html#ungroup",
    "title": "Tidyverse",
    "section": "ungroup",
    "text": "ungroup\n\nWhen we do this, we usually want to ungroup before continuing our analysis.\n\n\nmurders |&gt; group_by(region) |&gt; \n  mutate(region_pop = sum(population), n = n()) |&gt;\n  ungroup()\n\n\nThis avoids having a grouped data frame that we don’t need."
  },
  {
    "objectID": "slides/R/07-tidyverse.html#pull",
    "href": "slides/R/07-tidyverse.html#pull",
    "title": "Tidyverse",
    "section": "pull",
    "text": "pull\n\nTidyverse function always returns a data frame. Even if its just one number.\n\n\nmurders |&gt; \n  summarize(rate = sum(total)/sum(population)*100000) |&gt;\n  class()\n\n[1] \"data.frame\""
  },
  {
    "objectID": "slides/R/07-tidyverse.html#pull-1",
    "href": "slides/R/07-tidyverse.html#pull-1",
    "title": "Tidyverse",
    "section": "pull",
    "text": "pull\n\nTo get a numberic use pull:\n\n\nmurders |&gt; \n  summarize(rate = sum(total)/sum(population)*100000) |&gt;\n  pull(rate) \n\n[1] 3.034555"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#sorting-data-frames",
    "href": "slides/R/07-tidyverse.html#sorting-data-frames",
    "title": "Tidyverse",
    "section": "Sorting data frames",
    "text": "Sorting data frames\n\nStates order by rate\n\n\nmurders |&gt; arrange(rate) |&gt; head()\n\n          state abb        region population total      rate\n1       Vermont  VT     Northeast     625741     2 0.3196211\n2 New Hampshire  NH     Northeast    1316470     5 0.3798036\n3        Hawaii  HI          West    1360301     7 0.5145920\n4  North Dakota  ND North Central     672591     4 0.5947151\n5          Iowa  IA North Central    3046355    21 0.6893484\n6         Idaho  ID          West    1567582    12 0.7655102"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#sorting-data-frames-1",
    "href": "slides/R/07-tidyverse.html#sorting-data-frames-1",
    "title": "Tidyverse",
    "section": "Sorting data frames",
    "text": "Sorting data frames\n\nIf we want decreasing we can either use the negative or, for more readability, use desc:\n\n\nmurders |&gt; arrange(desc(rate)) |&gt; head()\n\n                 state abb        region population total      rate\n1 District of Columbia  DC         South     601723    99 16.452753\n2            Louisiana  LA         South    4533372   351  7.742581\n3             Missouri  MO North Central    5988927   321  5.359892\n4             Maryland  MD         South    5773552   293  5.074866\n5       South Carolina  SC         South    4625364   207  4.475323\n6             Delaware  DE         South     897934    38  4.231937"
  },
  {
    "objectID": "slides/R/07-tidyverse.html#sorting-data-frames-2",
    "href": "slides/R/07-tidyverse.html#sorting-data-frames-2",
    "title": "Tidyverse",
    "section": "Sorting data frames",
    "text": "Sorting data frames\n\nWe can use two variables as well:\n\n\nmurders |&gt; arrange(region, desc(rate)) |&gt; head(11)\n\n                  state abb    region population total       rate\n1          Pennsylvania  PA Northeast   12702379   457  3.5977513\n2            New Jersey  NJ Northeast    8791894   246  2.7980319\n3           Connecticut  CT Northeast    3574097    97  2.7139722\n4              New York  NY Northeast   19378102   517  2.6679599\n5         Massachusetts  MA Northeast    6547629   118  1.8021791\n6          Rhode Island  RI Northeast    1052567    16  1.5200933\n7                 Maine  ME Northeast    1328361    11  0.8280881\n8         New Hampshire  NH Northeast    1316470     5  0.3798036\n9               Vermont  VT Northeast     625741     2  0.3196211\n10 District of Columbia  DC     South     601723    99 16.4527532\n11            Louisiana  LA     South    4533372   351  7.7425810"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#the-header",
    "href": "slides/productivity/03-quarto.html#the-header",
    "title": "Quarto",
    "section": "The header",
    "text": "The header\n\nStart a new empty document.\nAt the top you see:\n\n\n---\ntitle: \"Untitled\"\n---\n\n\nThe things between the --- is the YAML header.\nYou will see it used throughout the Quarto guide."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#text-formating",
    "href": "slides/productivity/03-quarto.html#text-formating",
    "title": "Quarto",
    "section": "Text formating",
    "text": "Text formating\n*italics* or _italics_ = italics\n**bold** = bold\n***bold italics*** = bold italics\n~~strikethrough~~ = strikethrough\n`code` = code"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#text-formating-1",
    "href": "slides/productivity/03-quarto.html#text-formating-1",
    "title": "Quarto",
    "section": "Text formating",
    "text": "Text formating\nThis:\n```\nline 1\nline 2\n```\nshows code chunks:\nline 1\nline 2"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#links",
    "href": "slides/productivity/03-quarto.html#links",
    "title": "Quarto",
    "section": "Links",
    "text": "Links\n\nShow the link and add link: &lt;https://quarto.org/docs/guide/&gt;\nAdd link to text: [Quarto Guide](https://quarto.org/docs/guide/)\n\nLooks like this:\nhttps://quarto.org/docs/guide/\nQuarto Guide"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#images",
    "href": "slides/productivity/03-quarto.html#images",
    "title": "Quarto",
    "section": "Images",
    "text": "Images\n![My caption](https://datasciencedojo.com/wp-content/uploads/11-1.jpg)\nShows the plot and caption:\n\nMy captionThe image can also be a local file."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#lists",
    "href": "slides/productivity/03-quarto.html#lists",
    "title": "Quarto",
    "section": "Lists",
    "text": "Lists\nBullets:\n-   bullet 1\n    -   sub-bullet 1\n    -   sub-bullet 2\n-   bullet 2\nLooks like this:\n\nbullet 1\n\nsub-bullet 1\nsub-bullet 2\n\nbullet 2"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#lists-1",
    "href": "slides/productivity/03-quarto.html#lists-1",
    "title": "Quarto",
    "section": "Lists",
    "text": "Lists\nOrdered list:\n1.  Item 1\n2.  Item 2\nLooks like this:\n\nItem 1\nItem 2"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#equations",
    "href": "slides/productivity/03-quarto.html#equations",
    "title": "Quarto",
    "section": "Equations",
    "text": "Equations\n\n\n\n\n\n\n\nNote\n\n\nIf you are going to write technical report, you definitely want to learn LaTeX.\nOnce you learn LaTeX you will never want to use an equation editor again.\nThere are many online tutorials, like this one.\nChatGPT is great at LaTeX"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#equations-1",
    "href": "slides/productivity/03-quarto.html#equations-1",
    "title": "Quarto",
    "section": "Equations",
    "text": "Equations\nExamples:\n\nInline: $Y_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i$ looks like this \\(Y_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i\\)\nDisplay math:\n\n$$\n\\mathbf{Y} = \\mathbf{X\\beta} + \\mathbf{\\varepsilon}\n$$\nlooks like this:\n\\[\n\\mathbf{Y} = \\mathbf{X\\beta} + \\mathbf{\\varepsilon}\n\\]"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations",
    "href": "slides/productivity/03-quarto.html#computations",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nThe main reason we use Quarto is because we can include code and execute the code when compiling the document.\nIn R we refer to them as R chunks.\nThis applies to plots as well; the plot will be placed in that position.\n\n\n\n\n\n\n\nNote\n\n\nTo add your own R chunks, you can type the characters above quickly with the key binding command-option-I on the Mac and Ctrl-Alt-I on Windows."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-1",
    "href": "slides/productivity/03-quarto.html#computations-1",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\nWe can write something like this:\n```{r}\nx &lt;- 1\ny &lt;- 2\nx + y\n```"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-2",
    "href": "slides/productivity/03-quarto.html#computations-2",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\nIt look slike this:\n\nx &lt;- 1\ny &lt;- 2\nx + y\n\n[1] 3\n\n\nNote that it was evaluated and the result is shown."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-3",
    "href": "slides/productivity/03-quarto.html#computations-3",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nBy default, the code and result will show up as well.\nYou can send arguments to control the behavior with |#\nFor example, to avoid showing code in the final document, you can use the argument echo: FALSE.\n\n```{r}\n#| echo: false\nx &lt;- 1\ny &lt;- 2\nx + y\n```"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-4",
    "href": "slides/productivity/03-quarto.html#computations-4",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nThere are many options (auto-complete shows them).\nFor example, to avoid the the code running you can use eval: FALSE.\nTo avoid showing warnings warning: FALSE, to avoid showing messages message: FALSE.\n\n\n\n\n\n\n\nNote\n\n\nIf you want to apply an option globally, these can be set globally in the header.\nexecute:\n  echo: false"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-5",
    "href": "slides/productivity/03-quarto.html#computations-5",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nWe recommend getting into the habit of labeling code chunks:\n\n```{r}\n#| label: one-plus-two\nx &lt;- 1\ny &lt;- 2\nx + y\n```\n\nHelps with debugging\nGives meaningful names to generated images."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#more-on-markdown",
    "href": "slides/productivity/03-quarto.html#more-on-markdown",
    "title": "Quarto",
    "section": "More on markdown",
    "text": "More on markdown\nThere is a lot more you can do with R markdown. We highly recommend you continue learning as you gain more experience writing reports in R. There are many free resources on the internet including:\n\nRStudio’s tutorial: https://quarto.org/docs/get-started/hello/rstudio.html\nThe knitR book: https://yihui.name/knitr/\nPandoc’s Markdown in-depth documentation\nGuide for academic reports"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#quarto-render",
    "href": "slides/productivity/03-quarto.html#quarto-render",
    "title": "Quarto",
    "section": "quarto render",
    "text": "quarto render\n\nRStudio provides the Render button that makes it easier to compile the document.\nYou can also type quarto render filename.qmd on the command line. This offers many options.\nYou can produce html, pdf, or word documents.\nYou can specify the default in the YAML header using: format: html, format: pdf,format: docx, or format: gfm (gfm stands for GitHub flavored markdown, a convenient way to share your reports)."
  },
  {
    "objectID": "slides/productivity/01-unix.html#naming-convention",
    "href": "slides/productivity/01-unix.html#naming-convention",
    "title": "Unix",
    "section": "Naming convention",
    "text": "Naming convention\n\nIn general you want to name your files in a way that is related to their contents and specifies how they relate to other files.\nThe Smithsonian Data Management Best Practices has “five precepts of file naming and organization”"
  },
  {
    "objectID": "slides/productivity/01-unix.html#five-precepts-of-file-naming-and-organization",
    "href": "slides/productivity/01-unix.html#five-precepts-of-file-naming-and-organization",
    "title": "Unix",
    "section": "Five precepts of file naming and organization",
    "text": "Five precepts of file naming and organization\n\nHave a distinctive, human-readable name that gives an indication of the content.\nFollow a consistent pattern that is machine-friendly.\nOrganize files into directories (when necessary) that follow a consistent pattern.\nAvoid repetition of semantic elements among file and directory names.\nHave a file extension that matches the file format (no changing extensions!)\n\nFor specific recommendations we highly recommend you follow The Tidyverse Style Guide"
  },
  {
    "objectID": "slides/productivity/01-unix.html#the-terminal",
    "href": "slides/productivity/01-unix.html#the-terminal",
    "title": "Unix",
    "section": "The terminal",
    "text": "The terminal\n\nInstead of clicking, dragging, and dropping to organize our files and folders, we will be typing Unix commands into the terminal.\nThe way we do this is similar to how we type commands into the R console, but instead of generating plots and statistical summaries, we will be organizing files on our system."
  },
  {
    "objectID": "slides/productivity/01-unix.html#the-terminal-1",
    "href": "slides/productivity/01-unix.html#the-terminal-1",
    "title": "Unix",
    "section": "The terminal",
    "text": "The terminal\n\nThe terminal is integrated into Mac and Linux systems, but Windows users will have to install an emulator. Once you have a terminal open, you can start typing commands.\nYou should see a blinking cursor at the spot where what you type will show up. This position is called the command line."
  },
  {
    "objectID": "slides/productivity/01-unix.html#the-home-directory",
    "href": "slides/productivity/01-unix.html#the-home-directory",
    "title": "Unix",
    "section": "The home directory",
    "text": "The home directory"
  },
  {
    "objectID": "slides/productivity/01-unix.html#windows",
    "href": "slides/productivity/01-unix.html#windows",
    "title": "Unix",
    "section": "Windows",
    "text": "Windows\nThe structure on Windows looks something like this:"
  },
  {
    "objectID": "slides/productivity/01-unix.html#mac",
    "href": "slides/productivity/01-unix.html#mac",
    "title": "Unix",
    "section": "Mac",
    "text": "Mac\nAnd on MacOS something like this:"
  },
  {
    "objectID": "slides/productivity/01-unix.html#working-directory",
    "href": "slides/productivity/01-unix.html#working-directory",
    "title": "Unix",
    "section": "Working directory",
    "text": "Working directory\n\nThe working directory is the directly you are currently in. Later we will see that we can move to other directories using the command line.\nIt’s similar to clicking on folders.\nYou can see your working directory using the Unix command pwd\n\nIn R we can use getwd()"
  },
  {
    "objectID": "slides/productivity/01-unix.html#paths",
    "href": "slides/productivity/01-unix.html#paths",
    "title": "Unix",
    "section": "Paths",
    "text": "Paths\n\nThis string returned in previous command is full path to working directory.\nThe full path to your home directory is stored in an environment variable.\nYou can see it like this echo $HOME"
  },
  {
    "objectID": "slides/productivity/01-unix.html#paths-1",
    "href": "slides/productivity/01-unix.html#paths-1",
    "title": "Unix",
    "section": "Paths",
    "text": "Paths\n\nIn Unix, we use the shorthand ~ as a nickname for your home directory\nExample: the full path for docs (in image above) can be written like this ~/docs.\nMost terminals will show the path to your working directory right on the command line.\nLet’s open a terminal window and see if the working directory is listed."
  },
  {
    "objectID": "slides/productivity/01-unix.html#unix-commands",
    "href": "slides/productivity/01-unix.html#unix-commands",
    "title": "Unix",
    "section": "Unix commands",
    "text": "Unix commands\n\nls: Listing directory content\nmkdir and rmdir: make and remove a directory\ncd: navigating the filesystem by changing directories\npwd: see your workding directory\nmv: moving files\ncp: copying files\nrm: removing files\nless: looking at a file"
  },
  {
    "objectID": "slides/productivity/01-unix.html#autocomplete",
    "href": "slides/productivity/01-unix.html#autocomplete",
    "title": "Unix",
    "section": "Autocomplete",
    "text": "Autocomplete\n\nIn Unix you can auto-complete by hitting tab.\nThis means that we can type cd d then hit tab.\nUnix will either auto-complete if docs is the only directory/file starting with d or show you the options.\nTry it out! Using Unix without auto-complete will make it unbearable."
  },
  {
    "objectID": "slides/productivity/01-unix.html#text-editors",
    "href": "slides/productivity/01-unix.html#text-editors",
    "title": "Unix",
    "section": "Text editors",
    "text": "Text editors\nCommand-line text editors are essential tools, especially for system administrators, developers, and other users who frequently work in a terminal environment. Here are some of the most popular command-line text editors:\n\nNano\nPico\nVi or Vim\nEmacs"
  },
  {
    "objectID": "slides/productivity/01-unix.html#other-very-useful-commands-you-should-learn",
    "href": "slides/productivity/01-unix.html#other-very-useful-commands-you-should-learn",
    "title": "Unix",
    "section": "Other very useful commands you should learn",
    "text": "Other very useful commands you should learn\n\ncurl - download data from the internet.\ntar - archive files and subdirectories of a directory into one file.\nssh - connect to another computer.\nfind - search for files by filename in your system.\ngrep - search for patterns in a file.\nawk/sed - These are two very powerful commands that permit you to find specific strings in files and change them."
  },
  {
    "objectID": "slides/productivity/01-unix.html#resources",
    "href": "slides/productivity/01-unix.html#resources",
    "title": "Unix",
    "section": "Resources",
    "text": "Resources\nTo get started.\n\nhttps://www.codecademy.com/learn/learn-the-command-line\nhttps://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-1\nhttps://www.coursera.org/learn/unix"
  },
  {
    "objectID": "lab-notes/pset-02-r-vectorization.html",
    "href": "lab-notes/pset-02-r-vectorization.html",
    "title": "Problem set 2",
    "section": "",
    "text": "For these exercises, do not load any packages other than dslabs.\nMake sure to use vectorization whenever possible.\n\nWhat is the sum of the first 100 positive integers? Use the functions seq and sum to compute the sum with R for any n.\n\n\n# Your code here\n\n\nLoad the US murders dataset from the dslabs package. Use the function str to examine the structure of the murders object. What are the column names used by the data frame for these five variables? Show the subset of murders showing states with less than 1 per 100,000 deaths. Show all variables.\n\n\nlibrary(dslabs)\nstr(murders)\n\n'data.frame':   51 obs. of  5 variables:\n $ state     : chr  \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...\n $ abb       : chr  \"AL\" \"AK\" \"AZ\" \"AR\" ...\n $ region    : Factor w/ 4 levels \"Northeast\",\"South\",..: 2 4 4 2 4 4 1 2 2 2 ...\n $ population: num  4779736 710231 6392017 2915918 37253956 ...\n $ total     : num  135 19 232 93 1257 ...\n\n\n\nmurders$rate &lt;- with(murders, total/population*10^5)\nmurders[murders$rate &lt; 1,]\n\n           state abb        region population total      rate\n12        Hawaii  HI          West    1360301     7 0.5145920\n13         Idaho  ID          West    1567582    12 0.7655102\n16          Iowa  IA North Central    3046355    21 0.6893484\n20         Maine  ME     Northeast    1328361    11 0.8280881\n24     Minnesota  MN North Central    5303925    53 0.9992600\n30 New Hampshire  NH     Northeast    1316470     5 0.3798036\n35  North Dakota  ND North Central     672591     4 0.5947151\n38        Oregon  OR          West    3831074    36 0.9396843\n42  South Dakota  SD North Central     814180     8 0.9825837\n45          Utah  UT          West    2763885    22 0.7959810\n46       Vermont  VT     Northeast     625741     2 0.3196211\n51       Wyoming  WY          West     563626     5 0.8871131\n\n\n\nShow the subset of murders showing states with less than 1 per 100,000 deaths and in the West of the US. Don’t show the region variable.\n\n\nmurders[murders$rate &lt; 1 & murders$region == \"West\",-3]\n\n     state abb population total      rate\n12  Hawaii  HI    1360301     7 0.5145920\n13   Idaho  ID    1567582    12 0.7655102\n38  Oregon  OR    3831074    36 0.9396843\n45    Utah  UT    2763885    22 0.7959810\n51 Wyoming  WY     563626     5 0.8871131\n\n\n\nShow the largest state with a rate less than 1 per 100,000.\n\n\nres &lt;- murders[murders$rate &lt; 1,]\nres$state[which.max(res$population)]\n\n[1] \"Minnesota\"\n\n\n\nShow the state with a population of more than 10 million with the lowest rate.\n\n\nres &lt;- murders[murders$population &gt; 10^7,]\nres$state[which.min(res$rate)]\n\n[1] \"New York\"\n\n\n\nCompute the rate for each region of the US.\n\n\ninds &lt;- split(1:nrow(murders), murders$region)\n\nsapply(inds, function(ind){\n  sum(murders$total[ind])/sum(murders$population[ind])*10^5\n})\n\n    Northeast         South North Central          West \n     2.655592      3.626558      2.731334      2.656175 \n\ninds &lt;- split(1:nrow(murders), murders$region)\n\ntot &lt;- tapply(murders$total, murders$region, sum)\npop &lt;- tapply(murders$population, murders$region, sum)\n\nrate &lt;- tot/pop\nprint(rate)\n\n    Northeast         South North Central          West \n 2.655592e-05  3.626558e-05  2.731334e-05  2.656175e-05 \n\nsapply(inds, function(ind){\n  sum(murders$total[ind])/sum(murders$population[ind])*10^5\n})\n\n    Northeast         South North Central          West \n     2.655592      3.626558      2.731334      2.656175 \n\n\n\nCreate a vector of numbers that starts at 6, does not pass 55, and adds numbers in increments of 4/7: 6, 6 + 4/7, 6 + 8/7, and so on. How many numbers does the list have? Hint: use seq and length.\n\n\n# Your code here\n\n\nMake this data frame:\n\n\ntemp &lt;- c(35, 88, 42, 84, 81, 30)\ncity &lt;- c(\"Beijing\", \"Lagos\", \"Paris\", \"Rio de Janeiro\", \n          \"San Juan\", \"Toronto\")\ncity_temps &lt;- data.frame(name = city, temperature = temp)\n\nConvert the temperatures to Celsius.\n\n# Your code here\n\n\nWrite a function euler that compute the following sum for any \\(n\\):\n\n\\[\nS_n = 1+1/2^2 + 1/3^2 + \\dots 1/n^2\n\\]\n\n# Your code here\n\n\nShow that as \\(n\\) gets bigger we get closer \\(\\pi^2/6\\) by plotting \\(S_n\\) versus \\(n\\) with a horizontal dashed line at \\(\\pi^2/6\\).\n\n\n# Your code here\n\n\nUse the %in% operator and the predefined object state.abb to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU?\n\n\nx &lt;- c(\"MA\", \"ME\", \"MI\", \"MO\", \"MU\")\nx[x %in% state.abb]\n\n[1] \"MA\" \"ME\" \"MI\" \"MO\"\n\n\n\nExtend the code you used in the previous exercise to report the one entry that is not an actual abbreviation. Hint: use the ! operator, which turns FALSE into TRUE and vice versa, then which to obtain an index.\n\n\n# Your code here\n\n\nIn the murders dataset, use match to show all variables for New York, California, and Texas, in that order.\n\n\nx &lt;- c(\"NY\", \"CA\", \"TX\")\nmurders[match(x,murders$abb),]\n\n        state abb    region population total     rate\n33   New York  NY Northeast   19378102   517 2.667960\n5  California  CA      West   37253956  1257 3.374138\n44      Texas  TX     South   25145561   805 3.201360\n\n\n\nWrite a function called vandermonde_helper that for any \\(x\\) and \\(n\\), returns the vector \\((1, x, x^2, x^3, \\dots, x^n)\\). Show the results for \\(x=3\\) and \\(n=5\\).\n\n\n# Your code here\n\n\nCreate a vector using:\n\n\nn &lt;- 10000\np &lt;- 0.5\nset.seed(2024-9-6)\nx &lt;- sample(c(0,1), n, prob = c(1 - p, p), replace = TRUE)\n\nCompute the length of each stretch of 1s and then plot the distribution of these values. Check to see if the distribution follows a geometric distribution as the theory predicts. Do not use a loop!\n\nd &lt;- diff(c(0,x,0))\nst &lt;- which(d == 1)\nen &lt;- which(d == -1)\nl &lt;- en - st \nhist(l)\n\n\n\n\n\n\n\ntb &lt;- table(l)/length(l)\nk &lt;- as.numeric(names(tb))\nps &lt;- as.numeric(tb)\nplot(k, ps, type = \"h\")\nlines(k, p^k)"
  }
]