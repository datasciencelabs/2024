[
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "BST 260 Introduction to Data Science\nKresge 202A and 202B (HSPH)\nMonday 09:45 AM - 11:15 AM; Wednesday 09:45 AM - 11:15 AM\nLecture notes: https://datasciencelabs.github.io/2024/\nSlack workspace: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#general-information",
    "href": "syllabus.html#general-information",
    "title": "Syllabus",
    "section": "",
    "text": "BST 260 Introduction to Data Science\nKresge 202A and 202B (HSPH)\nMonday 09:45 AM - 11:15 AM; Wednesday 09:45 AM - 11:15 AM\nLecture notes: https://datasciencelabs.github.io/2024/\nSlack workspace: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\nWe assume students have taken or are taking a probability and statistics course and have basic programming skills.\nStudents not matriculated in an HSPH Biostatistics graduate program (HDS SM60, BIO SM80 / SM60 / SM1, and CBQG SM80) will be required to score at least 90% on a basic math and programming diagnostic test to enroll in the course. If you are in a HSPH Biostatistics graduate program and you score less than 90% we will contact you to offer supplementary resource to help you be prepared for the course.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#textbooks",
    "href": "syllabus.html#textbooks",
    "title": "Syllabus",
    "section": "Textbooks",
    "text": "Textbooks\n\nIntroduction to Data Science: Data Wrangling and Visualization with R\nIntroduction to Data Science: Statistics and Prediction Algorithms Through Case Studies",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-description",
    "href": "syllabus.html#course-description",
    "title": "Syllabus",
    "section": "Course Description",
    "text": "Course Description\nThis course introduces the following:\n\nUNIX/Linux shell\nReproducible document preparation with RStudio, knitr, and markdown\nVersion control with git and GitHub\nR programming\nData wrangling with dplyr and data.table\nData visualization with ggplot2\n\nWe also demonstrate how the following concepts are applied in data analysis:\n\nProbability theory\nStatistical inference and modeling\nHigh-dimensional data techniques\nMachine learning\n\nWe do not cover the theory and details of these methods as they are covered in other courses.\nThroughout the course, we use motivating case studies and data analysis problem sets based on challenges similar to those you encounter in scientific research.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#weekly-course-structure",
    "href": "syllabus.html#weekly-course-structure",
    "title": "Syllabus",
    "section": "Weekly Course Structure",
    "text": "Weekly Course Structure\n\nMonday lectures: We describe the concerts, methods, and skills needed for problem sets.\nWednesday labs: We work together on problem sets.\nFriday: Problem sets due (see Key Dates and Problem Sets).\n\nPlease ensure that you read the chapters listed in the syllabus before each Monday. The lectures are designed with the assumption that you have completed the readings, enabling us to dive deeper into the nuances of data analysis and coding.\nLectures will not be recorded.\nWe will have a Slack workspace for you to ask questions during and after class.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#grade-distribution",
    "href": "syllabus.html#grade-distribution",
    "title": "Syllabus",
    "section": "Grade Distribution",
    "text": "Grade Distribution\n\n\n\nComponent\nWeight\n\n\n\n\n10 problem sets\n50%\n\n\nMidterm 1\n10%\n\n\nMidterm 2\n20%\n\n\nFinal project\n20%",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#problem-sets",
    "href": "syllabus.html#problem-sets",
    "title": "Syllabus",
    "section": "Problem Sets",
    "text": "Problem Sets\nProblem sets will be due every week or every other week, depending on difficulty. They will be due at 11:59 PM on the day denoted on the Problem Sets page.\nSome problem sets include open ended questions that will be difficult to answer on your own. We will be working on these together during Wednesday labs. We also offer office hours where you can get help with unanswered questions.\nProblem sets must be submitted via GitHub. Students are required to have a GitHub account and create a repository for the course. We will be providing further instructions during the first lab.\n10% of the total points for the problem sets will be deducted for every late day. Students can have a total of 4 late days without penalty during the entire semester. No need to provide a written excuse. Providing an excuse does not give you more days unless an accommodation is requested and approved by the Office of Student Affairs (this includes COVID).\nProblem set submissions need to be completely reproducible Quarto documents. If your Quarto file does not compile it will be considered a late day, and you will be notified and will need to resubmit a Quarto file that does compile. You will be deducted further late days for every day it takes for you to turn in a Quarto file that does knit. You are required to check emails that come through the Canvas system, as this the only way we will communicate problems with your problem sets.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#midterm-policy",
    "href": "syllabus.html#midterm-policy",
    "title": "Syllabus",
    "section": "Midterm Policy",
    "text": "Midterm Policy\nBoth midterms are closed book, no internet, and in-class. You are expected to complete them in 1 hour.\nQuestions will be drawn mostly or entirely from the problem sets.\nPlease make sure you can come to class on the midterm dates provided in the Key Dates table below. If you miss the exam, you will need approval from the Office of Student Affairs to receive a makeup. All make-up exams will be completely different from the in-class ones.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#final-project",
    "href": "syllabus.html#final-project",
    "title": "Syllabus",
    "section": "Final Project",
    "text": "Final Project\nFor your final project we ask that you turn in a 4-6 page report using data to answer a public health related question. You can chose from one of the following:\n\nBased on state-level data, how effective where vaccines against SARS-CoV-2 reported cases and COVID-19 hospitalizations and deaths, and vaccination rates.\nWhat was the excess mortality after Hurricane María in Puerto Rico? Where different age groups affected differently?\n\nOptionally, you can select a question that align with your ongoing research. This way, it can be directly beneficial to your work. This will require prior approval from the instructor by October 25.\nYet another option is to build a interactive webpage with poll-driven predictions for the 2024 US elections. Note this will be more challenging as we will not cover tools for interactive webpages until the last week of class (time permitting).\nNote: You should start working on your project after the first midterm. Do not wait until the last week. Teaching staff will be available during office hours.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#chatgpt-policy",
    "href": "syllabus.html#chatgpt-policy",
    "title": "Syllabus",
    "section": "ChatGPT Policy",
    "text": "ChatGPT Policy\nYou can use ChatGPT however you want. Do remember you won’t be able to use it during the midterms.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#key-dates",
    "href": "syllabus.html#key-dates",
    "title": "Syllabus",
    "section": "Key Dates",
    "text": "Key Dates\n\n\n\n\n\n\n\nDate\nEvent\n\n\n\n\nSep 10\nPset 1 due\n\n\nSep 13\nPset 2 due\n\n\nOct 14\nNo class: Indigenous Peoples’ Day\n\n\nOct 16\nMidterm 1: covers material from Sep 04-Oct 11\n\n\nOct 23\nStart final project. Obtain approval if you want to do a personal project instead.\n\n\nNov 11\nNo class: Veterans’ Day\n\n\nNov 25\nMidterm 2: cover material from Sep 04-Nov 22\n\n\nNov 27\nNo class: Thanksgiving Recess Begins\n\n\nDec 20\nFinal Project due",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "slides/productivity/01-unix.html#naming-convention",
    "href": "slides/productivity/01-unix.html#naming-convention",
    "title": "Unix",
    "section": "Naming convention",
    "text": "Naming convention\n\nIn general you want to name your files in a way that is related to their contents and specifies how they relate to other files.\nThe Smithsonian Data Management Best Practices has “five precepts of file naming and organization”"
  },
  {
    "objectID": "slides/productivity/01-unix.html#five-precepts-of-file-naming-and-organization",
    "href": "slides/productivity/01-unix.html#five-precepts-of-file-naming-and-organization",
    "title": "Unix",
    "section": "Five precepts of file naming and organization",
    "text": "Five precepts of file naming and organization\n\nHave a distinctive, human-readable name that gives an indication of the content.\nFollow a consistent pattern that is machine-friendly.\nOrganize files into directories (when necessary) that follow a consistent pattern.\nAvoid repetition of semantic elements among file and directory names.\nHave a file extension that matches the file format (no changing extensions!)\n\nFor specific recommendations we highly recommend you follow The Tidyverse Style Guide"
  },
  {
    "objectID": "slides/productivity/01-unix.html#the-terminal",
    "href": "slides/productivity/01-unix.html#the-terminal",
    "title": "Unix",
    "section": "The terminal",
    "text": "The terminal\n\nInstead of clicking, dragging, and dropping to organize our files and folders, we will be typing Unix commands into the terminal.\nThe way we do this is similar to how we type commands into the R console, but instead of generating plots and statistical summaries, we will be organizing files on our system."
  },
  {
    "objectID": "slides/productivity/01-unix.html#the-terminal-1",
    "href": "slides/productivity/01-unix.html#the-terminal-1",
    "title": "Unix",
    "section": "The terminal",
    "text": "The terminal\n\nThe terminal is integrated into Mac and Linux systems, but Windows users will have to install an emulator. Once you have a terminal open, you can start typing commands.\nYou should see a blinking cursor at the spot where what you type will show up. This position is called the command line."
  },
  {
    "objectID": "slides/productivity/01-unix.html#the-home-directory",
    "href": "slides/productivity/01-unix.html#the-home-directory",
    "title": "Unix",
    "section": "The home directory",
    "text": "The home directory"
  },
  {
    "objectID": "slides/productivity/01-unix.html#windows",
    "href": "slides/productivity/01-unix.html#windows",
    "title": "Unix",
    "section": "Windows",
    "text": "Windows\nThe structure on Windows looks something like this:"
  },
  {
    "objectID": "slides/productivity/01-unix.html#mac",
    "href": "slides/productivity/01-unix.html#mac",
    "title": "Unix",
    "section": "Mac",
    "text": "Mac\nAnd on MacOS something like this:"
  },
  {
    "objectID": "slides/productivity/01-unix.html#working-directory",
    "href": "slides/productivity/01-unix.html#working-directory",
    "title": "Unix",
    "section": "Working directory",
    "text": "Working directory\n\nThe working directory is the directly you are currently in. Later we will see that we can move to other directories using the command line.\nIt’s similar to clicking on folders.\nYou can see your working directory using the Unix command pwd\n\nIn R we can use getwd()"
  },
  {
    "objectID": "slides/productivity/01-unix.html#paths",
    "href": "slides/productivity/01-unix.html#paths",
    "title": "Unix",
    "section": "Paths",
    "text": "Paths\n\nThis string returned in previous command is full path to working directory.\nThe full path to your home directory is stored in an environment variable.\nYou can see it like this echo $HOME"
  },
  {
    "objectID": "slides/productivity/01-unix.html#paths-1",
    "href": "slides/productivity/01-unix.html#paths-1",
    "title": "Unix",
    "section": "Paths",
    "text": "Paths\n\nIn Unix, we use the shorthand ~ as a nickname for your home directory\nExample: the full path for docs (in image above) can be written like this ~/docs.\nMost terminals will show the path to your working directory right on the command line.\nLet’s open a terminal window and see if the working directory is listed."
  },
  {
    "objectID": "slides/productivity/01-unix.html#unix-commands",
    "href": "slides/productivity/01-unix.html#unix-commands",
    "title": "Unix",
    "section": "Unix commands",
    "text": "Unix commands\n\nls: Listing directory content\nmkdir and rmdir: make and remove a directory\ncd: navigating the filesystem by changing directories\npwd: see your workding directory\nmv: moving files\ncp: copying files\nrm: removing files\nless: looking at a file"
  },
  {
    "objectID": "slides/productivity/01-unix.html#autocomplete",
    "href": "slides/productivity/01-unix.html#autocomplete",
    "title": "Unix",
    "section": "Autocomplete",
    "text": "Autocomplete\n\nIn Unix you can auto-complete by hitting tab.\nThis means that we can type cd d then hit tab.\nUnix will either auto-complete if docs is the only directory/file starting with d or show you the options.\nTry it out! Using Unix without auto-complete will make it unbearable."
  },
  {
    "objectID": "slides/productivity/01-unix.html#text-editors",
    "href": "slides/productivity/01-unix.html#text-editors",
    "title": "Unix",
    "section": "Text editors",
    "text": "Text editors\nCommand-line text editors are essential tools, especially for system administrators, developers, and other users who frequently work in a terminal environment. Here are some of the most popular command-line text editors:\n\nNano\nPico\nVi or Vim\nEmacs"
  },
  {
    "objectID": "slides/productivity/01-unix.html#other-very-useful-commands-you-should-learn",
    "href": "slides/productivity/01-unix.html#other-very-useful-commands-you-should-learn",
    "title": "Unix",
    "section": "Other very useful commands you should learn",
    "text": "Other very useful commands you should learn\n\ncurl - download data from the internet.\ntar - archive files and subdirectories of a directory into one file.\nssh - connect to another computer.\nfind - search for files by filename in your system.\ngrep - search for patterns in a file.\nawk/sed - These are two very powerful commands that permit you to find specific strings in files and change them."
  },
  {
    "objectID": "slides/productivity/01-unix.html#resources",
    "href": "slides/productivity/01-unix.html#resources",
    "title": "Unix",
    "section": "Resources",
    "text": "Resources\nTo get started.\n\nhttps://www.codecademy.com/learn/learn-the-command-line\nhttps://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-1\nhttps://www.coursera.org/learn/unix"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#the-header",
    "href": "slides/productivity/03-quarto.html#the-header",
    "title": "Quarto",
    "section": "The header",
    "text": "The header\n\nStart a new empty document.\nAt the top you see:\n\n\n---\ntitle: \"Untitled\"\n---\n\n\nThe things between the --- is the YAML header.\nYou will see it used throughout the Quarto guide."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#text-formating",
    "href": "slides/productivity/03-quarto.html#text-formating",
    "title": "Quarto",
    "section": "Text formating",
    "text": "Text formating\n*italics* or _italics_ = italics\n**bold** = bold\n***bold italics*** = bold italics\n~~strikethrough~~ = strikethrough\n`code` = code"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#text-formating-1",
    "href": "slides/productivity/03-quarto.html#text-formating-1",
    "title": "Quarto",
    "section": "Text formating",
    "text": "Text formating\nThis:\n```\nline 1\nline 2\n```\nshows code chunks:\nline 1\nline 2"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#links",
    "href": "slides/productivity/03-quarto.html#links",
    "title": "Quarto",
    "section": "Links",
    "text": "Links\n\nShow the link and add link: &lt;https://quarto.org/docs/guide/&gt;\nAdd link to text: [Quarto Guide](https://quarto.org/docs/guide/)\n\nLooks like this:\nhttps://quarto.org/docs/guide/\nQuarto Guide"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#images",
    "href": "slides/productivity/03-quarto.html#images",
    "title": "Quarto",
    "section": "Images",
    "text": "Images\n![My caption](https://datasciencedojo.com/wp-content/uploads/11-1.jpg)\nShows the plot and caption:\n\nMy captionThe image can also be a local file."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#lists",
    "href": "slides/productivity/03-quarto.html#lists",
    "title": "Quarto",
    "section": "Lists",
    "text": "Lists\nBullets:\n-   bullet 1\n    -   sub-bullet 1\n    -   sub-bullet 2\n-   bullet 2\nLooks like this:\n\nbullet 1\n\nsub-bullet 1\nsub-bullet 2\n\nbullet 2"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#lists-1",
    "href": "slides/productivity/03-quarto.html#lists-1",
    "title": "Quarto",
    "section": "Lists",
    "text": "Lists\nOrdered list:\n1.  Item 1\n2.  Item 2\nLooks like this:\n\nItem 1\nItem 2"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#equations",
    "href": "slides/productivity/03-quarto.html#equations",
    "title": "Quarto",
    "section": "Equations",
    "text": "Equations\n\n\n\n\n\n\n\nNote\n\n\nIf you are going to write technical report, you definitely want to learn LaTeX.\nOnce you learn LaTeX you will never want to use an equation editor again.\nThere are many online tutorials, like this one.\nChatGPT is great at LaTeX"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#equations-1",
    "href": "slides/productivity/03-quarto.html#equations-1",
    "title": "Quarto",
    "section": "Equations",
    "text": "Equations\nExamples:\n\nInline: $Y_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i$ looks like this \\(Y_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i\\)\nDisplay math:\n\n$$\n\\mathbf{Y} = \\mathbf{X\\beta} + \\mathbf{\\varepsilon}\n$$\nlooks like this:\n\\[\n\\mathbf{Y} = \\mathbf{X\\beta} + \\mathbf{\\varepsilon}\n\\]"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations",
    "href": "slides/productivity/03-quarto.html#computations",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nThe main reason we use Quarto is because we can include code and execute the code when compiling the document.\nIn R we refer to them as R chunks.\nThis applies to plots as well; the plot will be placed in that position.\n\n\n\n\n\n\n\nNote\n\n\nTo add your own R chunks, you can type the characters above quickly with the key binding command-option-I on the Mac and Ctrl-Alt-I on Windows."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-1",
    "href": "slides/productivity/03-quarto.html#computations-1",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\nWe can write something like this:\n```{r}\nx &lt;- 1\ny &lt;- 2\nx + y\n```"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-2",
    "href": "slides/productivity/03-quarto.html#computations-2",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\nIt look slike this:\n\nx &lt;- 1\ny &lt;- 2\nx + y\n\n[1] 3\n\n\nNote that it was evaluated and the result is shown."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-3",
    "href": "slides/productivity/03-quarto.html#computations-3",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nBy default, the code and result will show up as well.\nYou can send arguments to control the behavior with |#\nFor example, to avoid showing code in the final document, you can use the argument echo: FALSE.\n\n```{r}\n#| echo: false\nx &lt;- 1\ny &lt;- 2\nx + y\n```"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-4",
    "href": "slides/productivity/03-quarto.html#computations-4",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nThere are many options (auto-complete shows them).\nFor example, to avoid the the code running you can use eval: FALSE.\nTo avoid showing warnings warning: FALSE, to avoid showing messages message: FALSE.\n\n\n\n\n\n\n\nNote\n\n\nIf you want to apply an option globally, these can be set globally in the header.\nexecute:\n  echo: false"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-5",
    "href": "slides/productivity/03-quarto.html#computations-5",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nWe recommend getting into the habit of labeling code chunks:\n\n```{r}\n#| label: one-plus-two\nx &lt;- 1\ny &lt;- 2\nx + y\n```\n\nHelps with debugging\nGives meaningful names to generated images."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#more-on-markdown",
    "href": "slides/productivity/03-quarto.html#more-on-markdown",
    "title": "Quarto",
    "section": "More on markdown",
    "text": "More on markdown\nThere is a lot more you can do with R markdown. We highly recommend you continue learning as you gain more experience writing reports in R. There are many free resources on the internet including:\n\nRStudio’s tutorial: https://quarto.org/docs/get-started/hello/rstudio.html\nThe knitR book: https://yihui.name/knitr/\nPandoc’s Markdown in-depth documentation\nGuide for academic reports"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#quarto-render",
    "href": "slides/productivity/03-quarto.html#quarto-render",
    "title": "Quarto",
    "section": "quarto render",
    "text": "quarto render\n\nRStudio provides the Render button that makes it easier to compile the document.\nYou can also type quarto render filename.qmd on the command line. This offers many options.\nYou can produce html, pdf, or word documents.\nYou can specify the default in the YAML header using: format: html, format: pdf,format: docx, or format: gfm (gfm stands for GitHub flavored markdown, a convenient way to share your reports)."
  },
  {
    "objectID": "psets.html",
    "href": "psets.html",
    "title": "Problem Sets",
    "section": "",
    "text": "Topic\n\n\nDue date (at 11:59 PM)\n\n\n\n\n\n\nProblem set 1\n\n\nWed, Sep 11\n\n\n\n\nProblem set 2\n\n\nThu, Sep 19\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Problem Sets"
    ]
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "Topic\n\n\nTitle\n\n\nDate\n\n\n\n\n\n\nFirst day\n\n\nIntroduction\n\n\nWed, Sep 04\n\n\n\n\nProductivity Tools\n\n\nUnix\n\n\nWed, Sep 04\n\n\n\n\nProductivity Tools\n\n\nRStudio\n\n\nWed, Sep 04\n\n\n\n\nProductivity Tools\n\n\nQuarto\n\n\nMon, Sep 09\n\n\n\n\nProductivity Tools\n\n\nGit and GitHub\n\n\nMon, Sep 09\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Slides"
    ]
  },
  {
    "objectID": "psets/pset-01-unix-quarto.html",
    "href": "psets/pset-01-unix-quarto.html",
    "title": "Problem set 1",
    "section": "",
    "text": "After finishing the homework, you are to turn in all the code to GitHub using git.\n\nStart an RStudio project. Pick a good name following a naming convention. Start a Quarto document called beginning.qmd.\nCreate a directory called img and save a screen shot of your RStudio session for the project. Include your screenshot in the Quarto document.\nNext, in your Quarto document, define variables \\(a=1, b=-1, c=-2\\) and print out the solutions to \\(f(x) = ax^2+bx+c=0\\). Do not report complex solutions, only real numbers.\nInclude a graph of \\(f(x)\\) versus \\(x\\) for \\(x \\in (-5,5)\\).\n\n\nx &lt;- seq(-5, 5, length = 100)\n# Hint: Use the plot function\n\n\nCreate a directory called docs. Use the command quarto render to create a PDF and save it to the docs directory. Show us the command you typed:\n\n# Your code here\n\nUse Unix to create a directory called data in the project home directory. Include the Unix command you used to create the directory.\n\n# Your code here\n\nUse a terminal-based text editor to create a file coefs.txt in the data directory and save three coefficients, 1 -1 -2 for example. Show us the Unix commands you used to achieve this:\n\n# Your code here\n\nMake a directory called code. Use Unix to copy the file beginning.qmd to a file called quadratic.qmd in the code directory. Show us the Unix commands you used.\n\n# Your code here\n\nEdit the quadratic.qmd file to read in a, b, and c from the file coefs.txt. Make sure to use a relative path when reading the file. As before, print out the solutions to \\(f(x) = ax^2+bx+c=0\\). Do not report complex solutions, only real numbers.\nChange the path of the file you are reading to the full path you get when you type file.path(getwd(), \"data/coefs.txt\"). Confirm that the file still renders. Then move the entire pset-01-rmarkdown project to a directory called RtmpyDknq4. Does the file render? Change the path back to a relative path and see if it renders."
  },
  {
    "objectID": "psets/pset-02-r-vectorization.html",
    "href": "psets/pset-02-r-vectorization.html",
    "title": "Problem set 2",
    "section": "",
    "text": "For these exercises, do not load any packages other than dslabs.\nMake sure to use vectorization whenever possible.\n\nWhat is the sum of the first 100 positive integers? Use the functions seq and sum to compute the sum with R for any n.\n\n\n# Your code here\n\n\nLoad the US murders dataset from the dslabs package. Use the function str to examine the structure of the murders object. What are the column names used by the data frame for these five variables? Show the subset of murders showing states with less than 1 per 100,000 deaths. Show all variables.\n\n\nlibrary(dslabs)\nstr(murders)\n\n'data.frame':   51 obs. of  5 variables:\n $ state     : chr  \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...\n $ abb       : chr  \"AL\" \"AK\" \"AZ\" \"AR\" ...\n $ region    : Factor w/ 4 levels \"Northeast\",\"South\",..: 2 4 4 2 4 4 1 2 2 2 ...\n $ population: num  4779736 710231 6392017 2915918 37253956 ...\n $ total     : num  135 19 232 93 1257 ...\n\n\n\n# Your code here\n\n\nShow the subset of murders showing states with less than 1 per 100,000 deaths and in the West of the US. Don’t show the region variable.\n\n\n# Your code here\n\n\nShow the largest state with a rate less than 1 per 100,000.\n\n\n# Your code here\n\n\nShow the state with a population of more than 10 million with the lowest rate.\n\n\n# Your code here\n\n\nCompute the rate for each region of the US.\n\n\n# Your code here\n\n\nCreate a vector of numbers that starts at 6, does not pass 55, and adds numbers in increments of 4/7: 6, 6 + 4/7, 6 + 8/7, and so on. How many numbers does the list have? Hint: use seq and length.\n\n\n# Your code here\n\n\nMake this data frame:\n\n\ntemp &lt;- c(35, 88, 42, 84, 81, 30)\ncity &lt;- c(\"Beijing\", \"Lagos\", \"Paris\", \"Rio de Janeiro\", \n          \"San Juan\", \"Toronto\")\ncity_temps &lt;- data.frame(name = city, temperature = temp)\n\nConvert the temperatures to Celsius.\n\n# Your code here\n\n\nWrite a function euler that compute the following sum for any \\(n\\):\n\n\\[\nS_n = 1+1/2^2 + 1/3^2 + \\dots 1/n^2\n\\]\n\n# Your code here\n\n\nShow that as \\(n\\) gets bigger we get closer \\(\\pi^2/6\\) by plotting \\(S_n\\) versus \\(n\\) with a horizontal dashed line at \\(\\pi^2/6\\).\n\n\n# Your code here\n\n\nUse the %in% operator and the predefined object state.abb to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU?\n\n\n# Your code here\n\n\nExtend the code you used in the previous exercise to report the one entry that is not an actual abbreviation. Hint: use the ! operator, which turns FALSE into TRUE and vice versa, then which to obtain an index.\n\n\n# Your code here\n\n\nIn the murders dataset, use %in% to show all variables for New York, California, and Texas, in that order.\n\n\n# Your code here\n\n\nWrite a function called vandermonde_helper that for any \\(x\\) and \\(n\\), returns the vector \\((1, x, x^2, x^3, \\dots, x^n)\\). Show the results for \\(x=3\\) and \\(n=5\\).\n\n\n# Your code here\n\n\nCreate a vector using:\n\n\nn &lt;- 10000\np &lt;- 0.5\nset.seed(2024-9-6)\nx &lt;- sample(c(0,1), n, prob = c(1 - p, p), replace = TRUE)\n\nCompute the length of each stretch of 1s and then plot the distribution of these values. Check to see if the distribution follows a geometric distribution as the theory predicts. Do not use a loop!\n\n# Your code here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BST 260 Introduction to Data Science",
    "section": "",
    "text": "Instructor: Rafael A.Irizarry\nTeaching fellows: Corri Sept, Nikhil Vytla, and Yuan Wang\nLocation: Kresge 202A and 202B, Harvard School of Public Health\nDate and time: Mon & Wed 9.45 - 11:15am\nTextbooks: https://github.com/rafalab/dsbook-part-1, https://github.com/rafalab/dsbook-part-2\nSlack: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922/pages/Course%20Information\nGitHub repo: https://github.com/datasciencelabs/2024\nRemember to read the syllabus, listen to SD.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#course-information",
    "href": "index.html#course-information",
    "title": "BST 260 Introduction to Data Science",
    "section": "",
    "text": "Instructor: Rafael A.Irizarry\nTeaching fellows: Corri Sept, Nikhil Vytla, and Yuan Wang\nLocation: Kresge 202A and 202B, Harvard School of Public Health\nDate and time: Mon & Wed 9.45 - 11:15am\nTextbooks: https://github.com/rafalab/dsbook-part-1, https://github.com/rafalab/dsbook-part-2\nSlack: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922/pages/Course%20Information\nGitHub repo: https://github.com/datasciencelabs/2024\nRemember to read the syllabus, listen to SD.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#lectures",
    "href": "index.html#lectures",
    "title": "BST 260 Introduction to Data Science",
    "section": "Lectures",
    "text": "Lectures\nLecture slides, class notes, and problem sets are linked below. New material is added approximately on a weekly basis.\n\n\n\nDates\nTopic\nSlides\nReading\n\n\n\n\nSep 04\nProductivity Tools\nIntro, Unix\nInstalling R and RStudio on Windows or Mac, Getting Started, Unix\n\n\nSep 09, Sep 11\nProductivity Tools\nRStudio, Quarto, Git and GitHub\nRStudio Projects, Quarto, Git\n\n\nSep 16, Sep 19\nR\n\nR Basics, Vectorization, dplyr, ggplot2\n\n\nSep 23, Sep 25\nWrangling\n\nImporting data, dates and times, Locales, Reshaping Data, Joining Tables, Extracting data from the web\n\n\nSep 30, Oct 02\nData visualization\n\nDistributions, Dataviz Principles\n\n\nOct 07, Oct 09\nProbability\n\nMonte Carlo, Random Variables & CLT\n\n\nOct 16\nMidterm 1\n\nCovers material from Sep 04-Oct 11\n\n\nOct 21, Oct 23\nInference\n\nParameters & Estimates, Confidence Intervals\n\n\nOct 28, Oct 30\nStatistical Models\n\nData-driven Models, Bayesian Statistics, Hierarchical Models\n\n\nNov 04, Nov 06\nLinear models\n\nRegression, Multivariate Regression\n\n\nNov 13\nLinear models\n\nMeasurement Error Models, Treatment Effect Models, Association Tests, Association Not Causation\n\n\nNov 18, Nov 20\nHigh dimensional data\n\nMatrices in R, Applied Linear Algebra, Dimension Reduction\n\n\nNov 25\nMidterm 2\n\nMidterm 2: cover material from Sep 04-Nov 22\n\n\nDec 02, Dec 04\nMachine Learning\n\nNotation and terminology, Evaluation Metrics, conditional probabilities, smoothing\n\n\nDec 09, Dec 11\nMachine Learning\n\nResampling methods, ML algorithms, ML in practice\n\n\nDec 16, Dec 18\nOther topics",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#problem-sets",
    "href": "index.html#problem-sets",
    "title": "BST 260 Introduction to Data Science",
    "section": "Problem sets",
    "text": "Problem sets\n\n\n\nProblem set\nTopic\nDue Date\nDifficulty\n\n\n\n\n01\nUnix, Quarto\nSep 11\neasy\n\n\n02\nR\nSep 19\neasy\n\n\n03\nTidyverse\nSep 29\neasy\n\n\n04\nWrangling\nOct 4\nmedium\n\n\n05\nCovid 19 data visualization\nOct 11\nmedium\n\n\n06\nProbability\nOct 25\neasy\n\n\n07\nPredict the election\nNov 04\nhard\n\n\n08\nConfidence intervals for excess mortality\nNov 15\nhard\n\n\n09\nMatrices\nNov 22\neasy\n\n\n10\nDigit reading\nDec 13\nhard\n\n\nFinal Project\nYour choice\nDec 20\nhard",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#office-hour-times",
    "href": "index.html#office-hour-times",
    "title": "BST 260 Introduction to Data Science",
    "section": "Office hour times",
    "text": "Office hour times\n\n\n\nMeeting\nTime\nLocation\n\n\n\n\nRafael Irizarry\nMon 8:45-9:45AM\nKresge LL6\n\n\nCorri Sept\nTue\n3:00-4:00PM\n\n\nNikhil Vytla\nWed\n2:00-3:00PM\n\n\nYuan Wang\nFri\n1:00-2:00PM",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "BST 260 Introduction to Data Science",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nWe thank Maria Tackett and Mine Çetinkaya-Rundel for sharing their web page template, which we used in creating this website.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "slides/00-intro.html#general-information",
    "href": "slides/00-intro.html#general-information",
    "title": "Introduction",
    "section": "General Information",
    "text": "General Information\n\nBST 260 Introduction to Data Science\nInstructor: Rafael A. Irizarry\nTFs: Corri Sept, Nikhil Vytla, Yuan Wang\nMondays we have lectures, Wednesday we have labs.\nWe work on problem sets together, in lab."
  },
  {
    "objectID": "slides/00-intro.html#course-description",
    "href": "slides/00-intro.html#course-description",
    "title": "Introduction",
    "section": "Course Description",
    "text": "Course Description\nLecture notes: https://datasciencelabs.github.io/2024/\n\nPlease read the syllabus!"
  },
  {
    "objectID": "slides/00-intro.html#important-details",
    "href": "slides/00-intro.html#important-details",
    "title": "Introduction",
    "section": "Important details",
    "text": "Important details\n\nComplete readings before class.\nMidterms are in person. There are no makeups.\nMake sure you read messages sent via Canvas\nYou can select your own final project, but need approval.\nYou should start final project by October 23.\nHelp us pick office hours: https://forms.gle/GiQXqDTaeYVxaXd78"
  },
  {
    "objectID": "slides/00-intro.html#whats-coming",
    "href": "slides/00-intro.html#whats-coming",
    "title": "Introduction",
    "section": "What’s coming",
    "text": "What’s coming\n\nUNIX/Linux shell.\nReproducible document preparation\nVersion control with git and GitHub\nR programming\nData wrangling with dplyr and data.table\nData visualization with ggplot2\nProbability theory, inference and modeling\nHigh-dimensional data techniques\nMachine learning"
  },
  {
    "objectID": "slides/00-intro.html#lets-get-started",
    "href": "slides/00-intro.html#lets-get-started",
    "title": "Introduction",
    "section": "Let’s get started",
    "text": "Let’s get started\n\nInstall R.\nInstall RStudio.\nMake sure you have access to a terminal."
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#the-panes",
    "href": "slides/productivity/02-rstudio.html#the-panes",
    "title": "RStudio",
    "section": "The panes",
    "text": "The panes"
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#the-basics",
    "href": "slides/productivity/02-rstudio.html#the-basics",
    "title": "RStudio",
    "section": "The Basics",
    "text": "The Basics\nLet’s try a few things together:\n\nOpen a new R script file.\nLearn tab complete.\nRun commands while editing scripts.\nRun the entire script.\nMake a plot.\nChange options to never save workspace.\nChange IDE appearance."
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#projects",
    "href": "slides/productivity/02-rstudio.html#projects",
    "title": "RStudio",
    "section": "Projects",
    "text": "Projects\nLet’s try this together:\n\nStart new project in new directory.\nStart new project in existing directory.\nChange projects."
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#type-of-editor",
    "href": "slides/productivity/02-rstudio.html#type-of-editor",
    "title": "RStudio",
    "section": "Type of editor",
    "text": "Type of editor\nLet’s examine the two types of editors available:\n\nSource - See the actual code (WYSIWYG)\nVisual - Partial preview of final document.\n\nNote: You can state your preference in a the header:\neditor: source\n\nWe learn about headers in the Quarto lecture."
  },
  {
    "objectID": "slides/productivity/04-git.html#goal-for-the-day",
    "href": "slides/productivity/04-git.html#goal-for-the-day",
    "title": "Git and GitHub",
    "section": "Goal for the day",
    "text": "Goal for the day\n\nCreate a repository\npush something to the repository\nconnect RStudio to GitHub"
  },
  {
    "objectID": "slides/productivity/04-git.html#do-you-have-git",
    "href": "slides/productivity/04-git.html#do-you-have-git",
    "title": "Git and GitHub",
    "section": "Do you have git?",
    "text": "Do you have git?\nBefore we start:\n\nMake sure you have Git installed.\nOpen a terminal and type:\n\n\ngit --version\n\nIf not installed\n\non a Mac, follow the instructions after typing the above.\non Windows follow these instructions"
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation",
    "href": "slides/productivity/04-git.html#motivation",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\nWe want to avoid this:\n\nPosted by rjkb041 on r/ProgrammerHumor"
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation-1",
    "href": "slides/productivity/04-git.html#motivation-1",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\n\nThis is particularly true when more than one person is collaborating and editing the file.\nEven more important when there are multiple files, as there is in software development, and to some extend data analysis."
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation-2",
    "href": "slides/productivity/04-git.html#motivation-2",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\n\nGit is a version control system that provides a systematic approach to keeping versions of files.\n\n\nPosted on devrant.com/ by bhimanshukalra"
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation-3",
    "href": "slides/productivity/04-git.html#motivation-3",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\nBut we have to learn some things.\n\nFrom Meme Git Compilation by Lulu Ilmaknun Qurotaini"
  },
  {
    "objectID": "slides/productivity/04-git.html#why-use-git-and-github",
    "href": "slides/productivity/04-git.html#why-use-git-and-github",
    "title": "Git and GitHub",
    "section": "Why use Git and GitHub?",
    "text": "Why use Git and GitHub?\n\nSharing.\nCollaborating.\nVersion control.\n\nWe focus on the sharing aspects of Git and GitHub, but introduce some of the basics that permit you to collaborate and use version control."
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-git",
    "href": "slides/productivity/04-git.html#what-is-git",
    "title": "Git and GitHub",
    "section": "What is Git?",
    "text": "What is Git?"
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-github",
    "href": "slides/productivity/04-git.html#what-is-github",
    "title": "Git and GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\n\nDescribed a social network for software developers.\nBasically, it’s a service that hosts the remote repository (repo) on the web.\nThis facilitates collaboration and sharing greatly."
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-github-1",
    "href": "slides/productivity/04-git.html#what-is-github-1",
    "title": "Git and GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\nThere many other features such as\n\nRecognition system: reward, badges and stars.\nYou can host web pages, like the class notes for example.\nPermits contributions via forks and pull requests.\nIssue tracking\nAutomation tools."
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-github-2",
    "href": "slides/productivity/04-git.html#what-is-github-2",
    "title": "Git and GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\n\nThe main tool behind GitHub is Git.\nSimilar to how the main tool behind RStudio is R."
  },
  {
    "objectID": "slides/productivity/04-git.html#github-accounts",
    "href": "slides/productivity/04-git.html#github-accounts",
    "title": "Git and GitHub",
    "section": "GitHub accounts",
    "text": "GitHub accounts\n\nPick a professional sounding name.\nConsider adding a profile README.md.\nInstructions are here.\nExample here."
  },
  {
    "objectID": "slides/productivity/04-git.html#repositories",
    "href": "slides/productivity/04-git.html#repositories",
    "title": "Git and GitHub",
    "section": "Repositories",
    "text": "Repositories\n\nWe are ready to create a GitHub repository (repo).\nYou will have at least two copies of your code: one on your computer and one on GitHub.\nIf you add collaborators to this repo, then each will have a copy on their computer.\nThe GitHub copy is considered the main (previously called master) copy that everybody syncs to.\nGit will help you keep all the different copies synced."
  },
  {
    "objectID": "slides/productivity/04-git.html#repositories-1",
    "href": "slides/productivity/04-git.html#repositories-1",
    "title": "Git and GitHub",
    "section": "Repositories",
    "text": "Repositories\n\nLet’s go make one on GitHub…\nThen create a directory on your computer, this will be the local repo, and connect it to the Github repository.\nFirst copy and paste the location of your git repository. It should look something like this:\n\nhttps://github.com/your-username/your-repo-name.git"
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github",
    "href": "slides/productivity/04-git.html#connect-git-and-github",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nWhen accessing GitHub you need credentials to verify your identity.\nThere are two ways to connect: HTTPS or SSH, each requiring different credentials.\nWe recommend using HTTPS, which uses a Personal Access Token (PAT).\nNote that your GitHub website password isn’t your access token."
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-1",
    "href": "slides/productivity/04-git.html#connect-git-and-github-1",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nDetailed instructions are here.\nCarefully follow the instructions provided by GitHub.\nWhen setting permissions for the token, choose non-expiring and select the repo option in the scopes section.\nOnce you complete these steps, GitHub will display your token—a lengthy string of characters.\nImmediately copy this token to your clipboard. This is the only time GitHub will show it to you."
  },
  {
    "objectID": "slides/productivity/04-git.html#generate-a-token",
    "href": "slides/productivity/04-git.html#generate-a-token",
    "title": "Git and GitHub",
    "section": "Generate a token:",
    "text": "Generate a token:\n\nFor security, save this token in a password manager. This ensures you can access it if needed later on.\nWhen git prompts you to enter your password, paste the token you’ve copied. After this, password prompts should no longer appear.\nIf you ever need the token again, retrieve it from your password manager.\n\nMore details available from Happy Git and GitHub for the use."
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-2",
    "href": "slides/productivity/04-git.html#connect-git-and-github-2",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nThe next step is to let Git know who we are on Github.\nTo to this type the following two commands in our terminal window:\n\n\ngit config --global user.name \"Your Name\"\ngit config --global user.mail \"your@email.com\""
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-3",
    "href": "slides/productivity/04-git.html#connect-git-and-github-3",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nThis will change the Git configuration in way that anytime you use Git, it will know this information.\nNote that you need to use the email account that you used to open your GitHub account."
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-4",
    "href": "slides/productivity/04-git.html#connect-git-and-github-4",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\nTo connect working directory to the GitHub repo\n\ninitialize the directory:\n\n\ngit init\n\n\nLet Git know what is the remote repository.\n\n\ngit remote add origin &lt;remote-url&gt;\n\nNow the two are connected.\n\n\n\n\n\n\nNote\n\n\norigin is a nickname we will use for the remote. We can call it something else, but everybody calls it origin so best to stick with that."
  },
  {
    "objectID": "slides/productivity/04-git.html#overview-of-git",
    "href": "slides/productivity/04-git.html#overview-of-git",
    "title": "Git and GitHub",
    "section": "Overview of Git",
    "text": "Overview of Git\nThe main actions in Git are to:\n\npull changes from the remote repo.\nadd files, or as we say in the Git lingo stage files.\ncommit changes to the local repo.\npush changes to the remote repo."
  },
  {
    "objectID": "slides/productivity/04-git.html#the-four-areas-of-git",
    "href": "slides/productivity/04-git.html#the-four-areas-of-git",
    "title": "Git and GitHub",
    "section": "The four areas of Git",
    "text": "The four areas of Git"
  },
  {
    "objectID": "slides/productivity/04-git.html#status",
    "href": "slides/productivity/04-git.html#status",
    "title": "Git and GitHub",
    "section": "Status",
    "text": "Status\n\n\ngit status filename"
  },
  {
    "objectID": "slides/productivity/04-git.html#add",
    "href": "slides/productivity/04-git.html#add",
    "title": "Git and GitHub",
    "section": "Add",
    "text": "Add\nUse git add to put file to staging area.\n\n\ngit add &lt;filename&gt;\n\nWe say that this file has been staged. Check to see what happened:\n\ngit status &lt;filename&gt;"
  },
  {
    "objectID": "slides/productivity/04-git.html#commit",
    "href": "slides/productivity/04-git.html#commit",
    "title": "Git and GitHub",
    "section": "Commit",
    "text": "Commit\n\nTo move all the staged files to the local repository we use git commit.\n\n\n\ngit commit -m \"must add comment\"\n\n\nOnce committed the files are tracked and a copy of this version is kept going forward.\nThis is like adding V1 to your filename."
  },
  {
    "objectID": "slides/productivity/04-git.html#commit-1",
    "href": "slides/productivity/04-git.html#commit-1",
    "title": "Git and GitHub",
    "section": "Commit",
    "text": "Commit\n\n\n\n\n\n\nNote\n\n\nYou can commit files directly without using add by explicitely writing the files at the end of the commit:\n\n\n\n\ngit commit -m \"must add comment\" &lt;filename&gt;"
  },
  {
    "objectID": "slides/productivity/04-git.html#push",
    "href": "slides/productivity/04-git.html#push",
    "title": "Git and GitHub",
    "section": "Push",
    "text": "Push\n\nTo move to upstream repo we use git push\n\n\n\ngit push -u origin main\n\n\nThe -u flag sets the upstream repo.\nBy using this flag, going forward you can simply use git push to push changes.\nSo going forward we can just type:\n\n\ngit push"
  },
  {
    "objectID": "slides/productivity/04-git.html#push-1",
    "href": "slides/productivity/04-git.html#push-1",
    "title": "Git and GitHub",
    "section": "Push",
    "text": "Push\n\nWhen using git push we need to be careful as if collaborating this will affect the work of others.\nIt might also create a conflict.\n\n\nPosted by andortang on Nothing is Impossible!"
  },
  {
    "objectID": "slides/productivity/04-git.html#fetch",
    "href": "slides/productivity/04-git.html#fetch",
    "title": "Git and GitHub",
    "section": "Fetch",
    "text": "Fetch\n\nTo update our local repository to the remote one we use\n\n\ngit fetch"
  },
  {
    "objectID": "slides/productivity/04-git.html#merge",
    "href": "slides/productivity/04-git.html#merge",
    "title": "Git and GitHub",
    "section": "Merge",
    "text": "Merge\n\nOnce we are sure this is good, we can merge with our local files:\n\n\ngit merge"
  },
  {
    "objectID": "slides/productivity/04-git.html#pull",
    "href": "slides/productivity/04-git.html#pull",
    "title": "Git and GitHub",
    "section": "Pull",
    "text": "Pull\n\nI rarely use fetch and merge and instead use pull which does both of these in one step\n\n\ngit pull"
  },
  {
    "objectID": "slides/productivity/04-git.html#checkout",
    "href": "slides/productivity/04-git.html#checkout",
    "title": "Git and GitHub",
    "section": "Checkout",
    "text": "Checkout\n\nIf you want to pull down a specific file you from the remote repo you can use:\n\n\ngit checkout filename\n\n\nI use this when I make changes but decide I want to go back to original version on remote repo.\n\n\n\n\n\n\n\nWarning\n\n\nIf you have a newer version in your local repository this will create a conflict. It won’t let you do it. If you are sure you want to get rid of your local copy you can remove it and then use checkout."
  },
  {
    "objectID": "slides/productivity/04-git.html#checkout-1",
    "href": "slides/productivity/04-git.html#checkout-1",
    "title": "Git and GitHub",
    "section": "Checkout",
    "text": "Checkout\n\nYou can also use checkout to obtain older version:\n\n\ngit checkout &lt;commit-id&gt; &lt;filename&gt;\n\n\nYou can get the commit-id either on the GitHub webpage or using\n\n\ngit log filename"
  },
  {
    "objectID": "slides/productivity/04-git.html#reset",
    "href": "slides/productivity/04-git.html#reset",
    "title": "Git and GitHub",
    "section": "Reset",
    "text": "Reset\n\nWhat if I commit and realize it was a mistake?\n\n\ngit reset HEAD~1\n\nundos the commit and unstages the files, but keeps your local copies. I use this on very often.\n\nThere are many wasy of using get reset and it covers most scenarios.\nChatGPT and stackoverflow are great resources to learn more."
  },
  {
    "objectID": "slides/productivity/04-git.html#branches",
    "href": "slides/productivity/04-git.html#branches",
    "title": "Git and GitHub",
    "section": "Branches",
    "text": "Branches\n\nWe are just sratching the surface of Git.\nOne advanced feature to be aware of is that you can have several branches, useful for working in parallel or testing stuff out that might not make the main repo.\n\n\nArt by: Allison Horst"
  },
  {
    "objectID": "slides/productivity/04-git.html#branches-1",
    "href": "slides/productivity/04-git.html#branches-1",
    "title": "Git and GitHub",
    "section": "Branches",
    "text": "Branches\n\nWe wont go over this, but we might need to use these two related commands:\n\n\ngit remote -v\ngit brach"
  },
  {
    "objectID": "slides/productivity/04-git.html#clone",
    "href": "slides/productivity/04-git.html#clone",
    "title": "Git and GitHub",
    "section": "Clone",
    "text": "Clone\n\nAnother common command is git clone.\nIt let’s download an entire repo, including version history.\n\n\ngit clone &lt;repo-url&gt;"
  },
  {
    "objectID": "slides/productivity/04-git.html#using-git-in-rstudio",
    "href": "slides/productivity/04-git.html#using-git-in-rstudio",
    "title": "Git and GitHub",
    "section": "Using Git in RStudio",
    "text": "Using Git in RStudio\n\nGo to file, new project, version control, and follow the instructions.\nThen notice the Git tab in the preferences."
  }
]