[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BST 260 Introduction to Data Science",
    "section": "",
    "text": "Preface"
  },
  {
    "objectID": "index.html#instructors",
    "href": "index.html#instructors",
    "title": "BST 260 Introduction to Data Science",
    "section": "Instructors",
    "text": "Instructors\n\nRafael A. Irizarry\nCorri Sept\nNikhil Vytla\nYuan Wang"
  },
  {
    "objectID": "downloading-course-materials.html#associating-an-existing-directory",
    "href": "downloading-course-materials.html#associating-an-existing-directory",
    "title": "Downloading course materials",
    "section": "Associating an existing directory",
    "text": "Associating an existing directory\nIf you already cloned the repository outside of RStudio, you can associate the directory that was created in that step with RStudio. In RStudio, go to File &gt; New Project &gt; Existing Directory, and then navigate / click on the 2024 folder. Then click “Create Project”. Then you can follow step 5 above to open the project when you launch RStudio."
  },
  {
    "objectID": "downloading-course-materials.html#forking-the-repository",
    "href": "downloading-course-materials.html#forking-the-repository",
    "title": "Downloading course materials",
    "section": "Forking the repository",
    "text": "Forking the repository\nAn alternative more advanced way to cloning the directory is creating a fork. Forking a repository on GitHub allows you to create a copy of a project under your own GitHub account. This lets you make changes without affecting the original repository. Here’s how you can fork a repository on GitHub:\n\nLog In to GitHub:\n\nMake sure you are logged in to your GitHub account.\n\nNavigate to the Repository:\n\nGo to the main page of the repository you want to fork: https://github.com/datasciencelabs/2024\n\nClick the ‘Fork’ Button:\n\nIn the top-right corner of the repository’s page, you’ll find the “Fork” button. Click on it.\n\nChoose an Account:\n\nIf you are a member of any organizations, GitHub will ask you where you’d like to fork the repository. Choose your personal account unless you want to fork it to an organization.\n\nWait for the Forking Process to Complete:\n\nGitHub will then create a copy of the repository in your account. You’ll see an animation indicating the process, and once it’s done, you’ll be redirected to the forked repository under your account.\n\nClone Your Forked Repository:\n\nTo work with the forked repository on your local machine, you can clone it. Navigate to the main page of your forked repo, click on the green “Code” button, copy the URL, and then use the following command in your terminal or command prompt:\ngit clone [URL_you_copied]\n\n\nYou can continue to update the forked repository by doing the following:\n\nNavigate to Your Local Repository:\n\nOpen a terminal or command prompt.\nNavigate to the directory where you have your forked repository.\n\nAdd the Original Repository as an Upstream Remote:\n\nUse the following command to add the original repository as an upstream remote:\ngit remote add upstream [URL_of_original_repository]\nFor example, if the original repository’s URL is https://github.com/original-owner/original-repo.git, the command would be:\ngit remote add upstream https://github.com/original-owner/original-repo.git\n\nFetch Changes from the Upstream:\n\nUse the following command to fetch changes from the upstream:\ngit fetch upstream\n\nMerge Changes into Your Local Branch:\n\nFirst, ensure you are on the branch into which you want to merge the upstream changes, typically the main or master branch:\ngit checkout main\nThen, merge the changes from the upstream’s main or master branch:\ngit merge upstream/main\n\nPush Changes to Your Forked Repository on GitHub (if needed):\n\nIf you want these changes to reflect in your GitHub fork, push them:\ngit push origin main\n\n\nNow your fork is synchronized with the original repository. Whenever you want to pull in new changes from the original repository in the future, you just need to repeat steps 3-5.\nTo avoid conflicts you sill want to avoid editing the course notes files and instead make copies."
  },
  {
    "objectID": "syllabus.html#general-information",
    "href": "syllabus.html#general-information",
    "title": "Syllabus",
    "section": "General Information",
    "text": "General Information\n\nBST 260 Introduction to Data Science\nKresge 202A and 202B (HSPH)\nMonday 09:45 AM - 11:15 AM; Wednesday 09:45 AM - 11:15 AM\nLecture notes: https://datasciencelabs.github.io/2024/\nSlack channel: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922"
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\nWe assume students have taken or are taking a probability and statistics course and have basic programming skills.\nStudents not matriculated in an HSPH Biostatistics graduate program (HDS SM60, BIO SM80 / SM60 / SM1, and CBQG SM80) will be required to score at least 90% on a basic math and programming diagnostic test to enroll in the course. If you are in a HSPH Biostatistics graduate program and you score less than 90% we will contact you to offer supplementary resource to help you be prepared for the course."
  },
  {
    "objectID": "syllabus.html#textbooks",
    "href": "syllabus.html#textbooks",
    "title": "Syllabus",
    "section": "Textbooks",
    "text": "Textbooks\n\nIntroduction to Data Science: Data Wrangling and Visualization with R\nIntroduction to Data Science:: Statistics and Prediction Algorithms Through Case Studies"
  },
  {
    "objectID": "syllabus.html#course-description",
    "href": "syllabus.html#course-description",
    "title": "Syllabus",
    "section": "Course Description",
    "text": "Course Description\nThis course introduces the following:\n\nUNIX/Linux shell.\nReproducible document preparation with RStudio, knitr, and markdown\nVersion control with git and GitHub\nR programming\nData wrangling with dplyr and data.table\nData visualization with ggplot2\n\nWe also demonstrate how the following concepts are applied in data analysis:\n\nProbability theory.\nStatistical inference and modeling\nHigh-dimensional data techniques\nMachine learning\n\nWe do not cover the theory and details of these methods as they are covered in other courses.\nThroughout the course, we use motivating case studies and data analysis problem sets based on challenges similar to those you encounter in scientific research."
  },
  {
    "objectID": "syllabus.html#weekly-course-structure",
    "href": "syllabus.html#weekly-course-structure",
    "title": "Syllabus",
    "section": "Weekly Course Structure",
    "text": "Weekly Course Structure\n\nMonday lectures: we describe the concerts, methods, and skills needed for problem sets.\nWednesday labs: We work together on problem sets.\nFriday: problem sets due (see Key dates)\n\nPlease ensure that you read the chapters listed in the syllabus before each Monday. The lectures are designed with the assumption that you have completed the readings, enabling us to dive deeper into the nuances of data analysis and coding.\nLectures will not be recorded.\nWe will have a Slack workspace for you to ask questions during and after class."
  },
  {
    "objectID": "syllabus.html#grade-distribution",
    "href": "syllabus.html#grade-distribution",
    "title": "Syllabus",
    "section": "Grade Distribution",
    "text": "Grade Distribution\n\n\n\nComponent\nWeight\n\n\n\n\n10 problem sets\n50%\n\n\nMidterm 1\n10%\n\n\nMidterm 2\n20%\n\n\nFinal project\n20%"
  },
  {
    "objectID": "syllabus.html#problem-sets",
    "href": "syllabus.html#problem-sets",
    "title": "Syllabus",
    "section": "Problem Sets",
    "text": "Problem Sets\nProblem sets will be due every week or every other week, depending on difficulty.\nSome problem sets include open ended questions that will be difficult to answer on your own. We will be working on these together during Wednesday labs. We also offer office hours where you can get help with unanswered questions.\nProblem sets must be submitted via GiHub. Students are required to have a GitHub account and create a repository for the course. We will be providing further instructions during the first lab.\n10% of the total points for the problem sets will be deducted for every late day. Students can have a total of 4 late days without penalty during the entire semester. No need to provide a written excuse. Providing an excuse does not give you more days unless an accommodation is requested and approved by the Office of Student Affairs (this includes COVID).\nProblem set submissions need to be completely reproducible Quarto documents.If your Quarto file does not compile it will be considered a late day, and you will be notified and will need to resubmit a Quarto file that does compile. You will be deducted further late days for every day it takes for you to turn in a Quarto file that does knit. You are required to check emails that come through the Canvas system, as this the only way we will communicate problems with your problem sets."
  },
  {
    "objectID": "syllabus.html#midterm-policy",
    "href": "syllabus.html#midterm-policy",
    "title": "Syllabus",
    "section": "Midterm Policy",
    "text": "Midterm Policy\nBoth midterms are closed book, no internet, and in-class. You are expected to complete them in 1 hour.\nQuestions will be drawn mostly or entirely from the problem sets.\nPlease make sure you can come to class on the midterm dates provided in the Key Dates table below. If you miss the exam, you will need approval from the Office of Student Affairs to receive a makeup. All make-up exams will be completely different from the in-class ones."
  },
  {
    "objectID": "syllabus.html#final-project",
    "href": "syllabus.html#final-project",
    "title": "Syllabus",
    "section": "Final Project",
    "text": "Final Project\nFor your final project we ask that you turn in a 4-6 page report using data to answer a public health related question. You can chose from one of the following:\n\nBased on state-level data, how effective where vaccines against SARS-CoV-2 reported cases and COVID-19 hospitalizations and deaths, and vaccination rates.\nWhat was the excess mortality after Hurricane María in Puerto Rico? Where different age groups affected differently?\n\nOptionally, you can select a question that align with your ongoing research. This way, it can be directly beneficial to your work. This will require prior approval from the instructor by October 25.\nYet another option is to build a interactive webpage with poll-driven predictions for the 2024 US elections. Note this will be more challenging as we will not cover tools for interactive webpages until the last week of class (time permitting).\nNote: You should start working on your project after the first midterm. Do not wait until the last week. Teaching staff will be available during office hours."
  },
  {
    "objectID": "syllabus.html#chatgpt-policy",
    "href": "syllabus.html#chatgpt-policy",
    "title": "Syllabus",
    "section": "ChatGPT Policy",
    "text": "ChatGPT Policy\nYou can use ChatGPT however you want. Do remember you won’t be able to use it during the midterms."
  },
  {
    "objectID": "syllabus.html#key-dates---subject-to-change-after-first-week-of-class",
    "href": "syllabus.html#key-dates---subject-to-change-after-first-week-of-class",
    "title": "Syllabus",
    "section": "Key Dates - Subject to Change After First Week of Class",
    "text": "Key Dates - Subject to Change After First Week of Class\n\n\n\n\n\n\n\nDate\nEvent\n\n\n\n\nOct 14\nNo class: Indigenous Peoples Day\n\n\nOct 16\nMidterm 1\n\n\nOct 23\nStart final project. Obtain approval if you want to do personal project instead.\n\n\nNov 11\nNo class: Veterans’ Day\n\n\nNov 25\nMidterm 2\n\n\nNov 27\nNo class: Thanksgiving Recess Begins\n\n\nDec 20\nFinal Project due"
  },
  {
    "objectID": "syllabus.html#preliminary-schedule",
    "href": "syllabus.html#preliminary-schedule",
    "title": "Syllabus",
    "section": "Preliminary Schedule",
    "text": "Preliminary Schedule\n\n\n\nDates\nTopic\nLinks to readings and notes\n\n\n\n\nSep 04\nProductivity Tools\nInstalling R and RStudio on Windows or Mac, Getting Started Unix\n\n\nSep 09\nProductivity Tools\nRStudio Projects, Quarto Git and GitHub\n\n\nSep 10\nProblem Set 1 due\nDifficulty: easy\n\n\nSep 11\nR\nR Basics, Vectorization\n\n\nSep 13\nProblem Set 2 due\nDifficulty: easy\n\n\nSep 16, Sep 18\nR\ndplyr, dates and times, ggplot2\n\n\nSep 19\nProblem Set 3 due\nDifficulty: easy\n\n\nSep 23, Sep 25\nWrangling\nImporting data Locales Reshaping Data, Joining Tables, Extracting data from the web\n\n\nSep 26\nProblem Set 4 due\nDifficulty: medium\n\n\nSep 30, Oct 02\nData visualization\nDistributions, Dataviz Principles\n\n\nOct 04\nProblem Set 5 due\nDifficulty: medium\n\n\nOct 07, Oct 09\nProbability\nMonte Carlo, Random Variables & CLT\n\n\nOct 11\nProblem Set 6 due\nDifficulty: easy\n\n\nOct 14\nNo class\nIndigenous Peoples Day\n\n\nOct 16\nMidterm 1\nCovers material from Sep 04-Oct 11\n\n\nOct 21, Oct 23\nInference\nParameters & Estimates, Confidence Intervals\n\n\nOct 28, Oct 30\nStatistical Models\nData-driven Models, Bayesian Statistics, Hierarchical Models\n\n\nNov 01\nProblem Set 7 due\nDifficulty: hard\n\n\nNov 04, Nov 06\nLinear models\nRegression, Multivariate Regression\n\n\nNov 11\nNo class\nVeterans’ Day\n\n\nNov 13\nLinear models\nMeasurement Error Models, Treatment Effect Models, Association Tests, Association Not Causation\n\n\nNov 15\nProblem Set 8 due\nDifficulty: hard\n\n\nNov 18, Nov 20\nHigh dimensional data\nMatrices in R, Applied Linear Algebra, Dimension Reduction\n\n\nNov 22\nProblem Set 9 due\nDifficulty: easy\n\n\nNov 25\nMidterm 2\nCovers material from Sep 04-Nov 22\n\n\nNov 27\nNo class\nThanksgiving Recess Begins\n\n\nDec 02, Dec 04\nMachine Learning\nNotation and terminology, Evaluation Metrics, conditional probabilities, smoothing\n\n\nDec 09, Dec 11\nMachine Learning\nResampling methods, ML algorithms, ML in practice\n\n\nDec 13\nProblem Set 10 due\nDifficulty: hard\n\n\nDec 16, Dec 18\nOther topics\n\n\n\nDec 20\nFinal Project due"
  },
  {
    "objectID": "first-day.html",
    "href": "first-day.html",
    "title": "1  First day",
    "section": "",
    "text": "Introdcution\nUnix\nQuart qmd html"
  },
  {
    "objectID": "psets.html",
    "href": "psets.html",
    "title": "Problem sets",
    "section": "",
    "text": "Problem set 1"
  },
  {
    "objectID": "lectures/02-quarto.html#r-and-rstudio",
    "href": "lectures/02-quarto.html#r-and-rstudio",
    "title": "2  Quarto",
    "section": "2.1 R and RStudio",
    "text": "2.1 R and RStudio\nBefore introducing Quarto we need R installed. We highly recommend using RStudio as an IDE for this course. We will be using it in lectures.\n\n2.1.1 Installation\n\nInstall the latest version (4.3.1) of R\nInstall RStudio\n\n\n\n\nrstudio\n\n\n\n\n2.1.2 Basics\nLet’s try a few things together:\n\nOpen a new R script file\nLearn tab complete\nRun commands while editing scripts\nRun the entire script\nMake a plot\nChange options to never save workspace.\n\n\n\n2.1.3 Projects\n\nStart new project in exciting directory.\nStart new project in new directory.\nChange projects."
  },
  {
    "objectID": "lectures/02-quarto.html#markdown",
    "href": "lectures/02-quarto.html#markdown",
    "title": "2  Quarto",
    "section": "2.2 Markdown",
    "text": "2.2 Markdown\nStart a new Quarto.\n\n2.2.1 Type of editor\n\nSource - See the actual code (WYSIWYG).\nVisual - Partial preview of final document.\n\n\n\n2.2.2 The header\nAt the top you see:\n---\ntitle: \"Untitled\"\n---\nThe things between the --- is the YAML header.\nYou will see it used throughout the Quarto guide.\n\n\n2.2.3 Text formating\nitalics, bold, bold italics\nstrikethrough\ncode\n\n\n2.2.4 Headings\n# Header 1\n## Header 2\n### Header 3\nand so on\n\n\n2.2.5 Links\nJust the link: https://quarto.org/docs/guide/\nLinked text: This is the link to Quarto Guide\n\n\n2.2.6 Images\n\n\n\nFirst week of data science\n\n\nThe image can also be a local file.\n\n\n2.2.7 Lists\nBullets:\n\nbullet 1\n\nsub-bullet 1\nsub-bullet 2\n\nbullet 2\n\nOrdered list\n\nItem 1\nItem 2\n\n\n\n2.2.8 Equations\nInline: \\(Y_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i\\)\nDisplay math:\n\\[\n\\mathbf{Y} = \\mathbf{X\\beta} + \\mathbf{\\varepsilon}\n\\]"
  },
  {
    "objectID": "lectures/02-quarto.html#computations",
    "href": "lectures/02-quarto.html#computations",
    "title": "2  Quarto",
    "section": "2.3 Computations",
    "text": "2.3 Computations\nThe main reason we use Quarto is because we can include code and execute the code when compiling the document. In R we refer to them as R chunks.\nTo add your own R chunks, you can type the characters above quickly with the key binding command-option-I on the Mac and Ctrl-Alt-I on Windows.\nThis applies to plots as well; the plot will be placed in that position. We can write something like this:\n\nx &lt;- 1\ny &lt;- 2\nx + y\n\n[1] 3\n\n\nBy default, the code will show up as well. To avoid having the code show up, you can use an argument, which are annotated with |# To avoid showing code in the final document, you can use the argument echo: FALSE. For example:\n\n\n[1] 3\n\n\nWe recommend getting into the habit of adding a label to the R code chunks. This will be very useful when debugging, among other situations. You do this by adding a descriptive word like this:\n\nx &lt;- 1\ny &lt;- 2\nx + y\n\n[1] 3\n\n\n\n2.3.1 Academic reports\nQuarto has many nice features that facilitates publishing academic reports in this guide\n\n\n2.3.2 Global execution options\nIf you want to apply an option globally, you can include in the header, under execute. For example adding the following line to the header make code not show up, by default:\nexecute:\n  echo: false\n\n\n2.3.3 More on markdown\nThere is a lot more you can do with R markdown. We highly recommend you continue learning as you gain more experience writing reports in R. There are many free resources on the internet including:\n\nRStudio’s tutorial: https://quarto.org/docs/get-started/hello/rstudio.html\nThe knitR book: https://yihui.name/knitr/\nPandoc’s Markdown in-depth documentation"
  },
  {
    "objectID": "lectures/02-quarto.html#sec-knitr",
    "href": "lectures/02-quarto.html#sec-knitr",
    "title": "2  Quarto",
    "section": "2.4 knitR",
    "text": "2.4 knitR\nWe use the knitR package to compile Quarto. The specific function used to compile is the knit function, which takes a file name as input. RStudio provides the Render button that makes it easier to compile the document.\nNote that the first time you click on the Render button, a dialog box may appear asking you to install packages you need. Once you have installed the packages, clicking Render will compile your Quarto file and the resulting document will pop up.\nThis particular example produces an html document which you can see in your working directory. To view it, open a terminal and list the files. You can open the file in a browser and use this to present your analysis. You can also produce a PDF or Microsoft document by changing:\nformat: html to format: pdf or format: docx. We can also produce documents that render on GitHub using format: gfm, which stands for GitHub flavored markdown, a convenient way to share your reports."
  }
]