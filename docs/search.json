[
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "BST 260 Introduction to Data Science\nKresge 202A and 202B (HSPH)\nMonday 09:45 AM - 11:15 AM; Wednesday 09:45 AM - 11:15 AM\nLecture notes: https://datasciencelabs.github.io/2024/\nSlack workspace: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#general-information",
    "href": "syllabus.html#general-information",
    "title": "Syllabus",
    "section": "",
    "text": "BST 260 Introduction to Data Science\nKresge 202A and 202B (HSPH)\nMonday 09:45 AM - 11:15 AM; Wednesday 09:45 AM - 11:15 AM\nLecture notes: https://datasciencelabs.github.io/2024/\nSlack workspace: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\nWe assume students have taken or are taking a probability and statistics course and have basic programming skills.\nStudents not matriculated in an HSPH Biostatistics graduate program (HDS SM60, BIO SM80 / SM60 / SM1, and CBQG SM80) will be required to score at least 90% on a basic math and programming diagnostic test to enroll in the course. If you are in a HSPH Biostatistics graduate program and you score less than 90% we will contact you to offer supplementary resource to help you be prepared for the course.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#textbooks",
    "href": "syllabus.html#textbooks",
    "title": "Syllabus",
    "section": "Textbooks",
    "text": "Textbooks\n\nIntroduction to Data Science: Data Wrangling and Visualization with R\nIntroduction to Data Science: Statistics and Prediction Algorithms Through Case Studies",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-description",
    "href": "syllabus.html#course-description",
    "title": "Syllabus",
    "section": "Course Description",
    "text": "Course Description\nThis course introduces the following:\n\nUNIX/Linux shell\nReproducible document preparation with RStudio, knitr, and markdown\nVersion control with git and GitHub\nR programming\nData wrangling with dplyr and data.table\nData visualization with ggplot2\n\nWe also demonstrate how the following concepts are applied in data analysis:\n\nProbability theory\nStatistical inference and modeling\nHigh-dimensional data techniques\nMachine learning\n\nWe do not cover the theory and details of these methods as they are covered in other courses.\nThroughout the course, we use motivating case studies and data analysis problem sets based on challenges similar to those you encounter in scientific research.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#weekly-course-structure",
    "href": "syllabus.html#weekly-course-structure",
    "title": "Syllabus",
    "section": "Weekly Course Structure",
    "text": "Weekly Course Structure\n\nMonday lectures: We describe the concerts, methods, and skills needed for problem sets.\nWednesday labs: We work together on problem sets.\nFriday: Problem sets due (see Key Dates and Problem Sets).\n\nPlease ensure that you read the chapters listed in the syllabus before each Monday. The lectures are designed with the assumption that you have completed the readings, enabling us to dive deeper into the nuances of data analysis and coding.\nLectures will not be recorded.\nWe will have a Slack workspace for you to ask questions during and after class.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#grade-distribution",
    "href": "syllabus.html#grade-distribution",
    "title": "Syllabus",
    "section": "Grade Distribution",
    "text": "Grade Distribution\n\n\n\nComponent\nWeight\n\n\n\n\n10 problem sets\n50%\n\n\nMidterm 1\n10%\n\n\nMidterm 2\n20%\n\n\nFinal project\n20%",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#problem-sets",
    "href": "syllabus.html#problem-sets",
    "title": "Syllabus",
    "section": "Problem Sets",
    "text": "Problem Sets\nProblem sets will be due every week or every other week, depending on difficulty. They will be due at 11:59 PM on the day denoted on the Problem Sets page.\nSome problem sets include open ended questions that will be difficult to answer on your own. We will be working on these together during Wednesday labs. We also offer office hours where you can get help with unanswered questions.\nProblem sets must be submitted via GitHub. Students are required to have a GitHub account and create a repository for the course. We will be providing further instructions during the first lab.\n10% of the total points for the problem sets will be deducted for every late day. Students can have a total of 4 late days without penalty during the entire semester. No need to provide a written excuse. Providing an excuse does not give you more days unless an accommodation is requested and approved by the Office of Student Affairs (this includes COVID).\nProblem set submissions need to be completely reproducible Quarto documents. If your Quarto file does not compile it will be considered a late day, and you will be notified and will need to resubmit a Quarto file that does compile. You will be deducted further late days for every day it takes for you to turn in a Quarto file that does knit. You are required to check emails that come through the Canvas system, as this the only way we will communicate problems with your problem sets.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#midterm-policy",
    "href": "syllabus.html#midterm-policy",
    "title": "Syllabus",
    "section": "Midterm Policy",
    "text": "Midterm Policy\nBoth midterms are closed book, no internet, and in-class. You are expected to complete them in 1 hour.\nQuestions will be drawn mostly or entirely from the problem sets.\nPlease make sure you can come to class on the midterm dates provided in the Key Dates table below. If you miss the exam, you will need approval from the Office of Student Affairs to receive a makeup. All make-up exams will be completely different from the in-class ones.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#final-project",
    "href": "syllabus.html#final-project",
    "title": "Syllabus",
    "section": "Final Project",
    "text": "Final Project\nFor your final project we ask that you turn in a 4-6 page report using data to answer a public health related question. You can chose from one of the following:\n\nBased on state-level data, how effective where vaccines against SARS-CoV-2 reported cases and COVID-19 hospitalizations and deaths, and vaccination rates.\nWhat was the excess mortality after Hurricane María in Puerto Rico? Where different age groups affected differently?\n\nOptionally, you can select a question that align with your ongoing research. This way, it can be directly beneficial to your work. This will require prior approval from the instructor by October 25.\nYet another option is to build a interactive webpage with poll-driven predictions for the 2024 US elections. Note this will be more challenging as we will not cover tools for interactive webpages until the last week of class (time permitting).\nNote: You should start working on your project after the first midterm. Do not wait until the last week. Teaching staff will be available during office hours.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#chatgpt-policy",
    "href": "syllabus.html#chatgpt-policy",
    "title": "Syllabus",
    "section": "ChatGPT Policy",
    "text": "ChatGPT Policy\nYou can use ChatGPT however you want. Do remember you won’t be able to use it during the midterms.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#key-dates",
    "href": "syllabus.html#key-dates",
    "title": "Syllabus",
    "section": "Key Dates",
    "text": "Key Dates\n\n\n\n\n\n\n\nDate\nEvent\n\n\n\n\nSep 10\nPset 1 due\n\n\nSep 13\nPset 2 due\n\n\nOct 14\nNo class: Indigenous Peoples’ Day\n\n\nOct 16\nMidterm 1: covers material from Sep 04-Oct 11\n\n\nOct 23\nStart final project. Obtain approval if you want to do a personal project instead.\n\n\nNov 11\nNo class: Veterans’ Day\n\n\nNov 25\nMidterm 2: cover material from Sep 04-Nov 22\n\n\nNov 27\nNo class: Thanksgiving Recess Begins\n\n\nDec 20\nFinal Project due",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "slides/productivity/01-unix.html#naming-convention",
    "href": "slides/productivity/01-unix.html#naming-convention",
    "title": "Unix",
    "section": "Naming convention",
    "text": "Naming convention\n\nIn general you want to name your files in a way that is related to their contents and specifies how they relate to other files.\nThe Smithsonian Data Management Best Practices has “five precepts of file naming and organization”"
  },
  {
    "objectID": "slides/productivity/01-unix.html#five-precepts-of-file-naming-and-organization",
    "href": "slides/productivity/01-unix.html#five-precepts-of-file-naming-and-organization",
    "title": "Unix",
    "section": "Five precepts of file naming and organization",
    "text": "Five precepts of file naming and organization\n\nHave a distinctive, human-readable name that gives an indication of the content.\nFollow a consistent pattern that is machine-friendly.\nOrganize files into directories (when necessary) that follow a consistent pattern.\nAvoid repetition of semantic elements among file and directory names.\nHave a file extension that matches the file format (no changing extensions!)\n\nFor specific recommendations we highly recommend you follow The Tidyverse Style Guide"
  },
  {
    "objectID": "slides/productivity/01-unix.html#the-terminal",
    "href": "slides/productivity/01-unix.html#the-terminal",
    "title": "Unix",
    "section": "The terminal",
    "text": "The terminal\n\nInstead of clicking, dragging, and dropping to organize our files and folders, we will be typing Unix commands into the terminal.\nThe way we do this is similar to how we type commands into the R console, but instead of generating plots and statistical summaries, we will be organizing files on our system."
  },
  {
    "objectID": "slides/productivity/01-unix.html#the-terminal-1",
    "href": "slides/productivity/01-unix.html#the-terminal-1",
    "title": "Unix",
    "section": "The terminal",
    "text": "The terminal\n\nThe terminal is integrated into Mac and Linux systems, but Windows users will have to install an emulator. Once you have a terminal open, you can start typing commands.\nYou should see a blinking cursor at the spot where what you type will show up. This position is called the command line."
  },
  {
    "objectID": "slides/productivity/01-unix.html#the-home-directory",
    "href": "slides/productivity/01-unix.html#the-home-directory",
    "title": "Unix",
    "section": "The home directory",
    "text": "The home directory"
  },
  {
    "objectID": "slides/productivity/01-unix.html#windows",
    "href": "slides/productivity/01-unix.html#windows",
    "title": "Unix",
    "section": "Windows",
    "text": "Windows\nThe structure on Windows looks something like this:"
  },
  {
    "objectID": "slides/productivity/01-unix.html#mac",
    "href": "slides/productivity/01-unix.html#mac",
    "title": "Unix",
    "section": "Mac",
    "text": "Mac\nAnd on MacOS something like this:"
  },
  {
    "objectID": "slides/productivity/01-unix.html#working-directory",
    "href": "slides/productivity/01-unix.html#working-directory",
    "title": "Unix",
    "section": "Working directory",
    "text": "Working directory\n\nThe working directory is the directly you are currently in. Later we will see that we can move to other directories using the command line.\nIt’s similar to clicking on folders.\nYou can see your working directory using the Unix command pwd\n\nIn R we can use getwd()"
  },
  {
    "objectID": "slides/productivity/01-unix.html#paths",
    "href": "slides/productivity/01-unix.html#paths",
    "title": "Unix",
    "section": "Paths",
    "text": "Paths\n\nThis string returned in previous command is full path to working directory.\nThe full path to your home directory is stored in an environment variable.\nYou can see it like this echo $HOME"
  },
  {
    "objectID": "slides/productivity/01-unix.html#paths-1",
    "href": "slides/productivity/01-unix.html#paths-1",
    "title": "Unix",
    "section": "Paths",
    "text": "Paths\n\nIn Unix, we use the shorthand ~ as a nickname for your home directory\nExample: the full path for docs (in image above) can be written like this ~/docs.\nMost terminals will show the path to your working directory right on the command line.\nLet’s open a terminal window and see if the working directory is listed."
  },
  {
    "objectID": "slides/productivity/01-unix.html#unix-commands",
    "href": "slides/productivity/01-unix.html#unix-commands",
    "title": "Unix",
    "section": "Unix commands",
    "text": "Unix commands\n\nls: Listing directory content\nmkdir and rmdir: make and remove a directory\ncd: navigating the filesystem by changing directories\npwd: see your workding directory\nmv: moving files\ncp: copying files\nrm: removing files\nless: looking at a file"
  },
  {
    "objectID": "slides/productivity/01-unix.html#autocomplete",
    "href": "slides/productivity/01-unix.html#autocomplete",
    "title": "Unix",
    "section": "Autocomplete",
    "text": "Autocomplete\n\nIn Unix you can auto-complete by hitting tab.\nThis means that we can type cd d then hit tab.\nUnix will either auto-complete if docs is the only directory/file starting with d or show you the options.\nTry it out! Using Unix without auto-complete will make it unbearable."
  },
  {
    "objectID": "slides/productivity/01-unix.html#text-editors",
    "href": "slides/productivity/01-unix.html#text-editors",
    "title": "Unix",
    "section": "Text editors",
    "text": "Text editors\nCommand-line text editors are essential tools, especially for system administrators, developers, and other users who frequently work in a terminal environment. Here are some of the most popular command-line text editors:\n\nNano\nPico\nVi or Vim\nEmacs"
  },
  {
    "objectID": "slides/productivity/01-unix.html#other-very-useful-commands-you-should-learn",
    "href": "slides/productivity/01-unix.html#other-very-useful-commands-you-should-learn",
    "title": "Unix",
    "section": "Other very useful commands you should learn",
    "text": "Other very useful commands you should learn\n\ncurl - download data from the internet.\ntar - archive files and subdirectories of a directory into one file.\nssh - connect to another computer.\nfind - search for files by filename in your system.\ngrep - search for patterns in a file.\nawk/sed - These are two very powerful commands that permit you to find specific strings in files and change them."
  },
  {
    "objectID": "slides/productivity/01-unix.html#resources",
    "href": "slides/productivity/01-unix.html#resources",
    "title": "Unix",
    "section": "Resources",
    "text": "Resources\nTo get started.\n\nhttps://www.codecademy.com/learn/learn-the-command-line\nhttps://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-1\nhttps://www.coursera.org/learn/unix"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#the-header",
    "href": "slides/productivity/03-quarto.html#the-header",
    "title": "Quarto",
    "section": "The header",
    "text": "The header\n\nStart a new empty document.\nAt the top you see:\n\n\n---\ntitle: \"Untitled\"\n---\n\n\nThe things between the --- is the YAML header.\nYou will see it used throughout the Quarto guide."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#text-formating",
    "href": "slides/productivity/03-quarto.html#text-formating",
    "title": "Quarto",
    "section": "Text formating",
    "text": "Text formating\n*italics* or _italics_ = italics\n**bold** = bold\n***bold italics*** = bold italics\n~~strikethrough~~ = strikethrough\n`code` = code"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#text-formating-1",
    "href": "slides/productivity/03-quarto.html#text-formating-1",
    "title": "Quarto",
    "section": "Text formating",
    "text": "Text formating\nThis:\n```\nline 1\nline 2\n```\nshows code chunks:\nline 1\nline 2"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#links",
    "href": "slides/productivity/03-quarto.html#links",
    "title": "Quarto",
    "section": "Links",
    "text": "Links\n\nShow the link and add link: &lt;https://quarto.org/docs/guide/&gt;\nAdd link to text: [Quarto Guide](https://quarto.org/docs/guide/)\n\nLooks like this:\nhttps://quarto.org/docs/guide/\nQuarto Guide"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#images",
    "href": "slides/productivity/03-quarto.html#images",
    "title": "Quarto",
    "section": "Images",
    "text": "Images\n![My caption](https://datasciencedojo.com/wp-content/uploads/11-1.jpg)\nShows the plot and caption:\n\nMy captionThe image can also be a local file."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#lists",
    "href": "slides/productivity/03-quarto.html#lists",
    "title": "Quarto",
    "section": "Lists",
    "text": "Lists\nBullets:\n-   bullet 1\n    -   sub-bullet 1\n    -   sub-bullet 2\n-   bullet 2\nLooks like this:\n\nbullet 1\n\nsub-bullet 1\nsub-bullet 2\n\nbullet 2"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#lists-1",
    "href": "slides/productivity/03-quarto.html#lists-1",
    "title": "Quarto",
    "section": "Lists",
    "text": "Lists\nOrdered list:\n1.  Item 1\n2.  Item 2\nLooks like this:\n\nItem 1\nItem 2"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#equations",
    "href": "slides/productivity/03-quarto.html#equations",
    "title": "Quarto",
    "section": "Equations",
    "text": "Equations\n\n\n\n\n\n\n\nNote\n\n\nIf you are going to write technical report, you definitely want to learn LaTeX.\nOnce you learn LaTeX you will never want to use an equation editor again.\nThere are many online tutorials, like this one.\nChatGPT is great at LaTeX"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#equations-1",
    "href": "slides/productivity/03-quarto.html#equations-1",
    "title": "Quarto",
    "section": "Equations",
    "text": "Equations\nExamples:\n\nInline: $Y_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i$ looks like this \\(Y_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i\\)\nDisplay math:\n\n$$\n\\mathbf{Y} = \\mathbf{X\\beta} + \\mathbf{\\varepsilon}\n$$\nlooks like this:\n\\[\n\\mathbf{Y} = \\mathbf{X\\beta} + \\mathbf{\\varepsilon}\n\\]"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations",
    "href": "slides/productivity/03-quarto.html#computations",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nThe main reason we use Quarto is because we can include code and execute the code when compiling the document.\nIn R we refer to them as R chunks.\nThis applies to plots as well; the plot will be placed in that position.\n\n\n\n\n\n\n\nNote\n\n\nTo add your own R chunks, you can type the characters above quickly with the key binding command-option-I on the Mac and Ctrl-Alt-I on Windows."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-1",
    "href": "slides/productivity/03-quarto.html#computations-1",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\nWe can write something like this:\n```{r}\nx &lt;- 1\ny &lt;- 2\nx + y\n```"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-2",
    "href": "slides/productivity/03-quarto.html#computations-2",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\nIt look slike this:\n\nx &lt;- 1\ny &lt;- 2\nx + y\n\n[1] 3\n\n\nNote that it was evaluated and the result is shown."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-3",
    "href": "slides/productivity/03-quarto.html#computations-3",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nBy default, the code and result will show up as well.\nYou can send arguments to control the behavior with |#\nFor example, to avoid showing code in the final document, you can use the argument echo: FALSE.\n\n```{r}\n#| echo: false\nx &lt;- 1\ny &lt;- 2\nx + y\n```"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-4",
    "href": "slides/productivity/03-quarto.html#computations-4",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nThere are many options (auto-complete shows them).\nFor example, to avoid the the code running you can use eval: FALSE.\nTo avoid showing warnings warning: FALSE, to avoid showing messages message: FALSE.\n\n\n\n\n\n\n\nNote\n\n\nIf you want to apply an option globally, these can be set globally in the header.\nexecute:\n  echo: false"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#computations-5",
    "href": "slides/productivity/03-quarto.html#computations-5",
    "title": "Quarto",
    "section": "Computations",
    "text": "Computations\n\nWe recommend getting into the habit of labeling code chunks:\n\n```{r}\n#| label: one-plus-two\nx &lt;- 1\ny &lt;- 2\nx + y\n```\n\nHelps with debugging\nGives meaningful names to generated images."
  },
  {
    "objectID": "slides/productivity/03-quarto.html#more-on-markdown",
    "href": "slides/productivity/03-quarto.html#more-on-markdown",
    "title": "Quarto",
    "section": "More on markdown",
    "text": "More on markdown\nThere is a lot more you can do with R markdown. We highly recommend you continue learning as you gain more experience writing reports in R. There are many free resources on the internet including:\n\nRStudio’s tutorial: https://quarto.org/docs/get-started/hello/rstudio.html\nThe knitR book: https://yihui.name/knitr/\nPandoc’s Markdown in-depth documentation\nGuide for academic reports"
  },
  {
    "objectID": "slides/productivity/03-quarto.html#quarto-render",
    "href": "slides/productivity/03-quarto.html#quarto-render",
    "title": "Quarto",
    "section": "quarto render",
    "text": "quarto render\n\nRStudio provides the Render button that makes it easier to compile the document.\nYou can also type quarto render filename.qmd on the command line. This offers many options.\nYou can produce html, pdf, or word documents.\nYou can specify the default in the YAML header using: format: html, format: pdf,format: docx, or format: gfm (gfm stands for GitHub flavored markdown, a convenient way to share your reports)."
  },
  {
    "objectID": "slides/00-intro.html#general-information",
    "href": "slides/00-intro.html#general-information",
    "title": "Introduction",
    "section": "General Information",
    "text": "General Information\n\nBST 260 Introduction to Data Science\nInstructor: Rafael A. Irizarry\nTFs: Corri Sept, Nikhil Vytla, Yuan Wang\nMondays we have lectures, Wednesday we have labs.\nWe work on problem sets together, in lab."
  },
  {
    "objectID": "slides/00-intro.html#course-description",
    "href": "slides/00-intro.html#course-description",
    "title": "Introduction",
    "section": "Course Description",
    "text": "Course Description\nLecture notes: https://datasciencelabs.github.io/2024/\n\nPlease read the syllabus!"
  },
  {
    "objectID": "slides/00-intro.html#important-details",
    "href": "slides/00-intro.html#important-details",
    "title": "Introduction",
    "section": "Important details",
    "text": "Important details\n\nComplete readings before class.\nMidterms are in person. There are no makeups.\nMake sure you read messages sent via Canvas\nYou can select your own final project, but need approval.\nYou should start final project by October 23.\nHelp us pick office hours: https://forms.gle/GiQXqDTaeYVxaXd78"
  },
  {
    "objectID": "slides/00-intro.html#whats-coming",
    "href": "slides/00-intro.html#whats-coming",
    "title": "Introduction",
    "section": "What’s coming",
    "text": "What’s coming\n\nUNIX/Linux shell.\nReproducible document preparation\nVersion control with git and GitHub\nR programming\nData wrangling with dplyr and data.table\nData visualization with ggplot2\nProbability theory, inference and modeling\nHigh-dimensional data techniques\nMachine learning"
  },
  {
    "objectID": "slides/00-intro.html#lets-get-started",
    "href": "slides/00-intro.html#lets-get-started",
    "title": "Introduction",
    "section": "Let’s get started",
    "text": "Let’s get started\n\nInstall R.\nInstall RStudio.\nMake sure you have access to a terminal."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BST 260 Introduction to Data Science",
    "section": "",
    "text": "Instructor: Rafael A.Irizarry\nTeaching fellows: Corri Sept, Nikhil Vytla, and Yuan Wang\nLocation: Kresge 202A and 202B, Harvard School of Public Health\nDate and time: Mon & Wed 9.45 - 11:15am\nTextbooks: https://github.com/rafalab/dsbook-part-1, https://github.com/rafalab/dsbook-part-2\nSlack: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922/pages/Course%20Information\nGitHub repo: https://github.com/datasciencelabs/2024\nRemember to read the syllabus, listen to SD.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#course-information",
    "href": "index.html#course-information",
    "title": "BST 260 Introduction to Data Science",
    "section": "",
    "text": "Instructor: Rafael A.Irizarry\nTeaching fellows: Corri Sept, Nikhil Vytla, and Yuan Wang\nLocation: Kresge 202A and 202B, Harvard School of Public Health\nDate and time: Mon & Wed 9.45 - 11:15am\nTextbooks: https://github.com/rafalab/dsbook-part-1, https://github.com/rafalab/dsbook-part-2\nSlack: https://bst260fall2024.slack.com/\nCanvas: https://canvas.harvard.edu/courses/143922/pages/Course%20Information\nGitHub repo: https://github.com/datasciencelabs/2024\nRemember to read the syllabus, listen to SD.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#lectures",
    "href": "index.html#lectures",
    "title": "BST 260 Introduction to Data Science",
    "section": "Lectures",
    "text": "Lectures\nLecture slides, class notes, and problem sets are linked below. New material is added approximately on a weekly basis.\n\n\n\nDates\nTopic\nSlides\nReading\n\n\n\n\nSep 04\nProductivity Tools\nIntro, Unix\nInstalling R and RStudio on Windows or Mac, Getting Started, Unix\n\n\nSep 09, Sep 11\nProductivity Tools\nRStudio, Quarto, Git and GitHub\nRStudio Projects, Quarto, Git\n\n\nSep 16, Sep 19\nR\nR basics\nR Basics, Vectorization, dplyr, ggplot2\n\n\nSep 23, Sep 25\nWrangling\n\nImporting data, dates and times, Locales, Reshaping Data, Joining Tables, Extracting data from the web\n\n\nSep 30, Oct 02\nData visualization\n\nDistributions, Dataviz Principles\n\n\nOct 07, Oct 09\nProbability\n\nMonte Carlo, Random Variables & CLT\n\n\nOct 16\nMidterm 1\n\nCovers material from Sep 04-Oct 11\n\n\nOct 21, Oct 23\nInference\n\nParameters & Estimates, Confidence Intervals\n\n\nOct 28, Oct 30\nStatistical Models\n\nData-driven Models, Bayesian Statistics, Hierarchical Models\n\n\nNov 04, Nov 06\nLinear models\n\nRegression, Multivariate Regression\n\n\nNov 13\nLinear models\n\nMeasurement Error Models, Treatment Effect Models, Association Tests, Association Not Causation\n\n\nNov 18, Nov 20\nHigh dimensional data\n\nMatrices in R, Applied Linear Algebra, Dimension Reduction\n\n\nNov 25\nMidterm 2\n\nMidterm 2: cover material from Sep 04-Nov 22\n\n\nDec 02, Dec 04\nMachine Learning\n\nNotation and terminology, Evaluation Metrics, conditional probabilities, smoothing\n\n\nDec 09, Dec 11\nMachine Learning\n\nResampling methods, ML algorithms, ML in practice\n\n\nDec 16, Dec 18\nOther topics",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#problem-sets",
    "href": "index.html#problem-sets",
    "title": "BST 260 Introduction to Data Science",
    "section": "Problem sets",
    "text": "Problem sets\n\n\n\nProblem set\nTopic\nDue Date\nDifficulty\n\n\n\n\n01\nUnix, Quarto\nSep 11\neasy\n\n\n02\nR\nSep 19\neasy\n\n\n03\nTidyverse\nSep 29\neasy\n\n\n04\nWrangling\nOct 4\nmedium\n\n\n05\nCovid 19 data visualization\nOct 11\nmedium\n\n\n06\nProbability\nOct 25\neasy\n\n\n07\nPredict the election\nNov 04\nhard\n\n\n08\nConfidence intervals for excess mortality\nNov 15\nhard\n\n\n09\nMatrices\nNov 22\neasy\n\n\n10\nDigit reading\nDec 13\nhard\n\n\nFinal Project\nYour choice\nDec 20\nhard",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#office-hour-times",
    "href": "index.html#office-hour-times",
    "title": "BST 260 Introduction to Data Science",
    "section": "Office hour times",
    "text": "Office hour times\n\n\n\nMeeting\nTime\nLocation\n\n\n\n\nRafael Irizarry\nMon 8:45-9:45AM\nKresge LL6\n\n\nCorri Sept\nTue\n3:00-4:00PM\n\n\nNikhil Vytla\nWed\n2:00-3:00PM\n\n\nYuan Wang\nFri\n1:00-2:00PM",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "BST 260 Introduction to Data Science",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nWe thank Maria Tackett and Mine Çetinkaya-Rundel for sharing their web page template, which we used in creating this website.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "psets/pset-02-r-vectorization.html",
    "href": "psets/pset-02-r-vectorization.html",
    "title": "Problem set 2",
    "section": "",
    "text": "For these exercises, do not load any packages other than dslabs.\nMake sure to use vectorization whenever possible.\n\nWhat is the sum of the first 100 positive integers? Use the functions seq and sum to compute the sum with R for any n.\n\n\n# Your code here\n\n\nLoad the US murders dataset from the dslabs package. Use the function str to examine the structure of the murders object. What are the column names used by the data frame for these five variables? Show the subset of murders showing states with less than 1 per 100,000 deaths. Show all variables.\n\n\nlibrary(dslabs)\nstr(murders)\n\n'data.frame':   51 obs. of  5 variables:\n $ state     : chr  \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...\n $ abb       : chr  \"AL\" \"AK\" \"AZ\" \"AR\" ...\n $ region    : Factor w/ 4 levels \"Northeast\",\"South\",..: 2 4 4 2 4 4 1 2 2 2 ...\n $ population: num  4779736 710231 6392017 2915918 37253956 ...\n $ total     : num  135 19 232 93 1257 ...\n\n\n\n# Your code here\n\n\nShow the subset of murders showing states with less than 1 per 100,000 deaths and in the West of the US. Don’t show the region variable.\n\n\n# Your code here\n\n\nShow the largest state with a rate less than 1 per 100,000.\n\n\n# Your code here\n\n\nShow the state with a population of more than 10 million with the lowest rate.\n\n\n# Your code here\n\n\nCompute the rate for each region of the US.\n\n\n# Your code here\n\n\nCreate a vector of numbers that starts at 6, does not pass 55, and adds numbers in increments of 4/7: 6, 6 + 4/7, 6 + 8/7, and so on. How many numbers does the list have? Hint: use seq and length.\n\n\n# Your code here\n\n\nMake this data frame:\n\n\ntemp &lt;- c(35, 88, 42, 84, 81, 30)\ncity &lt;- c(\"Beijing\", \"Lagos\", \"Paris\", \"Rio de Janeiro\", \n          \"San Juan\", \"Toronto\")\ncity_temps &lt;- data.frame(name = city, temperature = temp)\n\nConvert the temperatures to Celsius.\n\n# Your code here\n\n\nWrite a function euler that compute the following sum for any \\(n\\):\n\n\\[\nS_n = 1+1/2^2 + 1/3^2 + \\dots 1/n^2\n\\]\n\n# Your code here\n\n\nShow that as \\(n\\) gets bigger we get closer \\(\\pi^2/6\\) by plotting \\(S_n\\) versus \\(n\\) with a horizontal dashed line at \\(\\pi^2/6\\).\n\n\n# Your code here\n\n\nUse the %in% operator and the predefined object state.abb to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU?\n\n\n# Your code here\n\n\nExtend the code you used in the previous exercise to report the one entry that is not an actual abbreviation. Hint: use the ! operator, which turns FALSE into TRUE and vice versa, then which to obtain an index.\n\n\n# Your code here\n\n\nIn the murders dataset, use %in% to show all variables for New York, California, and Texas, in that order.\n\n\n# Your code here\n\n\nWrite a function called vandermonde_helper that for any \\(x\\) and \\(n\\), returns the vector \\((1, x, x^2, x^3, \\dots, x^n)\\). Show the results for \\(x=3\\) and \\(n=5\\).\n\n\n# Your code here\n\n\nCreate a vector using:\n\n\nn &lt;- 10000\np &lt;- 0.5\nset.seed(2024-9-6)\nx &lt;- sample(c(0,1), n, prob = c(1 - p, p), replace = TRUE)\n\nCompute the length of each stretch of 1s and then plot the distribution of these values. Check to see if the distribution follows a geometric distribution as the theory predicts. Do not use a loop!\n\n# Your code here"
  },
  {
    "objectID": "psets/pset-01-unix-quarto.html",
    "href": "psets/pset-01-unix-quarto.html",
    "title": "Problem set 1",
    "section": "",
    "text": "After finishing the homework, you are to turn in all the code to GitHub using git.\n\nStart an RStudio project. Pick a good name following a naming convention. Start a Quarto document called beginning.qmd.\nCreate a directory called img and save a screen shot of your RStudio session for the project. Include your screenshot in the Quarto document.\nNext, in your Quarto document, define variables \\(a=1, b=-1, c=-2\\) and print out the solutions to \\(f(x) = ax^2+bx+c=0\\). Do not report complex solutions, only real numbers.\nInclude a graph of \\(f(x)\\) versus \\(x\\) for \\(x \\in (-5,5)\\).\n\n\nx &lt;- seq(-5, 5, length = 100)\n# Hint: Use the plot function\n\n\nCreate a directory called docs. Use the command quarto render to create a PDF and save it to the docs directory. Show us the command you typed:\n\n# Your code here\n\nUse Unix to create a directory called data in the project home directory. Include the Unix command you used to create the directory.\n\n# Your code here\n\nUse a terminal-based text editor to create a file coefs.txt in the data directory and save three coefficients, 1 -1 -2 for example. Show us the Unix commands you used to achieve this:\n\n# Your code here\n\nMake a directory called code. Use Unix to copy the file beginning.qmd to a file called quadratic.qmd in the code directory. Show us the Unix commands you used.\n\n# Your code here\n\nEdit the quadratic.qmd file to read in a, b, and c from the file coefs.txt. Make sure to use a relative path when reading the file. As before, print out the solutions to \\(f(x) = ax^2+bx+c=0\\). Do not report complex solutions, only real numbers.\nChange the path of the file you are reading to the full path you get when you type file.path(getwd(), \"data/coefs.txt\"). Confirm that the file still renders. Then move the entire pset-01-rmarkdown project to a directory called RtmpyDknq4. Does the file render? Change the path back to a relative path and see if it renders."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "Topic\n\n\nTitle\n\n\nDate\n\n\n\n\n\n\nFirst day\n\n\nIntroduction\n\n\nWed, Sep 04\n\n\n\n\nProductivity Tools\n\n\nUnix\n\n\nWed, Sep 04\n\n\n\n\nProductivity Tools\n\n\nRStudio\n\n\nWed, Sep 04\n\n\n\n\nProductivity Tools\n\n\nQuarto\n\n\nMon, Sep 09\n\n\n\n\nProductivity Tools\n\n\nGit and GitHub\n\n\nMon, Sep 09\n\n\n\n\nR\n\n\nR Basics\n\n\nMon, Sep 09\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Slides"
    ]
  },
  {
    "objectID": "psets.html",
    "href": "psets.html",
    "title": "Problem Sets",
    "section": "",
    "text": "Topic\n\n\nDue date (at 11:59 PM)\n\n\n\n\n\n\nProblem set 1\n\n\nWed, Sep 11\n\n\n\n\nProblem set 2\n\n\nThu, Sep 19\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Problem Sets"
    ]
  },
  {
    "objectID": "slides/R/05-r-basics.html#packages",
    "href": "slides/R/05-r-basics.html#packages",
    "title": "R Basics",
    "section": "Packages",
    "text": "Packages\n\nUse install.packages to install the dslabs package.\nTryout the following functions: sessionInfo, installed.packages"
  },
  {
    "objectID": "slides/R/05-r-basics.html#prebuilt-functions",
    "href": "slides/R/05-r-basics.html#prebuilt-functions",
    "title": "R Basics",
    "section": "Prebuilt functions",
    "text": "Prebuilt functions\n\nMuch of what we do in R is based on prebuilt functions.\nMany are included in automatically loaded packages: stats, graphics, grDevices, utils, datasets, methods.\nThis subset of the R universe is refereed to as R base.\nVery popular packages not included in R base: ggplot2, dplyr, tidyr, and data.table."
  },
  {
    "objectID": "slides/R/05-r-basics.html#prebuilt-functions-1",
    "href": "slides/R/05-r-basics.html#prebuilt-functions-1",
    "title": "R Basics",
    "section": "Prebuilt functions",
    "text": "Prebuilt functions\n\nExample of prebuilt functions that we will use today: ls, rm, library, search, factor, list, exists, str, typeof, and class.\nYou can see the raw code for a function by typing it without the parenthesis: type ls on your console to see an example."
  },
  {
    "objectID": "slides/R/05-r-basics.html#help-system",
    "href": "slides/R/05-r-basics.html#help-system",
    "title": "R Basics",
    "section": "Help system",
    "text": "Help system\n\nIn R you can use ? or help to learn more about functions.\nYou can learn about function using\n\nhelp(\"ls\")\nor\n?ls"
  },
  {
    "objectID": "slides/R/05-r-basics.html#the-workspace",
    "href": "slides/R/05-r-basics.html#the-workspace",
    "title": "R Basics",
    "section": "The workspace",
    "text": "The workspace\n\nDefine a variable.\n\n\na &lt;- 2\n\n\nUse ls to see if it’s there. Also take a look at the Environment tab in RStudio.\n\n\nls()\n\n[1] \"a\"\n\n\n\nUse rm to remove the variable you defined.\n\n\nrm(a)"
  },
  {
    "objectID": "slides/R/05-r-basics.html#variable-name-convention",
    "href": "slides/R/05-r-basics.html#variable-name-convention",
    "title": "R Basics",
    "section": "Variable name convention",
    "text": "Variable name convention\n\nA nice convention to follow is to use meaningful words that describe what is stored, use only lower case, and use underscores as a substitute for spaces.\nFor more we recommend this guide."
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-types",
    "href": "slides/R/05-r-basics.html#data-types",
    "title": "R Basics",
    "section": "Data types",
    "text": "Data types\nThe main data types in R are:\n\nOne dimensional vectors: numeric, integer, logical, complex, characters.\nFactors\nLists: this includes data frames.\nArrays: Matrices are the most widely used.\nDate and time\ntibble\nS4 objects"
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-types-1",
    "href": "slides/R/05-r-basics.html#data-types-1",
    "title": "R Basics",
    "section": "Data types",
    "text": "Data types\n\nMany errors in R come from confusing data types.\nstr stands for structure, gives us information about an object.\ntypeof gives you the basic data type of the object. It reveals the lower-level, more fundamental type of an object in R’s memory.\nclass This function returns the class attribute of an object. The class of an object is essentially type_of at a higher, often user-facing level."
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-types-2",
    "href": "slides/R/05-r-basics.html#data-types-2",
    "title": "R Basics",
    "section": "Data types",
    "text": "Data types\nLet’s see some example:\n\nlibrary(dslabs)\ntypeof(murders)\n\n[1] \"list\"\n\nclass(murders)\n\n[1] \"data.frame\"\n\nstr(murders)\n\n'data.frame':   51 obs. of  5 variables:\n $ state     : chr  \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...\n $ abb       : chr  \"AL\" \"AK\" \"AZ\" \"AR\" ...\n $ region    : Factor w/ 4 levels \"Northeast\",\"South\",..: 2 4 4 2 4 4 1 2 2 2 ...\n $ population: num  4779736 710231 6392017 2915918 37253956 ...\n $ total     : num  135 19 232 93 1257 ..."
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-frames",
    "href": "slides/R/05-r-basics.html#data-frames",
    "title": "R Basics",
    "section": "Data frames",
    "text": "Data frames\n\nDate frames are the most common class used in data analysis. It is like a spreadsheet.\nUsually, rows represents observations and columns variables.\nEach variable can be a different data type.\nYou can see part of the content like this\n\n\nhead(murders)\n\n       state abb region population total\n1    Alabama  AL  South    4779736   135\n2     Alaska  AK   West     710231    19\n3    Arizona  AZ   West    6392017   232\n4   Arkansas  AR  South    2915918    93\n5 California  CA   West   37253956  1257\n6   Colorado  CO   West    5029196    65"
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-frames-1",
    "href": "slides/R/05-r-basics.html#data-frames-1",
    "title": "R Basics",
    "section": "Data frames",
    "text": "Data frames\n\nand all of the content like this:\n\n\nView(murders)\n\n\nType the above in RStudio."
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-frames-2",
    "href": "slides/R/05-r-basics.html#data-frames-2",
    "title": "R Basics",
    "section": "Data frames",
    "text": "Data frames\n\nA very common operation is adding columns like this:\n\n\nmurders$pop_rank &lt;- rank(murders$population)\nhead(murders)\n\n       state abb region population total pop_rank\n1    Alabama  AL  South    4779736   135       29\n2     Alaska  AK   West     710231    19        5\n3    Arizona  AZ   West    6392017   232       36\n4   Arkansas  AR  South    2915918    93       20\n5 California  CA   West   37253956  1257       51\n6   Colorado  CO   West    5029196    65       30"
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-frames-3",
    "href": "slides/R/05-r-basics.html#data-frames-3",
    "title": "R Basics",
    "section": "Data frames",
    "text": "Data frames\n\nNote that we used $.\nThis is called the accessor because it lets us access columns.\n\n\nmurders$population\n\n [1]  4779736   710231  6392017  2915918 37253956  5029196  3574097   897934\n [9]   601723 19687653  9920000  1360301  1567582 12830632  6483802  3046355\n[17]  2853118  4339367  4533372  1328361  5773552  6547629  9883640  5303925\n[25]  2967297  5988927   989415  1826341  2700551  1316470  8791894  2059179\n[33] 19378102  9535483   672591 11536504  3751351  3831074 12702379  1052567\n[41]  4625364   814180  6346105 25145561  2763885   625741  8001024  6724540\n[49]  1852994  5686986   563626\n\n\n\nMore generally: used to access components of a list."
  },
  {
    "objectID": "slides/R/05-r-basics.html#data-frames-4",
    "href": "slides/R/05-r-basics.html#data-frames-4",
    "title": "R Basics",
    "section": "Data frames",
    "text": "Data frames\n\nOne way R confuses beginners is by having multiple ways of doing the same thing.\nFor example you can access the 4th column in the following five different ways:\n\n\nmurders$population\nmurders[, \"population\"]\nmurders[[\"population\"]]\nmurders[, 4]\nmurders[[4]]\n\n\nIn general, we recommend using the name rather than the number as it is less likely to change."
  },
  {
    "objectID": "slides/R/05-r-basics.html#with",
    "href": "slides/R/05-r-basics.html#with",
    "title": "R Basics",
    "section": "with",
    "text": "with\n\nwith let’s us use the column names as objects.\nThis is convenient to avoid typing the data frame name over and over:\n\n\nrate &lt;- with(murders, total/population)"
  },
  {
    "objectID": "slides/R/05-r-basics.html#with-1",
    "href": "slides/R/05-r-basics.html#with-1",
    "title": "R Basics",
    "section": "with",
    "text": "with\n\nNote you can write entire code chunks by enclosing it in curly brackets:\n\n\nwith(murders, {\n   rate &lt;- total/population\n   rate &lt;- round(rate*10^5)\n   print(rate[1:5])\n})\n\n[1] 3 3 4 3 3"
  },
  {
    "objectID": "slides/R/05-r-basics.html#vectors",
    "href": "slides/R/05-r-basics.html#vectors",
    "title": "R Basics",
    "section": "Vectors",
    "text": "Vectors\n\nThe columns of data frames are an example of one dimensional (atomic) vectors.\n\n\nlength(murders$population)\n\n[1] 51"
  },
  {
    "objectID": "slides/R/05-r-basics.html#vectors-1",
    "href": "slides/R/05-r-basics.html#vectors-1",
    "title": "R Basics",
    "section": "Vectors",
    "text": "Vectors\n\nOften we have to create vectors.\nThe concatenate function c is the most basic way used to create vectors:\n\n\nx &lt;- c(\"b\", \"s\", \"t\", \" \", \"2\", \"6\", \"0\")"
  },
  {
    "objectID": "slides/R/05-r-basics.html#sequences",
    "href": "slides/R/05-r-basics.html#sequences",
    "title": "R Basics",
    "section": "Sequences",
    "text": "Sequences\n\nSequences are a the common example of vectors we generate.\n\n\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(1, 9, 2)\n\n[1] 1 3 5 7 9\n\n\n\nWhen increasing by 1 you can use :\n\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "slides/R/05-r-basics.html#sequences-1",
    "href": "slides/R/05-r-basics.html#sequences-1",
    "title": "R Basics",
    "section": "Sequences",
    "text": "Sequences\n\nA useful function to quickly generate the sequence 1:length(x) is seq_along:\n\n\nx &lt;- c(\"b\", \"s\", \"t\", \" \", \"2\", \"6\", \"0\")\nseq_along(x)\n\n[1] 1 2 3 4 5 6 7\n\n\n\nA reason to use this is to loop through entries:\n\n\nfor (i in seq_along(x)) {\n  cat(toupper(x[i]))\n}\n\nBST 260"
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors",
    "href": "slides/R/05-r-basics.html#factors",
    "title": "R Basics",
    "section": "Factors",
    "text": "Factors\n\nOne key distinction between data types you need to understad is the difference between factors and characters.\nThe murder dataset has examples of both.\n\n\nclass(murders$state)\n\n[1] \"character\"\n\nclass(murders$region)\n\n[1] \"factor\"\n\n\n\nWhy do you think this is?"
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors-1",
    "href": "slides/R/05-r-basics.html#factors-1",
    "title": "R Basics",
    "section": "Factors",
    "text": "Factors\n\nFactors store levels and the label of each level.\nThis is useful for categorical data.\n\n\nx &lt;- murders$region\nlevels(x)\n\n[1] \"Northeast\"     \"South\"         \"North Central\" \"West\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#categories-based-on-strata",
    "href": "slides/R/05-r-basics.html#categories-based-on-strata",
    "title": "R Basics",
    "section": "Categories based on strata",
    "text": "Categories based on strata\n\nIn data analysis we often have to stratify continuous variables into categories.\nThe function cut helps us do this:\n\n\nage &lt;- c(5, 93, 18, 102, 14, 22, 45, 65, 67, 25, 30, 16, 21)\ncut(age, c(0, 11, 27, 43, 59, 78, 96, Inf))\n\n [1] (0,11]   (78,96]  (11,27]  (96,Inf] (11,27]  (11,27]  (43,59]  (59,78] \n [9] (59,78]  (11,27]  (27,43]  (11,27]  (11,27] \nLevels: (0,11] (11,27] (27,43] (43,59] (59,78] (78,96] (96,Inf]"
  },
  {
    "objectID": "slides/R/05-r-basics.html#categories-based-on-strata-1",
    "href": "slides/R/05-r-basics.html#categories-based-on-strata-1",
    "title": "R Basics",
    "section": "Categories based on strata",
    "text": "Categories based on strata\n\nWe can assign it more meaningful level names:\n\n\nage &lt;- c(5, 93, 18, 102, 14, 22, 45, 65, 67, 25, 30, 16, 21)\ncut(age, c(0, 11, 27, 43, 59, 78, 96, Inf), \n    labels = c(\"Alpha\", \"Zoomer\", \"Millennial\", \"X\", \"Boomer\", \"Silent\", \"Greatest\"))\n\n [1] Alpha      Silent     Zoomer     Greatest   Zoomer     Zoomer    \n [7] X          Boomer     Boomer     Zoomer     Millennial Zoomer    \n[13] Zoomer    \nLevels: Alpha Zoomer Millennial X Boomer Silent Greatest"
  },
  {
    "objectID": "slides/R/05-r-basics.html#changing-levels",
    "href": "slides/R/05-r-basics.html#changing-levels",
    "title": "R Basics",
    "section": "Changing levels",
    "text": "Changing levels\n\nThis is often needed for ordinal data because R defaults to alphabetical order:\n\n\ngen &lt;- factor(c(\"Alpha\", \"Zoomer\", \"Millennial\"))\nlevels(gen)\n\n[1] \"Alpha\"      \"Millennial\" \"Zoomer\"    \n\n\n\nYou can change this with the levels argument:\n\n\ngen &lt;- factor(gen, levels = c(\"Alpha\", \"Zoomer\", \"Millennial\", \"X\", \"Boomer\", \"Silent\", \"Greatest\"))\nlevels(gen)\n\n[1] \"Alpha\"      \"Zoomer\"     \"Millennial\" \"X\"          \"Boomer\"    \n[6] \"Silent\"     \"Greatest\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#changing-levels-1",
    "href": "slides/R/05-r-basics.html#changing-levels-1",
    "title": "R Basics",
    "section": "Changing levels",
    "text": "Changing levels\n\nA common reason we need to change levels is to assure R is aware which is the reference strata.\nThis is important for linear models because the first level is assumed to be the reference.\n\n\nx &lt;- factor(c(\"no drug\", \"drug 1\", \"drug 2\"))\nlevels(x)\n\n[1] \"drug 1\"  \"drug 2\"  \"no drug\"\n\nx &lt;- relevel(x, ref = \"no drug\")\nlevels(x)          \n\n[1] \"no drug\" \"drug 1\"  \"drug 2\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#changing-levels-2",
    "href": "slides/R/05-r-basics.html#changing-levels-2",
    "title": "R Basics",
    "section": "Changing levels",
    "text": "Changing levels\n\nWe often want to order strata based on a summary statistic.\nThis is common in data visualization.\nWe can use reorder for this:\n\n\nx &lt;- reorder(murders$region, murders$population, sum)"
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors-2",
    "href": "slides/R/05-r-basics.html#factors-2",
    "title": "R Basics",
    "section": "Factors",
    "text": "Factors\n\nAnother reason we used factors is because they more efficient:\n\n\nx &lt;- sample(murders$state[c(5,33,44)], 10^7, replace = TRUE)\ny &lt;- factor(x)\nobject.size(x)\n\n80000232 bytes\n\nobject.size(y)\n\n40000648 bytes\n\n\n\nAn integer is easier to store than a character string."
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors-3",
    "href": "slides/R/05-r-basics.html#factors-3",
    "title": "R Basics",
    "section": "Factors",
    "text": "Factors\nExercise: How can we make this go much faster?\n\nsystem.time({levels(y) &lt;- tolower(levels(y))})\n\n   user  system elapsed \n  0.018   0.000   0.019"
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors-can-be-confusing",
    "href": "slides/R/05-r-basics.html#factors-can-be-confusing",
    "title": "R Basics",
    "section": "Factors can be confusing",
    "text": "Factors can be confusing\n\nTry to make sense of this:\n\n\nx &lt;- factor(c(\"3\",\"2\",\"1\"), levels = c(\"3\",\"2\",\"1\"))\nas.numeric(x)\n\n[1] 1 2 3\n\nx[1]\n\n[1] 3\nLevels: 3 2 1\n\nlevels(x[1])\n\n[1] \"3\" \"2\" \"1\"\n\ntable(x[1])\n\n\n3 2 1 \n1 0 0"
  },
  {
    "objectID": "slides/R/05-r-basics.html#factors-can-be-confusing-1",
    "href": "slides/R/05-r-basics.html#factors-can-be-confusing-1",
    "title": "R Basics",
    "section": "Factors can be confusing",
    "text": "Factors can be confusing\n\nAvoid keeping extra levels with droplevels:\n\n\nz &lt;- x[1]\nz &lt;- droplevels(z)\n\n\nBut note what happens if we change to another level:\n\n\nz[1] &lt;- \"1\"\nz\n\n[1] &lt;NA&gt;\nLevels: 3"
  },
  {
    "objectID": "slides/R/05-r-basics.html#nas",
    "href": "slides/R/05-r-basics.html#nas",
    "title": "R Basics",
    "section": "NAs",
    "text": "NAs\n\nNA stands for not available.\nData analysts have to deal with NAs often."
  },
  {
    "objectID": "slides/R/05-r-basics.html#nas-1",
    "href": "slides/R/05-r-basics.html#nas-1",
    "title": "R Basics",
    "section": "NAs",
    "text": "NAs\n\ndslabs includes an example dataset with NAs\n\n\nlibrary(dslabs)\nna_example[1:20]\n\n [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2\n\n\n\nThe is.na function is key for dealing with NAs\n\n\nis.na(na_example[1])\n\n[1] FALSE\n\nis.na(na_example[17])\n\n[1] TRUE\n\nis.na(NA)\n\n[1] TRUE\n\nis.na(\"NA\")\n\n[1] FALSE"
  },
  {
    "objectID": "slides/R/05-r-basics.html#nas-2",
    "href": "slides/R/05-r-basics.html#nas-2",
    "title": "R Basics",
    "section": "NAs",
    "text": "NAs\n\nTechnically NA is a logical\n\n\nclass(NA)\n\n[1] \"logical\"\n\n\n\nWhen used with ands and ors, NAs behaves like FALSE\n\n\nTRUE & NA\n\n[1] NA\n\nTRUE | NA\n\n[1] TRUE\n\n\n\nBut NA is not FALSE. Try this:\n\n\nif (NA) print(1) else print(0)"
  },
  {
    "objectID": "slides/R/05-r-basics.html#nans",
    "href": "slides/R/05-r-basics.html#nans",
    "title": "R Basics",
    "section": "NaNs",
    "text": "NaNs\n\nA related constant is NaN.\nUnlike NA, which is a logical, NaN is a number.\nIt is a numeric that is Not a Number.\nHere are some examples:\n\n\n0/0\n\n[1] NaN\n\nclass(0/0)\n\n[1] \"numeric\"\n\nsqrt(-1)\n\n[1] NaN\n\nlog(-1)\n\n[1] NaN"
  },
  {
    "objectID": "slides/R/05-r-basics.html#coercing",
    "href": "slides/R/05-r-basics.html#coercing",
    "title": "R Basics",
    "section": "Coercing",
    "text": "Coercing\n\nWhen you do something inconsistent with data types, R tries to figure out what you mean and change it accordingly.\nWe call this coercing.\nR does not return an error and in some cases does not return a warning either.\nThis can cause confusion and unnoticed errors.\nSo it’s important to understand how and when it happens."
  },
  {
    "objectID": "slides/R/05-r-basics.html#coercing-1",
    "href": "slides/R/05-r-basics.html#coercing-1",
    "title": "R Basics",
    "section": "Coercing",
    "text": "Coercing\n\nHere are some examples:\n\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(1)\n\n[1] \"double\"\n\ntypeof(1 + 1L)\n\n[1] \"double\"\n\nc(\"a\", 1, 2)\n\n[1] \"a\" \"1\" \"2\"\n\nTRUE + FALSE\n\n[1] 1\n\nfactor(\"a\") == \"a\"\n\n[1] TRUE\n\nidentical(factor(\"a\"), \"a\")\n\n[1] FALSE"
  },
  {
    "objectID": "slides/R/05-r-basics.html#coercing-2",
    "href": "slides/R/05-r-basics.html#coercing-2",
    "title": "R Basics",
    "section": "Coercing",
    "text": "Coercing\n\nWhen R can’t figure out how to coerce, rather an error it returns an NA:\n\n\nas.numeric(\"a\")\n\n[1] NA\n\n\n\nNote that including NAs in arithmetical operations usually returns an NA.\n\n\n1 + 2 + NA\n\n[1] NA"
  },
  {
    "objectID": "slides/R/05-r-basics.html#coercing-3",
    "href": "slides/R/05-r-basics.html#coercing-3",
    "title": "R Basics",
    "section": "Coercing",
    "text": "Coercing\n\nYou want to avoid automatic coercion and instead explicitly do it.\nMost coercion functions start with as.\nHere is an example.\n\n\nx &lt;- factor(c(\"a\",\"b\",\"b\",\"c\"))\nas.character(x)\n\n[1] \"a\" \"b\" \"b\" \"c\"\n\nas.numeric(x)\n\n[1] 1 2 2 3"
  },
  {
    "objectID": "slides/R/05-r-basics.html#coercing-4",
    "href": "slides/R/05-r-basics.html#coercing-4",
    "title": "R Basics",
    "section": "Coercing",
    "text": "Coercing\n\nMore examples:\n\n\nx &lt;- c(\"12323\", \"12,323\")\nas.numeric(x)\n\n[1] 12323    NA\n\nlibrary(readr)\nparse_guess(x)\n\n[1] 12323 12323"
  },
  {
    "objectID": "slides/R/05-r-basics.html#lists",
    "href": "slides/R/05-r-basics.html#lists",
    "title": "R Basics",
    "section": "Lists",
    "text": "Lists\n\nData frames are a type of list.\nLists permit components of different types and, unlike data frames, different lengths:\n\n\nx &lt;- list(name = \"John\", id = 112, grades = c(95, 87, 92))\n\n\nThe JSON format is best represented as list in R."
  },
  {
    "objectID": "slides/R/05-r-basics.html#lists-1",
    "href": "slides/R/05-r-basics.html#lists-1",
    "title": "R Basics",
    "section": "Lists",
    "text": "Lists\n\nYou can access components in different ways:\n\n\nx$name\n\n[1] \"John\"\n\nx[[1]]\n\n[1] \"John\"\n\nx[[\"name\"]]\n\n[1] \"John\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#matrics",
    "href": "slides/R/05-r-basics.html#matrics",
    "title": "R Basics",
    "section": "Matrics",
    "text": "Matrics\n\nMatrices are another widely used data type.\nThey are similar to data frames except all entries need to be of the same type.\nWe will learn more about matrices in the High Dimensional data Analysis part of the class."
  },
  {
    "objectID": "slides/R/05-r-basics.html#functions",
    "href": "slides/R/05-r-basics.html#functions",
    "title": "R Basics",
    "section": "Functions",
    "text": "Functions\n\nYou can define your own function. The form is like this:\n\n\nf &lt;- function(x, y, z = 0){\n  ### do calculations with x, y, z to compute object\n  ## return(object)\n}"
  },
  {
    "objectID": "slides/R/05-r-basics.html#functions-1",
    "href": "slides/R/05-r-basics.html#functions-1",
    "title": "R Basics",
    "section": "Functions",
    "text": "Functions\n\nHere is an example of a function that sums \\(1,2,\\dots,n\\)\n\n\ns &lt;- function(n){\n   return(sum(1:n))\n}"
  },
  {
    "objectID": "slides/R/05-r-basics.html#lexical-scope",
    "href": "slides/R/05-r-basics.html#lexical-scope",
    "title": "R Basics",
    "section": "Lexical scope",
    "text": "Lexical scope\n\nStudy what happens here:\n\n\nf &lt;- function(x){\n  cat(\"y is\", y,\"\\n\")\n  y &lt;- x\n  cat(\"y is\", y,\"\\n\")\n  return(y)\n}\ny &lt;- 2\nf(3)\n\ny is 2 \ny is 3 \n\n\n[1] 3\n\ny &lt;- f(3)\n\ny is 2 \ny is 3 \n\ny\n\n[1] 3"
  },
  {
    "objectID": "slides/R/05-r-basics.html#namespaces",
    "href": "slides/R/05-r-basics.html#namespaces",
    "title": "R Basics",
    "section": "Namespaces",
    "text": "Namespaces\n\nLook at how this function changes by typing the following:\n\n\nfilter\nlibrary(dplyr)\nfilter"
  },
  {
    "objectID": "slides/R/05-r-basics.html#namespaces-1",
    "href": "slides/R/05-r-basics.html#namespaces-1",
    "title": "R Basics",
    "section": "Namespaces",
    "text": "Namespaces\n\nNote what R searches the Global Environment first.\nUse search to see other environments R searches.\nNote many prebuilt functions are in stats."
  },
  {
    "objectID": "slides/R/05-r-basics.html#namespaces-2",
    "href": "slides/R/05-r-basics.html#namespaces-2",
    "title": "R Basics",
    "section": "Namespaces",
    "text": "Namespaces\n\nYou can explicitly say which filter you want using namespaces:\n\n\nstats::filter\ndplyr::filter"
  },
  {
    "objectID": "slides/R/05-r-basics.html#namespaces-3",
    "href": "slides/R/05-r-basics.html#namespaces-3",
    "title": "R Basics",
    "section": "Namespaces",
    "text": "Namespaces\n\nRestart yoru R Consuole and study this example:\n\n\nlibrary(dslabs)\nexists(\"murders\")\n\n[1] TRUE\n\nmurders &lt;- murders\nmurders2 &lt;- murders\nrm(murders)\nexists(\"murders\")\n\n[1] TRUE\n\ndetach(\"package:dslabs\")\nexists(\"murders\")\n\n[1] FALSE\n\nexists(\"murders2\")\n\n[1] TRUE"
  },
  {
    "objectID": "slides/R/05-r-basics.html#object-oriented-programming",
    "href": "slides/R/05-r-basics.html#object-oriented-programming",
    "title": "R Basics",
    "section": "Object Oriented Programming",
    "text": "Object Oriented Programming\n\nR uses object oriented programming (OOP).\nIt uses two approaches referred to as S3 and S4, respectively.\nS3, the original approach, is more common.\nThe S4 approach is more similar to the conventions used by modern OOP languages."
  },
  {
    "objectID": "slides/R/05-r-basics.html#object-oriented-programming-1",
    "href": "slides/R/05-r-basics.html#object-oriented-programming-1",
    "title": "R Basics",
    "section": "Object Oriented Programming",
    "text": "Object Oriented Programming\n\nTime seriesNumeric\n\n\n\nplot(co2)\n\n\n\n\n\n\n\n\n\n\n\nplot(as.numeric(co2))"
  },
  {
    "objectID": "slides/R/05-r-basics.html#object-oriented-programming-2",
    "href": "slides/R/05-r-basics.html#object-oriented-programming-2",
    "title": "R Basics",
    "section": "Object Oriented Programming",
    "text": "Object Oriented Programming\n\nNote co2 is not numeric:\n\n\nclass(co2)\n\n[1] \"ts\"\n\n\n\nThe plots are different because plot behaves different with different classes."
  },
  {
    "objectID": "slides/R/05-r-basics.html#object-oriented-programming-3",
    "href": "slides/R/05-r-basics.html#object-oriented-programming-3",
    "title": "R Basics",
    "section": "Object Oriented Programming",
    "text": "Object Oriented Programming\n\nThe first plot actually calls the function\n\n\nplot.ts\n\n\nNotice all the plot functions that start with plot by typing plot. and then tab.\nThe function plot will call different functions depending on the class of the arguments."
  },
  {
    "objectID": "slides/R/05-r-basics.html#vectorization",
    "href": "slides/R/05-r-basics.html#vectorization",
    "title": "R Basics",
    "section": "Vectorization",
    "text": "Vectorization\n\nWe will be using the murders dataset in the dslabs package.\nIncludes data on 2010 gun murders for the US 50 states and DC.\nWe will use it to answer questions such as “What is the state with lowest crime rate in the Western part of the US?”"
  },
  {
    "objectID": "slides/R/05-r-basics.html#vectorization-1",
    "href": "slides/R/05-r-basics.html#vectorization-1",
    "title": "R Basics",
    "section": "Vectorization",
    "text": "Vectorization\n\nFirst, some simple examples of vectorization.\nLet’s convert the following heights in inches to meters:\n\n\nheights &lt;- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)\n\n\nRather than loop we use vectorization:\n\n\nheights*2.54/100\n\n [1] 1.7526 1.5748 1.6764 1.7780 1.7780 1.8542 1.7018 1.8542 1.7018 1.7780"
  },
  {
    "objectID": "slides/R/05-r-basics.html#vectorization-2",
    "href": "slides/R/05-r-basics.html#vectorization-2",
    "title": "R Basics",
    "section": "Vectorization",
    "text": "Vectorization\n\nWe can subtract a constant from each element of a vector.\nThis is convenient for computing residuals or deviations from an average:\n\n\navg &lt;- mean(heights)\nheights - avg \n\n [1]  0.3 -6.7 -2.7  1.3  1.3  4.3 -1.7  4.3 -1.7  1.3"
  },
  {
    "objectID": "slides/R/05-r-basics.html#vectorization-3",
    "href": "slides/R/05-r-basics.html#vectorization-3",
    "title": "R Basics",
    "section": "Vectorization",
    "text": "Vectorization\n\nThis means we can compute standard units like this:\n\n\ns &lt;- sd(heights)\n(heights - avg)/s\n\n [1]  0.08995503 -2.00899575 -0.80959530  0.38980515  0.38980515  1.28935548\n [7] -0.50974519  1.28935548 -0.50974519  0.38980515\n\n\n\nThere is actually a function, scale, that does this. We describe it soon."
  },
  {
    "objectID": "slides/R/05-r-basics.html#vectorization-4",
    "href": "slides/R/05-r-basics.html#vectorization-4",
    "title": "R Basics",
    "section": "Vectorization",
    "text": "Vectorization\n\nIf we operate on two vectors, vectorization is componentwise.\nHere is an example:\n\n\nheights &lt;- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)\nerror &lt;- rnorm(length(heights), 0, 0.1)\nheights + error\n\n [1] 69.10607 62.17878 66.13996 70.14801 70.11040 72.82319 67.10582 72.85931\n [9] 67.01908 69.94924"
  },
  {
    "objectID": "slides/R/05-r-basics.html#exercise",
    "href": "slides/R/05-r-basics.html#exercise",
    "title": "R Basics",
    "section": "Exercise",
    "text": "Exercise\n\nAdd a column to the murders dataset with the murder rate.\nUse murders per 100,000 persons as the unit."
  },
  {
    "objectID": "slides/R/05-r-basics.html#functions-that-vectorize",
    "href": "slides/R/05-r-basics.html#functions-that-vectorize",
    "title": "R Basics",
    "section": "Functions that vectorize",
    "text": "Functions that vectorize\n\nMost arithmetic functions work on vectors.\n\n\nx &lt;- 1:10\nsqrt(x)\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n\nlog(x)\n\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851\n\n2^x\n\n [1]    2    4    8   16   32   64  128  256  512 1024"
  },
  {
    "objectID": "slides/R/05-r-basics.html#functions-that-vectorize-1",
    "href": "slides/R/05-r-basics.html#functions-that-vectorize-1",
    "title": "R Basics",
    "section": "Functions that vectorize",
    "text": "Functions that vectorize\n\nscale(heights)\n\n             [,1]\n [1,]  0.08995503\n [2,] -2.00899575\n [3,] -0.80959530\n [4,]  0.38980515\n [5,]  0.38980515\n [6,]  1.28935548\n [7,] -0.50974519\n [8,]  1.28935548\n [9,] -0.50974519\n[10,]  0.38980515\nattr(,\"scaled:center\")\n[1] 68.7\nattr(,\"scaled:scale\")\n[1] 3.335\n\n\nprovides the same results,\n\n(heights - mean(heights))/sd(heights)\n\n [1]  0.08995503 -2.00899575 -0.80959530  0.38980515  0.38980515  1.28935548\n [7] -0.50974519  1.28935548 -0.50974519  0.38980515"
  },
  {
    "objectID": "slides/R/05-r-basics.html#functions-that-vectorize-2",
    "href": "slides/R/05-r-basics.html#functions-that-vectorize-2",
    "title": "R Basics",
    "section": "Functions that vectorize",
    "text": "Functions that vectorize\n\nBut scale coerces to a column matrix:\n\n\nclass(scale(heights))\n\n[1] \"matrix\" \"array\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#functions-that-vectorize-3",
    "href": "slides/R/05-r-basics.html#functions-that-vectorize-3",
    "title": "R Basics",
    "section": "Functions that vectorize",
    "text": "Functions that vectorize\n\nThe conditional function if-else does not vectorize.\nA particularly useful function is a vectorized version ifelse.\nHere is an example:\n\n\na &lt;- c(0, 1, 2, -4, 5)\nifelse(a &gt; 0, 1/a, NA)\n\n[1]  NA 1.0 0.5  NA 0.2\n\n\n\nOther conditional functions, such as any and all, do vectorize."
  },
  {
    "objectID": "slides/R/05-r-basics.html#indexing",
    "href": "slides/R/05-r-basics.html#indexing",
    "title": "R Basics",
    "section": "Indexing",
    "text": "Indexing\n\nVectorization also works for logical relationships:\n\n\nlibrary(dslabs)\nind &lt;- murders$population &lt; 10^6\n\n\nA convenient aspect of this is that you can subset a vector using this logical vector for indexing:\n\n\nmurders$state[ind]\n\n[1] \"Alaska\"               \"Delaware\"             \"District of Columbia\"\n[4] \"Montana\"              \"North Dakota\"         \"South Dakota\"        \n[7] \"Vermont\"              \"Wyoming\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#indexing-1",
    "href": "slides/R/05-r-basics.html#indexing-1",
    "title": "R Basics",
    "section": "Indexing",
    "text": "Indexing\n\nYou can also use vectorization to apply logical operators:\n\n\nind &lt;- murders$population &lt; 10^6 & murders$region == \"West\"\nmurders$state[ind]\n\n[1] \"Alaska\"  \"Montana\" \"Wyoming\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#split",
    "href": "slides/R/05-r-basics.html#split",
    "title": "R Basics",
    "section": "split",
    "text": "split\n\nSplit is a useful function to get indexes using a factor:\n\n\ninds &lt;- with(murders, split(seq_along(region), region))\nmurders$state[inds$West]\n\n [1] \"Alaska\"     \"Arizona\"    \"California\" \"Colorado\"   \"Hawaii\"    \n [6] \"Idaho\"      \"Montana\"    \"Nevada\"     \"New Mexico\" \"Oregon\"    \n[11] \"Utah\"       \"Washington\" \"Wyoming\""
  },
  {
    "objectID": "slides/R/05-r-basics.html#functions-for-subsetting",
    "href": "slides/R/05-r-basics.html#functions-for-subsetting",
    "title": "R Basics",
    "section": "Functions for subsetting",
    "text": "Functions for subsetting\n\nThe functions which, match and the operator %in% are useful for sub-setting\nTo understand how they work it’s best to use examples."
  },
  {
    "objectID": "slides/R/05-r-basics.html#which",
    "href": "slides/R/05-r-basics.html#which",
    "title": "R Basics",
    "section": "which",
    "text": "which\n\nind &lt;- which(murders$state == \"California\")\nind\n\n[1] 5\n\nmurders[ind,]\n\n       state abb region population total\n5 California  CA   West   37253956  1257"
  },
  {
    "objectID": "slides/R/05-r-basics.html#match",
    "href": "slides/R/05-r-basics.html#match",
    "title": "R Basics",
    "section": "match",
    "text": "match\n\nind &lt;- match(c(\"New York\", \"Florida\", \"Texas\"), murders$state)\nind\n\n[1] 33 10 44\n\nmurders[ind,]\n\n      state abb    region population total\n33 New York  NY Northeast   19378102   517\n10  Florida  FL     South   19687653   669\n44    Texas  TX     South   25145561   805"
  },
  {
    "objectID": "slides/R/05-r-basics.html#in",
    "href": "slides/R/05-r-basics.html#in",
    "title": "R Basics",
    "section": "%in%",
    "text": "%in%\n\nind &lt;- which(murders$state %in% c(\"New York\", \"Florida\", \"Texas\"))\nind\n\n[1] 10 33 44\n\nmurders[ind,]\n\n      state abb    region population total\n10  Florida  FL     South   19687653   669\n33 New York  NY Northeast   19378102   517\n44    Texas  TX     South   25145561   805\n\n\n\nNote this is similar to using match. But note the order is different."
  },
  {
    "objectID": "slides/R/05-r-basics.html#match-versus-in",
    "href": "slides/R/05-r-basics.html#match-versus-in",
    "title": "R Basics",
    "section": "match versus %in%",
    "text": "match versus %in%\n\nc(\"Boston\", \"Dakota\", \"Washington\") %in% murders$state\n\n[1] FALSE FALSE  TRUE\n\n\n\nmatch(c(\"Boston\", \"Dakota\", \"Washington\"), murders$state)\n\n[1] NA NA 48\n\n\n\nmatch(murders$state, c(\"Boston\", \"Dakota\", \"Washington\"))\n\n [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA\n[26] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA  3 NA NA\n[51] NA"
  },
  {
    "objectID": "slides/R/05-r-basics.html#the-apply-functions",
    "href": "slides/R/05-r-basics.html#the-apply-functions",
    "title": "R Basics",
    "section": "The apply functions",
    "text": "The apply functions\n\nThe apply functions let use the concept of vectorization with functions that don’t vectorize.\nHere is an example of a function that won’t vectorize in a convenient way:\n\n\ns &lt;- function(n){\n   return(sum(1:n))\n}\n\n\nTry it on a vector:\n\n\nns &lt;- c(25, 100, 1000)\ns(ns)\n\n[1] 325"
  },
  {
    "objectID": "slides/R/05-r-basics.html#the-apply-functions-1",
    "href": "slides/R/05-r-basics.html#the-apply-functions-1",
    "title": "R Basics",
    "section": "The apply functions",
    "text": "The apply functions\n\nWe can use sapply, one of the apply functions:\n\n\nsapply(ns, s)\n\n[1]    325   5050 500500\n\n\n\nsapply will work on any vector, including lists."
  },
  {
    "objectID": "slides/R/05-r-basics.html#the-apply-functions-2",
    "href": "slides/R/05-r-basics.html#the-apply-functions-2",
    "title": "R Basics",
    "section": "The apply functions",
    "text": "The apply functions\n\nThere are other apply functions:\n\nlapply - returns a list. Convenient when the function returns something other than a number.\ntapply - can apply to subsets defined by second variable.\nmapply - multivariate version of sapply.\napply - applies function to rows or columns o matrix.\n\nWe will learn some of these as we go."
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#the-panes",
    "href": "slides/productivity/02-rstudio.html#the-panes",
    "title": "RStudio",
    "section": "The panes",
    "text": "The panes"
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#the-basics",
    "href": "slides/productivity/02-rstudio.html#the-basics",
    "title": "RStudio",
    "section": "The Basics",
    "text": "The Basics\nLet’s try a few things together:\n\nOpen a new R script file.\nLearn tab complete.\nRun commands while editing scripts.\nRun the entire script.\nMake a plot.\nChange options to never save workspace.\nChange IDE appearance."
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#projects",
    "href": "slides/productivity/02-rstudio.html#projects",
    "title": "RStudio",
    "section": "Projects",
    "text": "Projects\nLet’s try this together:\n\nStart new project in new directory.\nStart new project in existing directory.\nChange projects."
  },
  {
    "objectID": "slides/productivity/02-rstudio.html#type-of-editor",
    "href": "slides/productivity/02-rstudio.html#type-of-editor",
    "title": "RStudio",
    "section": "Type of editor",
    "text": "Type of editor\nLet’s examine the two types of editors available:\n\nSource - See the actual code (WYSIWYG)\nVisual - Partial preview of final document.\n\nNote: You can state your preference in a the header:\neditor: source\n\nWe learn about headers in the Quarto lecture."
  },
  {
    "objectID": "slides/productivity/04-git.html#goal-for-the-day",
    "href": "slides/productivity/04-git.html#goal-for-the-day",
    "title": "Git and GitHub",
    "section": "Goal for the day",
    "text": "Goal for the day\n\nCreate a repository\npush something to the repository\nconnect RStudio to GitHub"
  },
  {
    "objectID": "slides/productivity/04-git.html#do-you-have-git",
    "href": "slides/productivity/04-git.html#do-you-have-git",
    "title": "Git and GitHub",
    "section": "Do you have git?",
    "text": "Do you have git?\nBefore we start:\n\nMake sure you have Git installed.\nOpen a terminal and type:\n\n\ngit --version\n\nIf not installed\n\non a Mac, follow the instructions after typing the above.\non Windows follow these instructions"
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation",
    "href": "slides/productivity/04-git.html#motivation",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\nWe want to avoid this:\n\nPosted by rjkb041 on r/ProgrammerHumor"
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation-1",
    "href": "slides/productivity/04-git.html#motivation-1",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\n\nThis is particularly true when more than one person is collaborating and editing the file.\nEven more important when there are multiple files, as there is in software development, and to some extend data analysis."
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation-2",
    "href": "slides/productivity/04-git.html#motivation-2",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\n\nGit is a version control system that provides a systematic approach to keeping versions of files.\n\n\nPosted on devrant.com/ by bhimanshukalra"
  },
  {
    "objectID": "slides/productivity/04-git.html#motivation-3",
    "href": "slides/productivity/04-git.html#motivation-3",
    "title": "Git and GitHub",
    "section": "Motivation",
    "text": "Motivation\nBut we have to learn some things.\n\nFrom Meme Git Compilation by Lulu Ilmaknun Qurotaini"
  },
  {
    "objectID": "slides/productivity/04-git.html#why-use-git-and-github",
    "href": "slides/productivity/04-git.html#why-use-git-and-github",
    "title": "Git and GitHub",
    "section": "Why use Git and GitHub?",
    "text": "Why use Git and GitHub?\n\nSharing.\nCollaborating.\nVersion control.\n\nWe focus on the sharing aspects of Git and GitHub, but introduce some of the basics that permit you to collaborate and use version control."
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-git",
    "href": "slides/productivity/04-git.html#what-is-git",
    "title": "Git and GitHub",
    "section": "What is Git?",
    "text": "What is Git?"
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-github",
    "href": "slides/productivity/04-git.html#what-is-github",
    "title": "Git and GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\n\nDescribed a social network for software developers.\nBasically, it’s a service that hosts the remote repository (repo) on the web.\nThis facilitates collaboration and sharing greatly."
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-github-1",
    "href": "slides/productivity/04-git.html#what-is-github-1",
    "title": "Git and GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\nThere many other features such as\n\nRecognition system: reward, badges and stars.\nYou can host web pages, like the class notes for example.\nPermits contributions via forks and pull requests.\nIssue tracking\nAutomation tools."
  },
  {
    "objectID": "slides/productivity/04-git.html#what-is-github-2",
    "href": "slides/productivity/04-git.html#what-is-github-2",
    "title": "Git and GitHub",
    "section": "What is GitHub?",
    "text": "What is GitHub?\n\nThe main tool behind GitHub is Git.\nSimilar to how the main tool behind RStudio is R."
  },
  {
    "objectID": "slides/productivity/04-git.html#github-accounts",
    "href": "slides/productivity/04-git.html#github-accounts",
    "title": "Git and GitHub",
    "section": "GitHub accounts",
    "text": "GitHub accounts\n\nPick a professional sounding name.\nConsider adding a profile README.md.\nInstructions are here.\nExample here."
  },
  {
    "objectID": "slides/productivity/04-git.html#repositories",
    "href": "slides/productivity/04-git.html#repositories",
    "title": "Git and GitHub",
    "section": "Repositories",
    "text": "Repositories\n\nWe are ready to create a GitHub repository (repo).\nYou will have at least two copies of your code: one on your computer and one on GitHub.\nIf you add collaborators to this repo, then each will have a copy on their computer.\nThe GitHub copy is considered the main (previously called master) copy that everybody syncs to.\nGit will help you keep all the different copies synced."
  },
  {
    "objectID": "slides/productivity/04-git.html#repositories-1",
    "href": "slides/productivity/04-git.html#repositories-1",
    "title": "Git and GitHub",
    "section": "Repositories",
    "text": "Repositories\n\nLet’s go make one on GitHub…\nThen create a directory on your computer, this will be the local repo, and connect it to the Github repository.\nFirst copy and paste the location of your git repository. It should look something like this:\n\nhttps://github.com/your-username/your-repo-name.git"
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github",
    "href": "slides/productivity/04-git.html#connect-git-and-github",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nWhen accessing GitHub you need credentials to verify your identity.\nThere are two ways to connect: HTTPS or SSH, each requiring different credentials.\nWe recommend using HTTPS, which uses a Personal Access Token (PAT).\nNote that your GitHub website password isn’t your access token."
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-1",
    "href": "slides/productivity/04-git.html#connect-git-and-github-1",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nDetailed instructions are here.\nCarefully follow the instructions provided by GitHub.\nWhen setting permissions for the token, choose non-expiring and select the repo option in the scopes section.\nOnce you complete these steps, GitHub will display your token—a lengthy string of characters.\nImmediately copy this token to your clipboard. This is the only time GitHub will show it to you."
  },
  {
    "objectID": "slides/productivity/04-git.html#generate-a-token",
    "href": "slides/productivity/04-git.html#generate-a-token",
    "title": "Git and GitHub",
    "section": "Generate a token:",
    "text": "Generate a token:\n\nFor security, save this token in a password manager. This ensures you can access it if needed later on.\nWhen git prompts you to enter your password, paste the token you’ve copied. After this, password prompts should no longer appear.\nIf you ever need the token again, retrieve it from your password manager.\n\nMore details available from Happy Git and GitHub for the use."
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-2",
    "href": "slides/productivity/04-git.html#connect-git-and-github-2",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nThe next step is to let Git know who we are on Github.\nTo to this type the following two commands in our terminal window:\n\n\ngit config --global user.name \"Your Name\"\ngit config --global user.mail \"your@email.com\""
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-3",
    "href": "slides/productivity/04-git.html#connect-git-and-github-3",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\n\nThis will change the Git configuration in way that anytime you use Git, it will know this information.\nNote that you need to use the email account that you used to open your GitHub account."
  },
  {
    "objectID": "slides/productivity/04-git.html#connect-git-and-github-4",
    "href": "slides/productivity/04-git.html#connect-git-and-github-4",
    "title": "Git and GitHub",
    "section": "Connect Git and GitHub",
    "text": "Connect Git and GitHub\nTo connect working directory to the GitHub repo\n\ninitialize the directory:\n\n\ngit init\n\n\nLet Git know what is the remote repository.\n\n\ngit remote add origin &lt;remote-url&gt;\n\nNow the two are connected.\n\n\n\n\n\n\nNote\n\n\norigin is a nickname we will use for the remote. We can call it something else, but everybody calls it origin so best to stick with that."
  },
  {
    "objectID": "slides/productivity/04-git.html#overview-of-git",
    "href": "slides/productivity/04-git.html#overview-of-git",
    "title": "Git and GitHub",
    "section": "Overview of Git",
    "text": "Overview of Git\nThe main actions in Git are to:\n\npull changes from the remote repo.\nadd files, or as we say in the Git lingo stage files.\ncommit changes to the local repo.\npush changes to the remote repo."
  },
  {
    "objectID": "slides/productivity/04-git.html#the-four-areas-of-git",
    "href": "slides/productivity/04-git.html#the-four-areas-of-git",
    "title": "Git and GitHub",
    "section": "The four areas of Git",
    "text": "The four areas of Git"
  },
  {
    "objectID": "slides/productivity/04-git.html#status",
    "href": "slides/productivity/04-git.html#status",
    "title": "Git and GitHub",
    "section": "Status",
    "text": "Status\n\n\ngit status filename"
  },
  {
    "objectID": "slides/productivity/04-git.html#add",
    "href": "slides/productivity/04-git.html#add",
    "title": "Git and GitHub",
    "section": "Add",
    "text": "Add\nUse git add to put file to staging area.\n\n\ngit add &lt;filename&gt;\n\nWe say that this file has been staged. Check to see what happened:\n\ngit status &lt;filename&gt;"
  },
  {
    "objectID": "slides/productivity/04-git.html#commit",
    "href": "slides/productivity/04-git.html#commit",
    "title": "Git and GitHub",
    "section": "Commit",
    "text": "Commit\n\nTo move all the staged files to the local repository we use git commit.\n\n\n\ngit commit -m \"must add comment\"\n\n\nOnce committed the files are tracked and a copy of this version is kept going forward.\nThis is like adding V1 to your filename."
  },
  {
    "objectID": "slides/productivity/04-git.html#commit-1",
    "href": "slides/productivity/04-git.html#commit-1",
    "title": "Git and GitHub",
    "section": "Commit",
    "text": "Commit\n\n\n\n\n\n\nNote\n\n\nYou can commit files directly without using add by explicitely writing the files at the end of the commit:\n\n\n\n\ngit commit -m \"must add comment\" &lt;filename&gt;"
  },
  {
    "objectID": "slides/productivity/04-git.html#push",
    "href": "slides/productivity/04-git.html#push",
    "title": "Git and GitHub",
    "section": "Push",
    "text": "Push\n\nTo move to upstream repo we use git push\n\n\n\ngit push -u origin main\n\n\nThe -u flag sets the upstream repo.\nBy using this flag, going forward you can simply use git push to push changes.\nSo going forward we can just type:\n\n\ngit push"
  },
  {
    "objectID": "slides/productivity/04-git.html#push-1",
    "href": "slides/productivity/04-git.html#push-1",
    "title": "Git and GitHub",
    "section": "Push",
    "text": "Push\n\nWhen using git push we need to be careful as if collaborating this will affect the work of others.\nIt might also create a conflict.\n\n\nPosted by andortang on Nothing is Impossible!"
  },
  {
    "objectID": "slides/productivity/04-git.html#fetch",
    "href": "slides/productivity/04-git.html#fetch",
    "title": "Git and GitHub",
    "section": "Fetch",
    "text": "Fetch\n\nTo update our local repository to the remote one we use\n\n\ngit fetch"
  },
  {
    "objectID": "slides/productivity/04-git.html#merge",
    "href": "slides/productivity/04-git.html#merge",
    "title": "Git and GitHub",
    "section": "Merge",
    "text": "Merge\n\nOnce we are sure this is good, we can merge with our local files:\n\n\ngit merge"
  },
  {
    "objectID": "slides/productivity/04-git.html#pull",
    "href": "slides/productivity/04-git.html#pull",
    "title": "Git and GitHub",
    "section": "Pull",
    "text": "Pull\n\nI rarely use fetch and merge and instead use pull which does both of these in one step\n\n\ngit pull"
  },
  {
    "objectID": "slides/productivity/04-git.html#checkout",
    "href": "slides/productivity/04-git.html#checkout",
    "title": "Git and GitHub",
    "section": "Checkout",
    "text": "Checkout\n\nIf you want to pull down a specific file you from the remote repo you can use:\n\n\ngit checkout filename\n\n\nI use this when I make changes but decide I want to go back to original version on remote repo.\n\n\n\n\n\n\n\nWarning\n\n\nIf you have a newer version in your local repository this will create a conflict. It won’t let you do it. If you are sure you want to get rid of your local copy you can remove it and then use checkout."
  },
  {
    "objectID": "slides/productivity/04-git.html#checkout-1",
    "href": "slides/productivity/04-git.html#checkout-1",
    "title": "Git and GitHub",
    "section": "Checkout",
    "text": "Checkout\n\nYou can also use checkout to obtain older version:\n\n\ngit checkout &lt;commit-id&gt; &lt;filename&gt;\n\n\nYou can get the commit-id either on the GitHub webpage or using\n\n\ngit log filename"
  },
  {
    "objectID": "slides/productivity/04-git.html#reset",
    "href": "slides/productivity/04-git.html#reset",
    "title": "Git and GitHub",
    "section": "Reset",
    "text": "Reset\n\nWhat if I commit and realize it was a mistake?\n\n\ngit reset HEAD~1\n\nundos the commit and unstages the files, but keeps your local copies. I use this on very often.\n\nThere are many wasy of using get reset and it covers most scenarios.\nChatGPT and stackoverflow are great resources to learn more."
  },
  {
    "objectID": "slides/productivity/04-git.html#branches",
    "href": "slides/productivity/04-git.html#branches",
    "title": "Git and GitHub",
    "section": "Branches",
    "text": "Branches\n\nWe are just sratching the surface of Git.\nOne advanced feature to be aware of is that you can have several branches, useful for working in parallel or testing stuff out that might not make the main repo.\n\n\nArt by: Allison Horst"
  },
  {
    "objectID": "slides/productivity/04-git.html#branches-1",
    "href": "slides/productivity/04-git.html#branches-1",
    "title": "Git and GitHub",
    "section": "Branches",
    "text": "Branches\n\nWe wont go over this, but we might need to use these two related commands:\n\n\ngit remote -v\ngit brach"
  },
  {
    "objectID": "slides/productivity/04-git.html#clone",
    "href": "slides/productivity/04-git.html#clone",
    "title": "Git and GitHub",
    "section": "Clone",
    "text": "Clone\n\nAnother common command is git clone.\nIt let’s download an entire repo, including version history.\n\n\ngit clone &lt;repo-url&gt;"
  },
  {
    "objectID": "slides/productivity/04-git.html#using-git-in-rstudio",
    "href": "slides/productivity/04-git.html#using-git-in-rstudio",
    "title": "Git and GitHub",
    "section": "Using Git in RStudio",
    "text": "Using Git in RStudio\n\nGo to file, new project, version control, and follow the instructions.\nThen notice the Git tab in the preferences."
  }
]