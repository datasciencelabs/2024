---
title: "Data Visualization Principles"
keywords: "Wrangling"
date: 2024-08-07
format:
  revealjs:
    theme: night
execute: 
  echo: false
---

## Some motivation

* The next few slides are examples of infogrpahics that don't follow data visualization principles.

* We use them as motivation 

* Several of the examples come from here: [https://venngage.com/blog/bad-infographics/](https://venngage.com/blog/bad-infographics/)


## Some motivation

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/bar-plot-honduras-election.jpeg){fig-align="center" height=400}


## Some motivation


![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/coronavirusbargraph-cropped.jpeg){fig-align="center" height=400}

## Some motivation

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/crazy-pie-chart.png){fig-align="center" height=400}

## Some motivation

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/piechart2.jpeg){fig-align="center" height=400}

## Some motivation

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/crazy-arrows.jpeg){fig-align="center" height=400}

## Some motivation

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/misleading1.jpeg){fig-align="center" height=400}

## Some motivation

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/womenicons.jpeg){fig-align="center" height=400}

## Data visualization principles

* We provide some general principles we can use as a guide for effective data visualization. 

* Much of this section is based on a talk by [Karl Broman](http://kbroman.org/) titled [_Creating Effective Figures and Tables_](https://www.biostat.wisc.edu/~kbroman/presentations/graphs2017.pdf) and includes some of the figures which were made with code that Karl makes available on his [GitHub repository](https://github.com/kbroman/Talk_Graphs), as well as class notes from Peter Aldhous' Introduction to [Data Visualization course](http://paldhous.github.io/ucb/2016/dataviz/index.html). 

## Data visualization principles

* Following Karl's approach, we show some examples of plot styles we should avoid, explain how to improve them, and use these as motivation for a list of principles. 

* We compare and contrast plots that follow these principles to those that don't.

## Data visualization principles

* The principles are mostly based on research related to how humans detect patterns and make visual comparisons. 

* The preferred approaches are those that best fit the way our brains process visual information. 

* When deciding on a visualization approach, it is also important to keep our goal in mind. 

## Data visualization principles

We may be comparing a 

* viewable number of quantities
* describing distributions for categories or numeric values
* comparing the data from two groups
* or describing the relationship between two variables.


```{r, warning=FALSE, message=FALSE}
library(tidyverse)
```


## Encoding data using visual cues

We start by describing some principles for visualy encoding numerical values. There are several approaches at our disposal including:

* aligned lengths
* position
* angles
* area
* brightness
* color hue

## Encoding data using visual cues

```{r}
browsers <- data.frame(Browser = rep(c("Opera","Safari","Firefox","IE","Chrome"),2),
                       Year = rep(c(2000, 2015), each = 5),
                       Percentage = c(3,21,23,28,26, 2,22,21,27,29)) |>
  mutate(Browser = reorder(Browser, Percentage))
```

Example:

* Suppose we want to report the results from two hypothetical polls regarding browser preference taken in 2000 and then 2015. 

* For each year, we are simply comparing five quantities – the five percentages for Opera, Safari, Firefox,IE, and Chrome.


## Encoding data using visual cues

* A widely used graphical representation of percentages, popularized by Microsoft Excel, is the pie chart:


```{r piechart}
p1 <- browsers |> 
  ggplot(aes(x = "", y = Percentage, fill = Browser)) +
  geom_bar(width = 1, stat = "identity", col = "black")  + 
  coord_polar(theta = "y") +
  xlab("") + ylab("") +
  theme(axis.text = element_blank(), 
        axis.ticks = element_blank(), 
        panel.grid  = element_blank()) +
  facet_grid(.~Year)
p1
```

## Encoding data using visual cues

* Here we are representing quantities with both areas and angles, since both the angle and area of each pie slice are proportional to the quantity the slice represents. 

* This turns out to be a sub-optimal choice since, as demonstrated by perception studies, humans are not good at precisely quantifying angles and are even worse when area is the only available visual cue. 


## Encoding data using visual cues

The donut chart is an example of a plot that uses only area:

```{r donutchart}
browsers |> ggplot(aes(x = 2, y = Percentage, fill = Browser)) +
  geom_bar(width = 1, stat = "identity", col = "black")  + 
  scale_x_continuous(limits = c(0.5,2.5)) + coord_polar(theta = "y") +
  xlab("") + ylab("") +
  theme(axis.text = element_blank(), 
        axis.ticks = element_blank(), 
        panel.grid  = element_blank()) +
  facet_grid(.~Year)

```


## Compare 2000 to 2015

* Can you determine the actual percentages and rank the browsers' popularity? 

* Can you see how the percentages changed from 2000 to 2015? 

```{r piechart-2}
library(ggthemes)
p1 <- browsers |> ggplot(aes(x = "", y = Percentage, fill = Browser)) +
  geom_bar(width = 1, stat = "identity", col = "black")  + coord_polar(theta = "y") +
  xlab("") + ylab("") +
  theme(axis.text = element_blank(), 
        axis.ticks = element_blank(), 
        panel.grid  = element_blank()) +
  facet_grid(.~Year)
p1
```



## Show the numbers

A better approach is to simply show the numbers. It is not only clearer, but would also save on printing costs if printing a paper copy:

```{r, warning=FALSE}
browsers |> 
  spread(Year, Percentage) |> 
  knitr::kable()
```

## Barplots

Length is the best visual cue:

```{r two-barplots, out.width="75%", fig.width = 6, fig.height = 4}
library(gridExtra)
p2 <- browsers |>
  ggplot(aes(Browser, Percentage)) + 
  geom_bar(stat = "identity", width = 0.5) +
  ylab("Percent using the Browser") +
  facet_grid(.~Year)

grid.arrange(p1, p2, nrow = 2)
```


## If foreced to make a pie chart 

Label each pie slice with its respective percentage so viewers do not have to infer them from the angles or area:

```{r excel-barplot, warning = FALSE, message=FALSE}
library(scales)
browsers <- filter(browsers, Year == 2015)
at <- with(browsers, 100 - cumsum(c(0,Percentage[-length(Percentage)])) - 0.5*Percentage)  
label <- percent(browsers$Percentage/100)
browsers |> ggplot(aes(x = "", y = Percentage, fill = Browser)) +
  geom_bar(width = 1, stat = "identity", col = "black")  + coord_polar(theta = "y") +
  xlab("") + ylab("") + ggtitle("2015") +
  theme(axis.text=element_blank(), 
        axis.ticks = element_blank(), 
        panel.grid  = element_blank()) +
annotate(geom = "text", 
              x = 1.62, 
              y =  at, 
              label = label, size=4)
```


## Know when to include 0

* When using barplots, it is misinformative not to start the bars at 0. 

* This is because, by using a barplot, we are implying the length is proportional to the quantities being displayed. 

* By avoiding 0, relatively small differences can be made to look much bigger than they actually are.

* This approach is often used by politicians or media organizations trying to exaggerate a difference. 


## Know when to include 0

Below is an illustrative example used by Peter Aldhous in [this lecture](http://paldhous.github.io/ucb/2016/dataviz/week2.html).

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/class2_8.jpg){fig-align="center" height=400}

(Source: [Fox News, via Media Matters](http://mediamatters.org/blog/2013/04/05/fox-news-newest-dishonest-chart-immigration-enf/193507).)



## Know when to include 0

Here is the correct plot:

```{r barplot-from-zero-1}
data.frame(Year = as.character(c(2011, 2012, 2013)),Southwest_Border_Apprehensions = c(165244,170223,192298)) |>
  ggplot(aes(Year, Southwest_Border_Apprehensions )) +
  geom_bar(stat = "identity", fill = "yellow", col = "black", width = 0.65) 
```

## Know when to include 0

Another examples: 

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/Bush-cuts.png){fig-align="center" height=400}

(Source: [Fox News, via Flowing Data](http://flowingdata.com/2012/08/06/fox-news-continues-charting-excellence/).)

## Know when to include 0

And here is the correct plot: 

```{r barplot-from-zero-2}
data.frame(date = c("Now", "Jan 1, 2013"), tax_rate = c(35, 39.6)) |>
  mutate(date = reorder(date, tax_rate)) |>
  ggplot(aes(date, tax_rate)) + 
  ylab("") + xlab("") +
  geom_bar(stat = "identity", fill = "yellow", col = "black", width = 0.5) + 
  ggtitle("Top Tax Rate If Bush Tax Cut Expires")
```

## Know when to include 0

One more example: 

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/venezuela-election.png){fig-align="center" height=400}

(Source: 
[Venezolana de Televisión via Pakistan Today](https://www.pakistantoday.com.pk/2018/05/18/whats-at-stake-in-venezuelan-presidential-vote) and Diego Mariano.)

## Know when to include 0

Here is the appropriate plot:

```{r barplot-from-zero-3}
data.frame(Candidate = factor(c("Maduro", "Capriles"), levels = c("Maduro", "Capriles")),
           Percent = c(50.66, 49.07)) |>
  ggplot(aes(Candidate, Percent, fill = Candidate)) +
  geom_bar(stat = "identity", width = 0.65, show.legend = FALSE) 
```

## Know when to include 0

* When using position rather than length, it is then not necessary to include 0. 

* In particularly when comparing differences between to within groups variability. 

```{r points-plot-not-from-zero, out.width="75%",  fig.width = 6, fig.asp=0.5625}
library(dslabs)
p1 <- gapminder |> filter(year == 2012) |>
  ggplot(aes(continent, life_expectancy)) +
  geom_point()
p2 <- p1 +
  scale_y_continuous(limits = c(0, 84))
grid.arrange(p2, p1, ncol = 2)
```


## Do not distort quantities

During President Barack Obama’s 2011 State of the Union Address, the following chart was used to compare the US GDP to the GDP of four competing nations:

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/state-of-the-union.jpg){fig-align="center" height=400}

(Source: [The 2011 State of the Union Address](https://www.youtube.com/watch?v=kl2g40GoRxg))


## Do not distort quantities

Here is comparison of using radius versus area:

```{r area-not-radius, echo = FALSE}
gdp <- c(14.6, 5.7, 5.3, 3.3, 2.5)
gdp_data <- data.frame(Country = rep(c("United States", "China", "Japan", "Germany", "France"),2),
           y = factor(rep(c("Radius","Area"),each = 5), levels = c("Radius", "Area")),
           GDP = c(gdp^2/min(gdp^2), gdp/min(gdp))) |> 
   mutate(Country = reorder(Country, GDP))
gdp_data |> 
  ggplot(aes(Country, y, size = GDP)) + 
  geom_point(show.legend = FALSE, color = "blue") + 
  scale_size(range = c(2,20)) +
  coord_flip() + ylab("") + xlab("")
```

## Do not distort quantities

* __ggplot2__ defaults to using area rather than radius. 

Of course, in this case, we really should be using length:

```{r barplot-better-than-area}
data.frame(Country = c("United States", "China", "Japan", "Germany", "France"), GDP = gdp) |>
  mutate(Country = reorder(Country, GDP)) |>
  ggplot(aes(Country, GDP)) + 
  geom_col(width = 0.5) + 
  ylab("GDP in trillions of US dollars")
```

## Order categories by a meaningful value

* When one of the axes is used to show categories the default __ggplot2__ behavior is to order the categories alphabetically when they are defined by character strings. 

* If they are defined by factors, they are ordered by the factor levels. 

* We rarely want to use alphabetical order. 

* Instead, we should order by a meaningful quantity. 

## Order categories by a meaningful value

Note that the plot on the right is more informative:

```{r do-not-order-alphabetically, fig.width = 8, out.width="75%"}
data(murders)
p1 <- murders |> mutate(murder_rate = total / population * 100000) |>
  ggplot(aes(state, murder_rate)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  theme(axis.text.y = element_text(size = 8))  +
  xlab("")

p2 <- murders |> mutate(murder_rate = total / population * 100000) |>
  mutate(state = reorder(state, murder_rate)) |>
  ggplot(aes(state, murder_rate)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  theme(axis.text.y = element_text(size = 8))  +
  xlab("")

grid.arrange(p1, p2, ncol = 2)
```


## Order categories by a meaningful value

Here is another example:

```{r reorder-boxplot-example, out.width="80%"}
past_year <- 1970
p1 <- gapminder |> 
  mutate(dollars_per_day = gdp/population/365) |>
  filter(year == past_year & !is.na(gdp)) |>
  ggplot(aes(region, dollars_per_day)) +
  geom_boxplot() +
  geom_point() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  xlab("")

p2 <- gapminder |> 
  mutate(dollars_per_day = gdp/population/365) |>
  filter(year == past_year & !is.na(gdp)) |>
  mutate(region = reorder(region, dollars_per_day, FUN = median)) |>
  ggplot(aes(region, dollars_per_day)) +
  geom_boxplot() +
  geom_point() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  xlab("")

grid.arrange(p1, p2, nrow = 1)
```


## Show the data

We have focused on displaying single quantities across categories. We now shift our attention to displaying data, with a focus on comparing groups. 

Supppose we want to describe the heigh data to an extra-terrestrial. 

## Show the data

A commonly used plot, popularized by Microsoft Excel, is a barplot like this:

```{r show-data-1}
data("heights")
p1 <- heights |> 
  group_by(sex) |> 
  summarize(average = mean(height), se=sd(height)/sqrt(n())) |>
  ggplot(aes(sex, average)) + 
  theme_excel() + 
  geom_errorbar(aes(ymin = average - 2*se, ymax = average + 2*se), width = 0.25) +
  geom_bar(stat = "identity", width = 0.5, fill = "blue", color = "black") +
  ylab("Height in inches")
p1
```

## Show the data

```{r, eval=FALSE}
heights |> 
  ggplot(aes(sex, height)) + 
  geom_point() 
```


```{r show-data-2}
heights |> 
  ggplot(aes(sex, height)) + 
  geom_point() 
```


## Show the data

But this plot can be improved with jitter as there is much over-plotting

```{r eval=FALSE}
heights |> 
  ggplot(aes(sex, height)) +
  geom_jitter(width = 0.1, alpha = 0.2) 
```


```{r show-points-with-jitter}
heights |> 
  ggplot(aes(sex, height)) +
  geom_jitter(width = 0.1, alpha = 0.2) 
```


## Histograms

Since there are so many points, it is more effective to show distributions rather than individual points. We therefore show histograms for each group:

```{r common-axes-histograms-wrong}
heights |> 
  ggplot(aes(height, ..density..)) +
  geom_histogram(binwidth = 1, color = "black") +
  facet_grid(.~sex, scales = "free_x")
```

## Ease comparisons

* Use common axes

* If horizontal comparison, stack graphs vertically

* If vertical comparison, stack graphs horizontally


## Stack vertically

```{r common-axes-histograms-better, fig.asp=1}
heights |> 
  ggplot(aes(height, ..density..)) +
  geom_histogram(binwidth = 1, color="black") +
  facet_wrap(~sex, scales = "free_x", nrow=2)
```

## Same axis

```{r common-axes-histograms-right, fig.asp = 1}
p2 <- heights |> 
  ggplot(aes(height, ..density..)) +
  geom_histogram(binwidth = 1, color = "black") +
  facet_grid(sex~.)
p2
```


## Boxplot is a vertical 

Stack horizontally

```{r boxplot-with-points-with-jitter}
p3 <- heights |> 
  ggplot(aes(sex, height)) + 
  geom_boxplot(coef = 3) + 
  geom_jitter(width = 0.1, alpha = 0.2) +
  ylab("Height in inches")
p3
```


## Contrast and compare

```{r show-the-data-comparison, out.width="100%", fig.asp = 0.4}
grid.arrange(p1, p2, p3, ncol = 3)
```


## Consider transformations

Here is a terribly plot comparing population across continents

```{r no-transformations-wrong-use-of-barplot}
data(gapminder)
p1 <- gapminder |> 
  filter(year == 2015) |>
  group_by(continent) |> 
  summarize(population = mean(population)) |>
  mutate(continent = reorder(continent, population)) |>
  ggplot(aes(continent, population/10^6)) + 
  geom_bar(stat = "identity", width=0.5, fill = "blue") +
  theme_excel() + 
  ylab("Population in Millions") +
  xlab("Continent")
p1
```

## Two countries drive average

```{r no-transformation}
p2 <- gapminder |> filter(year == 2015) |> 
  mutate(continent = reorder(continent, population, median)) |>
  ggplot(aes(continent, population/10^6)) + 
  ylab("Population in Millions") +
  xlab("Continent")
p2 +  geom_jitter(width = .1, alpha = .5) 
```

## Log, square root or logit transformations

Using a log transformation here provides a much more informative plot. 

Compare these two plots:

```{r correct-transformation, out.width="90%", fig.asp=0.5}
p2 <- p2 + geom_boxplot(coef = 3) + 
  geom_jitter(width = .1, alpha = .5) + 
  scale_y_log10(breaks = c(1,10,100,1000)) +
  theme(axis.text.x = element_text(size = 7)) 
grid.arrange(p1, p2, ncol = 2)
```


## Visual cues to be compared should be adjacent


Note that it is hard to compare 1970 to 2020 by country:

```{r boxplots-not-adjacent}
gapminder |> 
  filter(year %in% c(1970, 2010) & !is.na(gdp)) |>
  mutate(dollars_per_day = gdp/population/365) |>
  mutate(labels = paste(year, continent)) |>
  ggplot(aes(labels, dollars_per_day)) +
  geom_boxplot() + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  scale_y_continuous(trans = "log2") + 
  ylab("Income in dollars per day")
```

## Visual cues to be compared should be adjacent

Much easier if they are adjacent

```{r boxplot-adjacent-comps}
gapminder |> 
  filter(year %in% c(1970, 2010) & !is.na(gdp)) |>
  mutate(dollars_per_day = gdp/population/365) |>
  mutate(labels = paste(continent, year)) |>
  ggplot(aes(labels, dollars_per_day)) +
  geom_boxplot() + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  scale_y_continuous(trans = "log2") + 
  ylab("Income in dollars per day")
```

## Use color 

The comparison becomes even easier to make if we use color to denote the two things we want to compare: 


```{r boxplot-adjacent-comps-with-color}
 gapminder |> 
  filter(year %in% c(1970, 2010) & !is.na(gdp)) |>
  mutate(dollars_per_day = gdp/population/365, year = factor(year)) |>
  ggplot(aes(continent, dollars_per_day, fill = year)) +
  geom_boxplot() + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  scale_y_continuous(trans = "log2") + 
  ylab("Income in dollars per day")
```


## Think of the color blind

* Approximately 1 in 12 men (8%) and 1 in 200 women (0.5%) worldwide are color blind.

* The most common type of color blindness is red-green color blindness, which affects around 99% of all color blind individuals. 

* The prevalence of blue-yellow color blindness and total color blindness (achromatopsia) is much lower.

* An example of how we can use a color blind friendly palette is described [here](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette).

## Think of the color blind

* Example of color-blind-friendly color palette:

```{r color-blind-friendly-colors, fig.asp=0.1, out.width="100%"}
color_blind_friendly_cols <- 
  c("#999999", "#E69F00", "#56B4E9", "#009E73", 
    "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

p1 <- data.frame(x = 1:8, y = rep(1,8), col = as.character(1:8)) |> 
  ggplot(aes(x, y, color = col)) + 
  geom_point(size = 8, show.legend = FALSE) +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank())

p1 + scale_color_manual(values = color_blind_friendly_cols)
```

## Plots for two variables

In general, you should use scatterplots to visualize the relationship between two variables.

However, there are some exceptions. 

* We describe two alternative plots here: 
  - _slope chart_ 
  -  _Bland-Altman plot_
  
  
## Slope charts

Slope charts adds angle as a visual cue, useful when comparing two groups **and** each element across two variables, such as years.

```{r slope-plot}
west <- c("Western Europe","Northern Europe","Southern Europe",
          "Northern America","Australia and New Zealand")

dat <- gapminder |> 
  filter(year %in% c(2010, 2015) & region %in% west & 
           !is.na(life_expectancy) & population > 10^7) 

dat |>
  mutate(location = ifelse(year == 2010, 1, 2), 
         location = ifelse(year == 2015 & 
                             country %in% c("United Kingdom", "Portugal"),
                           location + 0.22, location),
         hjust = ifelse(year == 2010, 1, 0)) |>
  mutate(year = as.factor(year)) |>
  ggplot(aes(year, life_expectancy, group = country)) +
  geom_line(aes(color = country), show.legend = FALSE) +
  geom_text(aes(x = location, label = country, hjust = hjust), 
            show.legend = FALSE) +
  xlab("") + ylab("Life Expectancy")
```


## Scatterplot version

```{r scatter-plot-instead-of-slope}
library(ggrepel)
west <- c("Western Europe","Northern Europe","Southern Europe",
          "Northern America","Australia and New Zealand")

dat <- gapminder |> 
  filter(year %in% c(2010, 2015) & region %in% west & 
           !is.na(life_expectancy) & population > 10^7) 

dat |> 
  mutate(year = paste0("life_expectancy_", year)) |>
  select(country, year, life_expectancy) |>
  spread(year, life_expectancy) |> 
  ggplot(aes(x=life_expectancy_2010,y=life_expectancy_2015, label = country)) + 
  geom_point() + geom_text_repel() +
  scale_x_continuous(limits = c(78.5, 83)) +
  scale_y_continuous(limits = c(78.5, 83)) +
  geom_abline(lty = 2) +
  xlab("2010") + 
  ylab("2015")
```


## Bland-Altman plot

Shows difference in the y-axis and average on the x-axis.

```{r, bland-altman}
library(ggrepel)
dat |> 
  mutate(year = paste0("life_expectancy_", year)) |>
  select(country, year, life_expectancy) |> 
  pivot_wider(names_from = "year", values_from = "life_expectancy") |> 
  mutate(average = (life_expectancy_2015 + life_expectancy_2010)/2,
         difference = life_expectancy_2015 - life_expectancy_2010) |>
  ggplot(aes(average, difference, label = country)) + 
  geom_point() +
  geom_text_repel() +
  geom_abline(lty = 2) +
  xlab("Average of 2010 and 2015") + 
  ylab("Difference between 2015 and 2010")
```

## Encoding a third variable

We can use 

* different colors or shapes for categoris

* areas, brightness or hue for continuous values

## Encoding a third variable

Below is an example that encodes three variables: OPEC membership, region, and population.

```{r encoding-third-variable}
present_year <- 2010

dat <- gapminder |>
  mutate(region = case_when(
    region %in% west ~ "The West",
    region %in% "Northern Africa" ~ "Northern Africa",
    region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
    region == "Southern Asia"~ "Southern Asia",
    region %in% c("Central America", "South America", "Caribbean") ~ "Latin America",
    continent == "Africa" & region != "Northern Africa" ~ "Sub-Saharan Africa",
    region %in% c("Melanesia", "Micronesia", "Polynesia") ~ "Pacific Islands"),
    dollars_per_day = gdp / population / 365) |>
  filter(year %in% present_year & !is.na(gdp) & !is.na(infant_mortality) & !is.na(region) ) |>
  mutate(OPEC = ifelse(country %in% opec, "Yes", "No")) 

dat |> 
  ggplot(aes(dollars_per_day, 1 - infant_mortality/1000, 
             col = region, size = population/10^6,
             pch =  OPEC)) +
  scale_x_continuous(trans = "log2", limits = c(0.25, 150)) +
  scale_y_continuous(trans = "logit",limit = c(0.875, .9981),
                     breaks = c(.85,.90,.95,.99,.995,.998)) + 
  geom_point(alpha = 0.5) +
  ylab("Infant survival proportion")
```

## Point shapes available in R

```{r available-shapes, fig.height=2.25}
dat <- data.frame(x = c(0:25))
ggplot() +
  theme_minimal() +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank()) +
scale_shape_identity() + scale_y_reverse() +
geom_point(dat, mapping = aes(x%%9, x%/%9, shape = x), size = 4, fill="blue") +
geom_text(dat, mapping = aes(x%%9, x%/%9+0.25, label = x), size = 4) 
```

## Using intensity or hue 

When selecting colors to quantify a numeric variable, we choose between two options: sequential and diverging. 

## Sequential colors 

Sequential colors are suited for data that goes from high to low.  High values are clearly distinguished from low values. Here are some examples offered by the package `RColorBrewer`:

```{r r-color-brewer-seq, fig.height=3.5}
library(RColorBrewer)
rafalib::mypar()
display.brewer.all(type = "seq")
```

## Diverging colors

Diverging colors are used to represent values that diverge from a center. We put equal emphasis on both ends of the data range: higher than the center and lower than the center. 


```{r r-color-brewer-div, fig.height=2.5}
library(RColorBrewer)
rafalib::mypar()
display.brewer.all(type = "div")
```


## Avoid pseudo-3D plots

The figure below, taken from the [scientific literature](https://projecteuclid.org/download/pdf_1/euclid.ss/1177010488),
shows three variables: dose, drug type and survival:

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/fig8b.png){fig-align="center" height=400}


## Avoid pseudo-3D plots

* Humans are not good at seeing in three dimensions and our limitation is even worse with regard to pseudo-three-dimensions. 

## Avoid pseudo-3D plots

* Try to determine the values of the survival variable in the previous plot. 

* Can you tell when the purple ribbon intersects the red one? 

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/fig8b.png){fig-align="center" height=400}

## Avoid pseudo-three-dimensional plots

This is an example in which we can easily use color to represent the categorical variable instead of using a pseudo-3D:

```{r colors-for-different-lines}
##First read data
url <- "https://github.com/kbroman/Talk_Graphs/raw/master/R/fig8dat.csv"
dat <- read.csv(url)

##Now make alternative plot
dat |> gather(drug, survival, -log.dose) |>
  mutate(drug = gsub("Drug.","",drug)) |>
  ggplot(aes(log.dose, survival, color = drug)) +
  geom_line()    
```

## Avoid pseudo-three-dimensional plots

Pseudo-3D is sometimes used completely gratuitously: plots are made to look 3D even when the 3rd dimension does not represent a quantity. This only adds confusion and makes it harder to relay your message.  We show two examples:

## Avoid pseudo-three-dimensional plots
:::{layout-ncol=2}

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/fig1e.png){fig-align="center" height=400}

![](https://raw.githubusercontent.com/datasciencelabs/2022/refs/heads/master/dataviz/img/fig2d.png){fig-align="center" height=400}
:::

(Images courtesy of Karl Broman)


## Avoid too many significant digits

* By default, statistical software like R returns many significant digits.

* The default behavior in R is to show 7 significant digits.

* That many digits often adds no information and the added visual clutter can make it hard for the viewer to understand the message. 

## Avoid too many significant digits

As an example, here are the per 10,000 disease rates, computed from totals and population in R, for California across the five decades:

```{r}
data(us_contagious_diseases)
tmp <- 3
options(digits = 7)
dat <- us_contagious_diseases |>
  filter(year %in% seq(1940, 1980, 10) &  state == "California" &
           disease %in% c("Measles", "Pertussis", "Polio")) |>
  mutate(rate = count / population * 10000) |> 
  mutate(state = reorder(state, rate)) |> 
  select(state, year, disease, rate) |>
  spread(disease, rate) 

knitr::kable(dat) 
```

## Avoid too many significant digits

* We are reporting precision up to 0.00001 cases per 10,000, a very small value in the context of the changes that are occurring across the dates. 

```{r}
knitr::kable(dat) 

options(digits = tmp)
```

## Avoid too many significant digits

* In this case, two significant figures is more than enough and clearly makes the point that rates are decreasing:

```{r, echo = FALSE}
dat0 <- dat |> 
  mutate_at(c("Measles", "Pertussis", "Polio"), ~round(., digits=1))
knitr::kable(dat0) 
```

## Avoid too many significant digits

Useful ways to change the number of significant digits or to round numbers are

* `signif`

* `round`

You can define the number of significant digits globally by setting options like this: `options(digits = 3)`. 


## Values compared in columns

Another principle related to displaying tables is to place values being compared on columns rather than rows. Compare these two presentations:

```{r}
dat <- us_contagious_diseases |>
  filter(year %in% seq(1940, 1980, 10) &  state == "California" &
          disease %in% c("Measles", "Pertussis", "Polio")) |>
  mutate(rate = count / population * 10000) |> 
  mutate(state = reorder(state, rate)) |> 
  select(state, year, disease, rate) |>
  spread(year, rate) |> 
  mutate_if(is.numeric, round, digits = 1) 

knitr::kable(dat)
```

## Values compared in columns

Another principle related to displaying tables is to place values being compared on columns rather than rows. Compare these two presentations:


```{r, echo = FALSE}
knitr::kable(dat0)
```


## Know your audience

Graphs can be used for 

1. our own exploratory data analysis, 

2. to convey a message to experts, or 

3. to help tell a story to a general audience. 

Make sure that the intended audience understands each element of the plot. 

