---
title: "Joining Tables"
keywords: "Wrangling"
date: 2024-09-30
format:
  revealjs:
    theme: night
execute: 
  echo: true
---

## Joining tables

- The information we need for a given analysis may not be just in one table.

- Here we use a simple examples to illustrate the general challenge of combining tables.

## Joining tables

- Suppose we want to explore the relationship between population size for US states and electoral votes.

- We have the population size in this table:

```{r, warning=FALSE, message=FALSE} 
library(tidyverse) 
library(dslabs) 
head(murders) 
``` 



## Joining tables

- and electoral votes in this one:

```{r} 
head(results_us_election_2016) 
``` 

## Joining tables

- Just concatenating these two tables together will not work since the order of the states is not the same.

```{r} 
identical(results_us_election_2016$state, murders$state) 
``` 

## Joins

- The _join_ functions are designed to handle this challenge.

- The _join_ functions in the __dplyr__ package make sure that the tables are combined so that matching rows are together.

- The general idea is that one needs to identify one or more columns that will serve to match the two tables.

- A new table with the combined information is returned.

## Joins

- Notice what happens if we join the two tables above by state using `left_join`:

```{r} 
tab <- left_join(murders, results_us_election_2016, by = "state") |> 
  select(-others) |> rename(ev = electoral_votes) 
head(tab) 
``` 



## Joins

- The data has been successfully joined and we can now, for example, make a plot to explore the relationship:


```{r ev-vs-population, message=FALSE, warning=FALSE, echo=FALSE} 
library(ggrepel) 
tab |> ggplot(aes(population/10^6, ev, label = abb)) + 
  geom_point() + 
  scale_x_log10() + scale_y_log10() + 
  geom_text_repel() +  
  geom_smooth(method = "lm", se = FALSE) 
``` 


## Joins

- We see the relationship is close to linear with about 2 electoral votes for every million persons, but with very small states getting higher ratios.

- In practice, it is not always the case that each row in one table has a matching row in the other.

- For this reason, we have several versions of join.

- To illustrate this challenge, we will take subsets of the tables above.


## Joins

![](https://rafalab.dfci.harvard.edu/dsbook-part-1/wrangling/img/joins.png){width="35%" fig-align="center"}.

Note: These names are based on SQL.

## Joins

- We create the tables `tab1` and `tab2` so that they have some states in common but not all:

```{r} 
tab_1 <- slice(murders, 1:6) |> select(state, population) 
tab_2 <- results_us_election_2016 |>  
  filter(state %in% c("Alabama", "Alaska", "Arizona",  
                    "California", "Connecticut", "Delaware")) |>  
  select(state, electoral_votes) |> rename(ev = electoral_votes) 
``` 

- We will use these two tables as examples in the next sections.



## Left join

- Suppose we want a table like `tab_1`, but adding electoral votes to whatever states we have available.

- For this, we use `left_join` with `tab_1` as the first argument.

- We specify which column to use to match with the `by` argument.

```{r} 
left_join(tab_1, tab_2, by = "state") 
``` 

- Note that `NA`s are added to the two states not appearing in `tab_2`.



## Left join

- Also, notice that this function, as well as all the other joins, can receive the first arguments through the pipe:

```{r, eval=FALSE} 
tab_1 |> left_join(tab_2, by = "state") 
``` 



## Right join

- If instead of a table with the same rows as first table, we want one with the same rows as second table, we can use `right_join`:

```{r} 
tab_1 |> right_join(tab_2, by = "state") 
``` 

- Now the NAs are in the column coming from `tab_1`.



## Inner join

- If we want to keep only the rows that have information in both tables, we use `inner_join`.

- You can think of this as an intersection:

```{r} 
inner_join(tab_1, tab_2, by = "state") 
``` 



## Full join

- If we want to keep all the rows and fill the missing parts with NAs, we can use `full_join`.

- You can think of this as a union:

```{r} 
full_join(tab_1, tab_2, by = "state") 
``` 



## Semi join

- The `semi_join` function lets us keep the part of first table for which we have information in the second.

- It does not add the columns of the second:

```{r} 
semi_join(tab_1, tab_2, by = "state") 
``` 



## Anti join

- The function `anti_join` is the opposite of `semi_join`.

- It keeps the elements of the first table for which there is no information in the second:

```{r} 
anti_join(tab_1, tab_2, by = "state") 
``` 

## Binding

- Although we have yet to use it in this book, another common way in which datasets are combined is by _binding_ them.

- Unlike the join function, the binding functions do not try to match by a variable, but instead simply combine datasets.

- If the datasets don't match by the appropriate dimensions, one obtains an error.



## Binding columns

- The __dplyr__ function _bind_cols_ binds two objects by making them columns in a tibble.


```{r} 
bind_cols(a = 1:3, b = 4:6) 
``` 

- This function requires that we assign names to the columns. Here we chose `a` and `b`.

- Note that there is an R-base function `cbind` with the exact same functionality.



## Binding columns

- An important difference is that `cbind` can create different types of objects, while `bind_cols` always produces a data frame.

- `bind_cols` can also bind two different data frames.

## Binding columns

- For example, here we break up the `tab` data frame and then bind them back together:

```{r} 
tab_1 <- tab[, 1:3] 
tab_2 <- tab[, 4:6] 
tab_3 <- tab[, 7:8] 
new_tab <- bind_cols(tab_1, tab_2, tab_3) 
head(new_tab) 
``` 



## Binding by rows

- The `bind_rows` function is similar to `bind_cols`, but binds rows instead of columns:

```{r} 
tab_1 <- tab[1:2,] 
tab_2 <- tab[3:4,] 
bind_rows(tab_1, tab_2) 
``` 

- This is based on an R-base function `rbind`.



## Set operators

- Another set of commands useful for combining datasets are the set operators.

- When applied to vectors, these behave as their names suggest.

- Examples are `intersect`, `union`, `setdiff`, and `setequal`.

- However, if the __tidyverse__, or  more specifically __dplyr__, is loaded, these functions can be used on data frames as opposed to just on vectors.



## Intersect

- You can take intersections of vectors of any type, such as numeric:

```{r} 
intersect(1:10, 6:15) 
``` 

- or characters:

```{r} 
intersect(c("a","b","c"), c("b","c","d")) 
``` 

- __dplyr__ includes an `intersect` function that can be applied to tables with the same column names.

- This function returns the rows in common between two tables.



## Intersect

- To make sure we use the __dplyr__ version of `intersect` rather than the base R version, we can use `dplyr::intersect` like this:

```{r} 
tab_1 <- tab[1:5,] 
tab_2 <- tab[3:7,] 
dplyr::intersect(tab_1, tab_2) 
``` 



## Union

- Similarly _union_ takes the union of vectors.

- For example:

```{r} 
union(1:10, 6:15) 
union(c("a","b","c"), c("b","c","d")) 
``` 

## Union

- __dplyr__ includes a version of `union` that combines all the rows of two tables with the same column names.

```{r} 
tab_1 <- tab[1:5,] 
tab_2 <- tab[3:7,] 
dplyr::union(tab_1, tab_2)  
``` 



## `setdiff`

- The set difference between a first and second argument can be obtained with `setdiff`.

- Unlike `intersect` and `union`, this function is not symmetric:

```{r} 
setdiff(1:10, 6:15) 
setdiff(6:15, 1:10) 
``` 

## `setdiff`


- As with the functions shown above, __dplyr__ has a version for data frames:

```{r} 
tab_1 <- tab[1:5,] 
tab_2 <- tab[3:7,] 
dplyr::setdiff(tab_1, tab_2) 
``` 



## `setequal`

- Finally, the function `setequal` tells us if two sets are the same, regardless of order.

- So notice that:

```{r} 
setequal(1:5, 1:6) 
``` 

- but:

```{r} 
setequal(1:5, 5:1) 
``` 

## `setequal`

- The __dplyr__ version checks whether data frames are equal, regardless of order of rows _or_ columns:

```{r} 
dplyr::setequal(tab_1, tab_2) 
``` 



## Joining with data.table

- The **data.table** package includes `merge`, a very efficient function for joining tables.

- In **tidyverse** we joined two tables with `left_join`:

```{r} 
tab <- left_join(murders, results_us_election_2016, by = "state")  
``` 

## Joining with data.table

- In **data.table** the `merge` functions works similarly:

```{r} 
#| message: false 
#| warning: false 
library(data.table) 
tab <- merge(murders, results_us_election_2016, by = "state", all.x = TRUE) 
``` 



## Joining with data.table

- Instead of defining different functions for the different type of joins, `merge` uses the the logical arguments `all` (full join), `all.x` (left join), and `all.y` (right join).

