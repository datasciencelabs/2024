---
title: "Git and GitHub"
keywords: "Productivity Tools"
date: 2024-09-09
format:
   revealjs:
     theme: night
---


## Goal for the day

* Create a repository
* push something to the repository
* connect RStudio to GitHub

----

## Do you have git?

Before we start: 

* Make sure you have Git installed. 
* Open a terminal and type:

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git --version
```

If not installed 

* on a Mac, follow the instructions after typing the above.
* on Windows follow [these instructions](https://gitforwindows.org/)


----

## Motivation

We want to avoid this:

![Posted by rjkb041 on r/ProgrammerHumor](https://preview.redd.it/02o1a7v23qf71.jpg?auto=webp&s=bb61f40a88e2940e4f4b20a56640fcf12a7b1a39)

----

## Motivation

* This is particularly true when more than one person is collaborating and editing the file. 

* Even more important when there are multiple files, as there is in software development, and to some extend data analysis.

----

## Motivation 

* Git is a version control system that provides a systematic approach to keeping versions of files. 

![Posted on devrant.com/ by bhimanshukalra](https://img.devrant.com/devrant/rant/r_1840117_3JUPn.jpg)

----

## Motivation

But we have to learn some things.

![From Meme Git Compilation by Lulu Ilmaknun Qurotaini](https://miro.medium.com/v2/resize:fit:1200/format:webp/0*VcMPr1unIjAIHw2j.jpg)

----

:::{.callout-note}
In these notes, I use `< >` to denote a placeholder. So if I say `<filename>` what you eventually type is the filename you want to use, without the `< >`
:::

----

## Why use Git and GitHub?

1. Sharing.

2. Collaborating.

3. Version control.

We focus on the sharing aspects of Git and GitHub, but introduce some of the basics that permit you to collaborate and use version control.

----

## What is Git?


![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/68739659-fb6f-41e8-9813-32e1de3d82c0_rw_3840.png?h=5c36d3c50c350a440567a1f8f72ac028)


----

## What is GitHub?

* Described a _social network for software developers_. 

* Basically, it's a service that hosts the _remote repository (repo)_ on the web. 

* This facilitates collaboration and sharing greatly. 

----

## What is GitHub?

There many other features such as 

* Recognition system: reward, badges and stars.
* You can host web pages, like the class notes for example.
* Permits contributions via _forks_ and _pull requests_.
* Issue tracking 
* Automation tools. 

----

## What is GitHub?


* The main tool behind GitHub is Git.

* Similar to how the main tool behind RStudio is R.

----

## GitHub accounts

* Pick a professional sounding name.

* Consider adding a profile `README.md`. 

* Instructions are [here](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme).

* Example [here](https://github.com/rafalab).


----

## Repositories

* We are ready to create a GitHub repository (repo). 

* You will have at least two copies of your code: one on your computer and one on GitHub.

* If you add collaborators to this repo, then each will have a copy on their computer. 

* The GitHub copy is  considered the main (previously called master) copy that everybody syncs to. 

* Git will help you keep all the different copies synced.

----

## Repositories

* Let's go make one on GitHub...

* Then create a directory on your computer, this will be the local repo, and connect it to the Github repository.

* First copy and paste the location of your git repository. It should look something like this:

```
https://github.com/your-username/your-repo-name.git
```


----

## Connect Git and GitHub

* When accessing GitHub you need credentials to verify your identity. 

* There are two ways to connect: HTTPS or SSH, each requiring different credentials. 

* We recommend using HTTPS, which uses a Personal Access Token (PAT). 

* Note that **your GitHub website password isn’t your access token**.

----

## Connect Git and GitHub


* Detailed instructions are [here](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).

* Carefully follow the instructions provided by GitHub.

* When setting permissions for the token, choose _non-expiring and select the repo_ option in the scopes section.

* Once you complete these steps, GitHub will display your token—a lengthy string of characters. 

* **Immediately copy this token to your clipboard**. This is the only time GitHub will show it to you.

----


## Generate a token:


* For security, save this token in a password manager. This ensures you can access it if needed later on.

* When git prompts you to enter your password, paste the token you’ve copied. After this, password prompts should no longer appear. 

* If you ever need the token again, retrieve it from your password manager.

More details available from  [Happy Git and GitHub for the use](https://happygitwithr.com/https-pat).

----

## Connect Git and GitHub

* The next step is to let Git know who we are on Github.

* To to this type the following two commands in our terminal window:

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git config --global user.name "Your Name"
git config --global user.mail "your@email.com"
```

----

## Connect Git and GitHub

* This will change the Git configuration in way that anytime you use Git, it will know this information. 

* Note that you need to use the email account that you used to open your GitHub account.

## Connect Git and GitHub

To connect working directory to the GitHub repo

1. initialize the directory:

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git init
```

2. Let Git know what is the _remote_ repository.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git remote add origin <remote-url>
```

Now the two are connected. 

:::{.callout-note}
`origin` is a nickname we will use for the remote. We can call it something else, but everybody calls it origin so best to stick with that.
:::


----

## Overview of Git

The main actions in Git are to: 

1. **pull** changes from the remote repo.
2. **add** files, or as we say in the Git lingo _stage_ files.
3. **commit** changes to the local repo.
4. **push** changes to the _remote_ repo.

----

![From Meme Git Compilation by Lulu Ilmaknun Qurotaini](https://miro.medium.com/v2/resize:fit:880/format:webp/0*cesFJY5JFpI0Rl4v.jpg)

----

## The four areas of Git


![](http://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/git/git-layout.png)

----

## Status

![](http://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/git/git-status.png)
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git status filename
```

----

## Add 

Use `git add` to put file to staging area.

![](http://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/git/git-add.png)

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git status <filename>
```

We say that this file has been _staged_. Check to see what happened:


```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git status <filename>
```


----

## Commit

* To move all the staged files to the local repository we use `git commit`.



![](http://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/git/git-commit.png)



```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git commit -m "must add comment"
``` 

* Once _committed_ the files are _tracked_ and a copy of this version is kept going forward.



* This is like adding `V1` to your filename.


----

## Commit

:::{.callout-note}
You can commit files directly without using `add` by explicitely writing the files at the end of the commit:
:::

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git commit -m "must add comment" <filename>
``` 

----

## Push

* To move to upstream repo we use `git push`

![](http://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/git/git-push.png)

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git push -u origin main
```

* The `-u` flag sets the upstream repo.

* By using this flag, going forward you can simply use `git push` to push changes. 

* So going forward we can just type:

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git push
```

----

## Push

* When using `git push` we need to be careful as if collaborating this will affect the work of others. 

* It might also create a `conflict`.

![Posted by andortang on Nothing is Impossible!](https://andortang.wordpress.com/wp-content/uploads/2017/05/winter-is-coming-brace-yourself-merge-conflicts-are-coming.jpg)


----

## Fetch

* To update our local repository to the remote one we use

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git fetch
```

![](http://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/git/git-fetch.png)

----

## Merge

* Once we are sure this is good, we can merge with our local files:

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git merge
```

![](http://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/git/git-merge.png)

----

## Pull

:::{::callout-note}
I rarely use `fetch` and `merge` and instead use `pull` which does both of these in one step
:::

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git pull
```


![](http://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/git/git-pull.png)



----

## Checkout

* If you want to pull down a specific file you from the remote repo you can use:

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git checkout filename
```

* I use this when I make changes but decide I want to go back to original version on remote repo.

:::{.callout-warning}
If you have a newer version in your local repository this will create a **_conflict_**. It won't let you do it. If you are sure you want to get rid of your local copy you can remove it and then use `checkout`.
:::

----

## Checkout

* You can also use `checkout` to obtain older version:

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git checkout <commit-id> <filename>
```

* You can get the `commit-id` either on the GitHub webpage or using

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git log filename
```

----

## Reset

* What if I commit and realize it was a mistake?

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git reset HEAD~1
```

undos the commit and unstages the files, but **keeps your local copies**. I use this on very often.

* There are many wasy of using `get reset` and it covers most scenarios. 
 
* ChatGPT and stackoverflow are great resources to learn more.

----
  

## Branches

* We are just sratching the surface of Git.

* One advanced feature to be aware of is that you can have several _branches_, useful for working in parallel or testing stuff out that might not make the main repo. 

![Art by: Allison Horst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/efae32ce-863f-4773-852c-4335e3ce4709_rw_3840.png?h=c54a2e5af240ec6e1332e2dcacbd7f33)


----

## Branches

* We wont go over this, but we might need to use these two related commands:

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git remote -v
git brach 
```

----

## Clone


* Another common command is `git clone`.

* It let's download an entire repo, including version history.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

git clone <repo-url>
```


----

## Using Git in RStudio

* Go to file, new project, version control, and follow the instructions. 

* Then notice the `Git` tab in the preferences.


----
![From Meme Git Compilation by Lulu Ilmaknun Qurotaini](https://miro.medium.com/v2/resize:fit:820/format:webp/0*Gb3B1-Xk5qHaxU7v.jpg)

For more memes see [Meme Git Compilation by Lulu Ilmaknun](https://medium.com/@lulu.ilmaknun.q/kompilasi-meme-git-e2fe49c6e33e)